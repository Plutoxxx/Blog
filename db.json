{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/29.jpg","path":"medias/featureimages/29.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/深い森.jpg","path":"medias/music/avatars/深い森.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/Weather.jpg","path":"medias/music/avatars/Weather.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/生きていたんだよな.jpg","path":"medias/music/avatars/生きていたんだよな.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/生きていたんだよな.mp3","path":"medias/music/生きていたんだよな.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/夜曲.mp3","path":"medias/music/夜曲.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/深い森.mp3","path":"medias/music/深い森.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/Weather.mp3","path":"medias/music/Weather.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/yequ.mp3","path":"medias/music/yequ.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/yiluxiangbei.mp3","path":"medias/music/yiluxiangbei.mp3","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1580899729489},{"_id":"source/CNAME","hash":"cc5d5c950f263439facfe00be67d8e1d2b4f35e7","modified":1580899729489},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1580899729648},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1580899729649},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1580899729651},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1580899729652},{"_id":"source/_data/musics.json","hash":"b67dbbef944b3b2de74e233adaba6d7aa5134ca2","modified":1592133870481},{"_id":"themes/matery/_config.yml","hash":"0783242bf50467dd449fb82cdf307fb641dd98e8","modified":1580899729654},{"_id":"source/_data/friends.json","hash":"97cd698d18127d70a00e33b76e66d74f04100c0b","modified":1580899729490},{"_id":"source/_posts/Blog.md","hash":"7a87106142780e811dfb3cfd066f5806ffc0c5b1","modified":1602847551384},{"_id":"source/_posts/CDN.md","hash":"719be546f3c860f005ab7b383d85e26742186519","modified":1625561760314},{"_id":"source/_posts/CVPR2019.md","hash":"1da61e1852fb2908e5bb908c4c6225ec3b9ba627","modified":1625562041305},{"_id":"source/_posts/Data-Structure.md","hash":"11f8be4c5d74c82c3dfa0a6cef17391b48042da1","modified":1602847551443},{"_id":"source/_posts/Java1.md","hash":"5c809ad451629dc1f87b3e72981a9e8dfa6a66e7","modified":1602847551447},{"_id":"source/_posts/Java2.md","hash":"48f995f5f32bb3dc8b4b0df710aea11454871ddc","modified":1602847551458},{"_id":"source/_posts/Java3.md","hash":"b30b5442cbc6197d44d0361b3bb7883dbace195e","modified":1602847551462},{"_id":"source/_posts/MySQL.md","hash":"d925d6b7de817103914999a3d63a614ece766735","modified":1602847551465},{"_id":"source/_posts/WT.md","hash":"cb8a620d090e098797ce97765bfd2d514b5da842","modified":1625561536439},{"_id":"source/_posts/OpenCV.md","hash":"662f520afb7394d2773970c4df4ad914bb4c90c9","modified":1625562183002},{"_id":"source/_posts/Sublime.md","hash":"555a1562a49b2e6e0dca30e3372aa31cc6e7c7f7","modified":1602847551476},{"_id":"source/_posts/PyCharm.md","hash":"481f61b1dfb32fb6d93035c01a547371f6cdff5e","modified":1602847551473},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1580899729641},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1580899729643},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1580899729646},{"_id":"source/friends/index.md","hash":"e19c757224aaa92e83e98d4ea153110f7c1498a1","modified":1580899729645},{"_id":"source/about/index.md","hash":"a44609a862b269e13bb1b3e27440cd8f2141227d","modified":1580899729640},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1580899729655},{"_id":"source/contact/index.md","hash":"30f33ef55344ae04f7617f773f12896357d10141","modified":1580899729644},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1580899729656},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1580899729657},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1580899730709},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1580899730707},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1580899730722},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1580899730721},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1580899730708},{"_id":"themes/matery/layout/friends.ejs","hash":"b9b75ff45324da5b4ddbb6e16ea1ecd239dbc310","modified":1580899730723},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1580899730731},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1580899730724},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1580899730728},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1580899730730},{"_id":"themes/matery/source/favicon.png","hash":"1f3c64aaaf82806384797983ff984bdd1dbaae5a","modified":1580899730755},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1580899730725},{"_id":"source/_posts/Blog/1.png","hash":"263f4768af611c8526ac52ac512aeff2283cb0b5","modified":1580899729493},{"_id":"source/_posts/Blog/12.png","hash":"c0848021bb381f4de69857d455d0157afb3ac211","modified":1580899729497},{"_id":"source/_posts/Blog/11.png","hash":"6de890a650c90c741de18e399d5f51aa94ebe28e","modified":1580899729496},{"_id":"source/_posts/Blog/2.png","hash":"8e901410800ea107c419de03eab85159b98b3efa","modified":1580899729501},{"_id":"source/_posts/Blog/4.png","hash":"ffd6738df47c55d8e0b0093eb823cbcfb04d6b9f","modified":1580899729503},{"_id":"source/_posts/Blog/15.png","hash":"cd91b9dce59129529cec43ec676505fbc6dc5dd0","modified":1580899729500},{"_id":"source/_posts/Blog/14.png","hash":"1132cb56e3d87ff7cdca59db30a4485ccf51835c","modified":1580899729499},{"_id":"source/_posts/Blog/5.png","hash":"8c527e62cb614380813234448bbe053bcd77f54b","modified":1580899729504},{"_id":"source/_posts/Blog/7.png","hash":"28dbe4d1a7aaf244ea040258cc1bedaac8b0ab88","modified":1580899729506},{"_id":"source/_posts/Blog/3.png","hash":"6a0b1620cafc05d80f8e625685915f0ac931629c","modified":1580899729502},{"_id":"source/_posts/Blog/9.png","hash":"f9c0947b17e6e4594bf268fdcb725fb3a0e4f853","modified":1580899729508},{"_id":"source/_posts/Blog/8.png","hash":"ee08196103d24cf759ee5dfaa45aaa35dbab82c2","modified":1580899729507},{"_id":"source/_posts/CDN/2.png","hash":"bf86d007e503d7980dc27dacfc298563116ae58d","modified":1602851941085},{"_id":"source/_posts/Blog/10.png","hash":"9775feed6ca70a124e969fc0335302dcd58115e1","modified":1580899729495},{"_id":"source/_posts/CDN/1.png","hash":"72e8a791f311bb7dbd6659bc5a48248003178617","modified":1602851494324},{"_id":"source/_posts/CDN/5.png","hash":"f53ea695403952a2c75bb3d715d69d1b63936966","modified":1602853763859},{"_id":"source/_posts/CVPR2019/1.png","hash":"5acf66386f682ebbdf25856e12d64fa1ffea55df","modified":1580899729511},{"_id":"source/_posts/CVPR2019/5.png","hash":"a43f80a7b238733a9f21100c363a3e01d3192003","modified":1580899729516},{"_id":"source/_posts/CDN/3.png","hash":"be3e0a59140fd1f8542d9037ff80e3323911f09e","modified":1602852719670},{"_id":"source/_posts/Blog/6.png","hash":"1274923a77d8ce066c77cdde648f3d991fa94bcd","modified":1580899729505},{"_id":"source/_posts/CVPR2019/7.png","hash":"ed7c1b45e7931c19f5eead9ec1893f247ae8874b","modified":1580899729518},{"_id":"source/_posts/CVPR2019/6.png","hash":"da2d1247bdaa81a58e1cb9c711f0b1103e4b4a23","modified":1580899729517},{"_id":"source/_posts/CVPR2019/3.png","hash":"95f402a32455ad9ddfba0874923669a6a9e0e601","modified":1580899729513},{"_id":"source/_posts/Data-Structure/单链表结构特点.png","hash":"d5e75cf00318735f88c726e571a4b32a35b75629","modified":1533031962000},{"_id":"source/_posts/Data-Structure/数组删除.png","hash":"575911d17dfda3e07ebddcb6670d2db15f3d254f","modified":1533031958000},{"_id":"source/_posts/Data-Structure/单链表结构.png","hash":"7ac4ecbff0f3e65ff9d59f92780510c912f9716e","modified":1533031963000},{"_id":"source/_posts/Data-Structure/堆栈.png","hash":"3437c71b8323d21cdfe3c8f356814c9f9bc0137d","modified":1533031961000},{"_id":"source/_posts/Data-Structure/数组查询快.png","hash":"3353eb18fc6546ddffb099416e7d7798928f24f8","modified":1533031958000},{"_id":"source/_posts/Data-Structure/数组添加.png","hash":"5e9d80c9db901fe8d8e445180f93dfc5d0505901","modified":1533031956000},{"_id":"source/_posts/Java3/2_zhuanhuan.jpg","hash":"bf2661016cb6764097ff530e0e15796904a9d732","modified":1580899729529},{"_id":"source/_posts/Data-Structure/增加结点.png","hash":"2bcb4a56af02c9bd897a1d574403c3ea5878c2e5","modified":1533031955000},{"_id":"source/_posts/Java3/3_xuliehua.jpg","hash":"cbad318e997bf4ac62d33b7825520717e5f0d7ac","modified":1580899729531},{"_id":"source/_posts/OpenCV/10.png","hash":"d58a1f3b57e4b47b8a97ac9fb20e87f63eb6300d","modified":1580899729538},{"_id":"source/_posts/OpenCV/11.png","hash":"aa4bf8f55a92701677ac2cccce826b8e6ed84095","modified":1580899729539},{"_id":"source/_posts/OpenCV/12.png","hash":"b8205115491b3d1cf5e02021a88cb34e2a27370e","modified":1580899729540},{"_id":"source/_posts/OpenCV/13.png","hash":"c337a7122691956e8ce0fc771ecd3abf11e87590","modified":1580899729541},{"_id":"source/_posts/OpenCV/16.png","hash":"4ac967bd6e844893e5b5a862b08dd14766d7d359","modified":1580899729546},{"_id":"source/_posts/OpenCV/18.png","hash":"40e9819dd1e68972a7190e7d0a23177c68db7ae1","modified":1580899729549},{"_id":"source/_posts/OpenCV/17.png","hash":"cfc1a97017ca8e0e73696aa0f38bbffebe9caa8f","modified":1580899729548},{"_id":"source/_posts/Java3/1_charset.jpg","hash":"7e260c959724f4c560bd1d0fdb2314fd0627b7c2","modified":1580899729523},{"_id":"source/_posts/OpenCV/21.png","hash":"89e18c07a13fe1c3beaec02f7cd050a177517474","modified":1580899729553},{"_id":"source/_posts/OpenCV/19.png","hash":"cbe88a7a0ce76dfa3bcbbbac35b9275238630eb1","modified":1580899729550},{"_id":"source/_posts/OpenCV/20.png","hash":"e873ce75fe58520eee73dbf69bab7a676d35aa8a","modified":1580899729552},{"_id":"source/_posts/OpenCV/23.png","hash":"0d1295f9187e6dcb161f6eaa1a4694d2d86a10bb","modified":1580899729555},{"_id":"source/_posts/OpenCV/26.png","hash":"97d111fb903486e58d455ca580bd09a54a7d366b","modified":1580899729558},{"_id":"source/_posts/OpenCV/27.png","hash":"05695a549ae73cdac18dcbf8cf9c596c92b7cca0","modified":1580899729559},{"_id":"source/_posts/OpenCV/24.png","hash":"5586160882c79c2e66888921e92e138b6a355693","modified":1580899729556},{"_id":"source/_posts/OpenCV/3.png","hash":"ed6b64d54deb8c9e1db9d0869eca540d96d54a92","modified":1580899729566},{"_id":"source/_posts/OpenCV/31.png","hash":"352e85ae6112b17ec36dfd6b6943990116537c12","modified":1580899729569},{"_id":"source/_posts/OpenCV/4.png","hash":"574083d4f61989af09df672a8c84c02cebf3d607","modified":1580899729572},{"_id":"source/_posts/OpenCV/25.png","hash":"eeb842c65d23d7876ebfadd4b733029b5b491f4b","modified":1580899729557},{"_id":"source/_posts/OpenCV/8.png","hash":"e3deeae1afe8f3b9010ccc52321b8e06d047e5a1","modified":1580899729577},{"_id":"source/_posts/OpenCV/9.png","hash":"d3f69ca6fafbf6bb013239ee630736dc5d4edd41","modified":1580899729578},{"_id":"source/_posts/OpenCV/Pyramid_3.png","hash":"705f81bfc20f51f79905b656b4cd6efb8d9906cb","modified":1580899729584},{"_id":"source/_posts/OpenCV/Pyramid_2.png","hash":"e09eabd5af3eae7a74321e2ac45d792c228b5ac2","modified":1580899729583},{"_id":"source/_posts/OpenCV/canny_5.png","hash":"ae81048fa96bcf19fa9c5949c848482b5d65addd","modified":1580899729598},{"_id":"source/_posts/OpenCV/chain.png","hash":"74e57740acc79cca2a9c5f674ace73b8851909e3","modified":1580899729599},{"_id":"source/_posts/OpenCV/output_13_11.png","hash":"4b0d8ab4822ee7be5d844e34d7449c806e9abe7e","modified":1580899729607},{"_id":"source/_posts/OpenCV/output_13_3.png","hash":"e5cc28a5ed2b9e23ad30a1e611ddfadbed2fce31","modified":1580899729608},{"_id":"source/_posts/OpenCV/output_13_1.png","hash":"34e35d24a050c964e893bd29b81b0515406a5201","modified":1580899729606},{"_id":"source/_posts/OpenCV/l.png","hash":"b13a5d11bb3139c86e87b3845f35b64143a7cc7a","modified":1580899729604},{"_id":"source/_posts/OpenCV/output_13_9.png","hash":"e1bf2777b6f21dbf03aa2a0933c76ad638548bf6","modified":1580899729613},{"_id":"source/_posts/OpenCV/output_13_5.png","hash":"a87f492fb9bfeeeb7995617706140613aa0ab1e1","modified":1580899729610},{"_id":"source/_posts/PyCharm/1.png","hash":"c6807d0dfe83e63c1d9896331f37039b02708e4b","modified":1580899729624},{"_id":"source/_posts/PyCharm/10.png","hash":"109cc0f3491d1e08f2499c1fe64e83f89df29676","modified":1580899729625},{"_id":"source/_posts/PyCharm/2.png","hash":"4c40e93cb57f5b952e6c4e2fe8a2cd4a1bc1122b","modified":1580899729627},{"_id":"source/_posts/PyCharm/3.png","hash":"05e8adb271d597052a67c760742be4d06f7dc45f","modified":1580899729628},{"_id":"source/_posts/OpenCV/output_13_7.png","hash":"bf79465a8949626a4a9b89a079825caf573a12e8","modified":1580899729612},{"_id":"source/_posts/PyCharm/5.png","hash":"17164ac156e47f778ab5787d6bdae830ee9ab669","modified":1580899729630},{"_id":"source/_posts/OpenCV/sobel_1.png","hash":"a850b73e8e5a66b6e52d12d681e5b38aae259550","modified":1580899729621},{"_id":"source/_posts/PyCharm/4.png","hash":"781eaf75b62a3a4b28f2f045b46ee75abc6d65d1","modified":1580899729629},{"_id":"source/_posts/PyCharm/7.png","hash":"14b635253908a894ec5c6f839ce8fc5d2bb33eed","modified":1580899729632},{"_id":"source/_posts/Sublime/1.png","hash":"d21e28a4d7772fb5198a2a7571b4ff974386c43a","modified":1580899729637},{"_id":"source/_posts/PyCharm/6.png","hash":"dfa5fc7c716fd800f718f1e80582ca2c6c0cafc5","modified":1580899729631},{"_id":"source/_posts/PyCharm/9.png","hash":"48de80b2a963cd98d446958b6f5d3321504a29a2","modified":1580899729635},{"_id":"source/_posts/Sublime/2.png","hash":"dcaf6a2eaac07d8dbc79cfe58edd2c5f14956800","modified":1580899729638},{"_id":"source/_posts/PyCharm/8.png","hash":"320551f0fd1c37117150b296373239ece1c9c3f2","modified":1580899729633},{"_id":"source/_posts/WT/2.png","hash":"d09a31babf201dfdfce2f2e5d25c40ae16d852f2","modified":1593998967056},{"_id":"source/_posts/WT/3.png","hash":"a16c646fcda4f768aa7b483a7136b0f4997cab45","modified":1593998967057},{"_id":"source/_posts/WT/7.png","hash":"cc510aea47a3fe5b794e1b84f5dbfb00d472cc1f","modified":1593998967083},{"_id":"source/_posts/WT/terminal.ico","hash":"e881dace2f5d083f752a8c5447f1fe9b715a6513","modified":1593998967086},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1580899729658},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1580899729661},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1580899729660},{"_id":"source/_posts/WT/git.png","hash":"e695a37c6fbcba609c1ca2333341c4dd1162b368","modified":1593998967084},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"ddffd89460ebbebbc4ac160920674ec56cc3e470","modified":1580899729662},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1580899729664},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1580899729665},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"c175c8f228bdf9469155beded0cb956a6e51e61a","modified":1580899729666},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1580899729668},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1580899729663},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1580899729667},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1580899729669},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1580899729670},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1580899729671},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1580899729673},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1580899729672},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1580899729674},{"_id":"source/_posts/WT/5.png","hash":"b2c031c13d083120f6970ad5daa69e67a600e843","modified":1593998967065},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1580899729677},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1580899729659},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1580899729679},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1580899729678},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1580899729680},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1580899729675},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1580899729673},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1580899729682},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"55272fab7a3303e94f1839ebd7ca6cf9965fb328","modified":1580899729681},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1580899730678},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1580899730685},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1580899730688},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1580899729676},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1580899730686},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1580899730684},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1580899730700},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1580899730701},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1580899730705},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1580899730703},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1580899730704},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1580899730687},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1580899730704},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1580899730749},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1580899730752},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1580899730753},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1580899729662},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1580899730768},{"_id":"themes/matery/source/css/matery.css","hash":"b92bd5093424c4cc62f37175f1b0a54c4611a802","modified":1580899730750},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1580899730706},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1580899730770},{"_id":"themes/matery/source/medias/logo.png","hash":"840cd8014517adab1e973dd2fdb530eb107e45ce","modified":1580899731338},{"_id":"source/_posts/Blog/13.png","hash":"7a8f1deedd175993abf6321bf728f45eeadb02b5","modified":1580899729498},{"_id":"source/_posts/CDN/4.png","hash":"d1a355fa8f857312d07d332d51b8e951e8cc9050","modified":1602852969672},{"_id":"source/_posts/CVPR2019/2.png","hash":"6765a71d257373264441be7269273b688526465e","modified":1580899729512},{"_id":"source/_posts/CVPR2019/4.png","hash":"e316f741bacc21b935261050607f5bf9903431f3","modified":1580899729515},{"_id":"source/_posts/Java3/1_io.jpg","hash":"ccd65537aa477623bbc4d1b3b532a1edfab2107a","modified":1580899729525},{"_id":"source/_posts/Java3/2_copy.jpg","hash":"d482c93b0a60c01a28a1f7883fcbf030f88776fe","modified":1580899729527},{"_id":"source/_posts/OpenCV/1.png","hash":"aa51ade046ef946bced8069f2dd107c9dec1e992","modified":1580899729537},{"_id":"source/_posts/OpenCV/14.png","hash":"1f38d71e9da25b0a4cccdbe9a2c6552509c88c57","modified":1580899729544},{"_id":"source/_posts/OpenCV/15.png","hash":"d124953fa62ae7d16a64249b3b09811dc7ca6809","modified":1580899729545},{"_id":"source/_posts/OpenCV/2.png","hash":"0f28f122be551350916b72257d6a0c15781e72b4","modified":1580899729551},{"_id":"source/_posts/OpenCV/22.png","hash":"5d924782e864a7c030b5bcaed02bc1829ad6ae10","modified":1580899729554},{"_id":"source/_posts/OpenCV/32.png","hash":"254e89663a59538e13a48eb53370fbacef95f953","modified":1580899729570},{"_id":"source/_posts/OpenCV/5.png","hash":"2d4c057bcda36ecf39a08ee4ccd550a490186344","modified":1580899729573},{"_id":"source/_posts/OpenCV/6.png","hash":"12b45be86ad76785283b35a27d34f2d0cff9a6db","modified":1580899729575},{"_id":"source/_posts/OpenCV/7.png","hash":"1ee54d0d1973581569cf6975d755e95bd6155b65","modified":1580899729576},{"_id":"source/_posts/OpenCV/30.png","hash":"b705a296b0240f19d913a824645c17ddaee081c4","modified":1580899729567},{"_id":"source/_posts/OpenCV/canny_1.png","hash":"00fe93ed472e33d2c6722fc66743f5db4c48a66a","modified":1580899729586},{"_id":"source/_posts/OpenCV/canny_3.png","hash":"a5af9412e3d1efc9e6dcf570e6d0c97358b873f4","modified":1580899729594},{"_id":"source/_posts/OpenCV/canny_4.png","hash":"a891d1e77ed0418fbaf6a4e4777dd0718d1e8235","modified":1580899729596},{"_id":"source/_posts/OpenCV/canny_2.png","hash":"634bdb86cf54ecbe016ca2a2fadcf44b5451429e","modified":1580899729591},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1580899730773},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1580899730784},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1580899730789},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1580899730792},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1580899730863},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1580899730864},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1580899730895},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1580899730889},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1580899730897},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1580899730920},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1580899730884},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1580899730929},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1580899730933},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1580899730937},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1580899730938},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1580899730934},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1580899730954},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1580899730935},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1580899730936},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1580899730957},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1580899730972},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1580899731013},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"1f3c64aaaf82806384797983ff984bdd1dbaae5a","modified":1580899730970},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1580899731017},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1580899731016},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1580899730973},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1580899731019},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1580899731030},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1580899731025},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1580899731065},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1580899731069},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1580899731071},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"40e2d4dbd03a56f67c0fc0d51b81e0d9593dbffc","modified":1602847551585},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1580899730795},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1580899730866},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1580899730901},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1580899730892},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1580899730969},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1580899731015},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1580899731018},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1580899731026},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1580899731028},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1580899731029},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1580899731063},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1580899731066},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1580899731064},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1580899731070},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1580899731072},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1580899731076},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1580899731075},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1580899731083},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1580899731038},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1580899731084},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"99848649d9d8afcba452912e62adb00e0a8133fd","modified":1602847551548},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"8c012214ec29108e23f74be2f88ae9f3b0ee7b5c","modified":1625560995344},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"3163c7e119728bbf6050c7b348cbf331afdeba9a","modified":1602847551602},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"73d25d76251e6060630c88d44e080d4615ff71b7","modified":1602847551664},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"8cffc6f2c8c7dc1dc8b840f53e5f108ecdd193d2","modified":1602847551632},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"6b391dbe7e0920eab3b7c56b6fa4368e7ecd6439","modified":1602847551618},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"93cb879cf906c20bc84a9b303b9d400eaef9f3fb","modified":1602847551675},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"aff03e88cb5c5618cfc25242449b7889d98311e4","modified":1602847551712},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"f28e1857642b795bb890f411df16d58c34009e44","modified":1602847551718},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"70585e077f495aaab0c44a78b6541f13a9872421","modified":1580899731869},{"_id":"source/_posts/OpenCV/28.png","hash":"7b22469f2bf1d88274e5da84181a6013c239a612","modified":1580899729562},{"_id":"source/_posts/OpenCV/Pyramid_1.png","hash":"4a70a319659ef712cb362b386dbe58921597cba6","modified":1580899729582},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1580899730799},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1580899730906},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"8ddd0a58543b164d498659be6f22a67ec3c6c831","modified":1580899731871},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1580899730903},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1580899730905},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1580899730911},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1580899730913},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1580899730914},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1580899730915},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1580899730923},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1580899730909},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1580899730944},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1580899730918},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1580899730946},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1580899730947},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1580899730941},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1580899730948},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1580899730960},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"af9fd7d3a60737d8f85eb9357d202b74eb40ff82","modified":1592095868000},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1580899730963},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1580899730967},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1580899730975},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1580899731033},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1580899731040},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1580899730908},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1580899730952},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1580899730950},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"246dd68ddfc4f6e2ae1d5542fd099ed3f465147c","modified":1602847551628},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"287a125f78d70d3b2f799698459a255be759ceae","modified":1602847551679},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"a7cab7c0c02426bf560c0739b9db8fe1bc8d892f","modified":1602847551729},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"ab8a214659191597744de530ae5edc732a7eadd3","modified":1602847551684},{"_id":"themes/matery/source/medias/featureimages/29.jpg","hash":"88da2215a333d0a8770b8ee9f7d463f46eca7e78","modified":1625560995347},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1580899731345},{"_id":"source/_posts/OpenCV/29.png","hash":"21e1ca57c71cc4ca7ea2422bdb0b971c6e25abad","modified":1580899729565},{"_id":"source/_posts/OpenCV/hist_1.png","hash":"254607553cdd320bb916d39892dc1f5996d1bbaa","modified":1580899729603},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1580899731347},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1580899730860},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1580899730846},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"a55f6c4e1a241940fcb113fed9f78ad3e2e37f21","modified":1592095876000},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"051c2dfbb6e1d4ca10ceefddcb0754d30aa296c0","modified":1602847551493},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1580899731037},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1580899731062},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"3aa60f2bb88b87e40840b572d84ffe71bdce01be","modified":1602847551514},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ca1dd05a30e5ba57b8401ebe13bcb870c4f59ba7","modified":1602847551639},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"7985b7012093d3e4b31490a8ebf03d91590d93eb","modified":1602847551598},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1580899730809},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1580899730887},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1580899730804},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1580899731034},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"56c539ec6ae07ab3de6e0fed711e17ef692862e0","modified":1602847551534},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"14b21edd9902741e83181b8c09a1987e44c724bf","modified":1602847551650},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"75963565d4380370f6575ec4379d539bc4b6e423","modified":1625560995342},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"128ead609e53a725aab95ea95fb7e9b4b0a016b2","modified":1602847551725},{"_id":"themes/matery/source/medias/music/avatars/深い森.jpg","hash":"da31e19a2209e611efe57f9df4c4c6fabf8e8f20","modified":1593998967258},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1580899730841},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"ce4f794733288ab1a8f72ef7a4d3ba3da8acf73c","modified":1602847551522},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1580899730926},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1580899731024},{"_id":"themes/matery/source/medias/music/avatars/Weather.jpg","hash":"ede927b58c90105f49964327d15f82298aaa6ad3","modified":1593998967253},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1580899731067},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"a70c016b42f5701366b76d178e69419f3853ccfb","modified":1602847551569},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"efc1f6f06057138456e9da7a99651faf43d6c4af","modified":1592095570000},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"a70c016b42f5701366b76d178e69419f3853ccfb","modified":1592095874000},{"_id":"source/_posts/Data-Structure/二叉树.bmp","hash":"ffb01f6ce56dfb741a5b079d30518dd95a3a2af9","modified":1533031962000},{"_id":"source/_posts/Data-Structure/队列图.bmp","hash":"8869d8b38864a02afebfcb3adb4c86ef2265ab16","modified":1533031961000},{"_id":"source/_posts/WT/4.png","hash":"4b09be001426d2c944cbde926f2e74cae09826fc","modified":1593998967064},{"_id":"themes/matery/source/medias/music/avatars/生きていたんだよな.jpg","hash":"9b9bb762e5b1cf9a0ff0b534b4d3eb49d43a82f5","modified":1593998967311},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"e46d260fd6f98bfe447ae8774f7c01bca1b3f0fc","modified":1602847551581},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"1ee2d4bc8b86142b4c25c52bc81aa039b1c0814c","modified":1602847551614},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1580899731079},{"_id":"source/_posts/Data-Structure/删除结点.bmp","hash":"f59bcf19c3bed647e8609e441c1e3cfcf8f515fb","modified":1533031958000},{"_id":"source/_posts/WT/1.png","hash":"3a42c570db87888a8af8c8f9883026d4d35c77f1","modified":1593998967054},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"e78fac68289bb3fae4e8efda6af395318e22e8d8","modified":1592095866000},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"41b9c68926fc240f68f26c17b66d36a09aedda8a","modified":1592095860000},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"bab7069772dc6cc03512f183f6e1bce329565001","modified":1602847551739},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1580899731022},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1580899730818},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"ba8c404728bb0161e14161f2cddcadd080d51cf2","modified":1602847551707},{"_id":"source/_posts/OpenCV/scharr.jpg","hash":"0f84fa08b6835694a933f143a709cd8e914cc2da","modified":1580899729620},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"2664e8a25bc53bee9fa4e85baaecbed1d75bc934","modified":1602847551505},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1580899730877},{"_id":"source/_posts/WT/6.jpg","hash":"052380879b0782ebc250d09f18ca2555ec8d1b1d","modified":1593998967081},{"_id":"themes/matery/source/medias/music/生きていたんだよな.mp3","hash":"6e2a736861d416eb981315134e4cb10de8af57f9","modified":1593998967970},{"_id":"themes/matery/source/medias/music/夜曲.mp3","hash":"deae9bf9f94818a81ef45853de62c685ea073862","modified":1593998967506},{"_id":"themes/matery/source/medias/music/深い森.mp3","hash":"7ec9813db26e363e86ffc0566d2514130cfee893","modified":1593998967738},{"_id":"themes/matery/source/medias/music/Weather.mp3","hash":"5003f41c392166c135a1f93b0159d0b4c6a3ed1f","modified":1593998967238},{"_id":"themes/matery/source/medias/music/yequ.mp3","hash":"c9b6405e5c6b07e3f04115bb9d32a3ec88f9a451","modified":1580899731722},{"_id":"themes/matery/source/medias/music/yiluxiangbei.mp3","hash":"19109e0e2d8a9dc1e118f54f05394096144210fd","modified":1580899731865},{"_id":"public/baidu_urls.txt","hash":"9c114d0002426f556e12faea8cd920eeb511ab52","modified":1625562068666},{"_id":"public/baidusitemap.xml","hash":"e3d1d5c17c38b5c4f45b7fc8fb41b2cf72979616","modified":1625562068672},{"_id":"public/atom.xml","hash":"583d9989defa8aad2860fffe9fac44bb80006361","modified":1625562070252},{"_id":"public/sitemap.xml","hash":"4446ccf6eb55873f03d34acec3e3f6f10ba013d3","modified":1625562070627},{"_id":"public/search.xml","hash":"9ef22a96bf74c4c7d89a3f8a8d342832cd59b0a4","modified":1625562070627},{"_id":"public/tags/index.html","hash":"d7dcbd522b431c295c6711a1b5a66584b354bd02","modified":1625562070740},{"_id":"public/archives/index.html","hash":"8fa0a375a30bedf7b67c0383698598d1df69c195","modified":1625562070741},{"_id":"public/categories/index.html","hash":"d1f6c76b17faf19695760f967dfbab8b5c479e86","modified":1625562070741},{"_id":"public/404.html","hash":"ac631bfe908bd832d9e8593d9b12147ecb9560dd","modified":1625562070742},{"_id":"public/contact/index.html","hash":"abdbb865e90003169906c8d8f2fa50a4c495bf89","modified":1625562070742},{"_id":"public/friends/index.html","hash":"7271e512beb2587380cebf617769769796aecfb5","modified":1625562070742},{"_id":"public/about/index.html","hash":"578dc204c237e3bec0f49a3ad2dec045fd38ddb8","modified":1625562070742},{"_id":"public/2020/09/21/cdn/index.html","hash":"641d53acf78893d19d6de57a663ee680e777420b","modified":1625562070742},{"_id":"public/2020/06/10/data-structure/index.html","hash":"1f2c12f8487b5c072d4b278020c5390397744e7a","modified":1625562070743},{"_id":"public/2020/06/30/wt/index.html","hash":"e0a83f71d988ae5dbd07f929d64da7fbaa46df77","modified":1625562070743},{"_id":"public/2020/01/12/mysql/index.html","hash":"bcfcc37e8c525ff68deb9876f4785390828226a6","modified":1625562070743},{"_id":"public/2019/12/22/sublime/index.html","hash":"7434ab3c875996ac0d47ca9cc37f7414a0f64c6b","modified":1625562070743},{"_id":"public/2019/12/08/opencv/index.html","hash":"5f2aa7ae075316f622720ccb84ec207ea839933b","modified":1625562070743},{"_id":"public/2019/11/09/pycharm/index.html","hash":"f3009e6b880a2fb26df36ef0b56bb55c7d84030f","modified":1625562070744},{"_id":"public/2019/12/01/java3/index.html","hash":"b0703cc39fcb30209be2453ae770a1dd17b59ae3","modified":1625562070744},{"_id":"public/2019/10/27/java1/index.html","hash":"bdfd9a78fe28675c337efe61c02e6161f43b9e56","modified":1625562070744},{"_id":"public/2019/11/03/java2/index.html","hash":"6a55c9be4ceae15a573719f695fefe35bf1117cc","modified":1625562070744},{"_id":"public/2019/09/25/blog/index.html","hash":"06acf470af5cce7b7fd0d66c57fb52329b40986d","modified":1625562070744},{"_id":"public/2019/09/28/cvpr2019/index.html","hash":"9adbf6cf7b58ed9017d0230b69df111dff79466c","modified":1625562070745},{"_id":"public/archives/2019/index.html","hash":"297493f9e4bba6865ff633989c92b1a585e6b6ab","modified":1625562070745},{"_id":"public/archives/2019/09/index.html","hash":"d89cb485131e08d5a0b3fbbdca6fe5916823dc0f","modified":1625562070745},{"_id":"public/archives/2019/10/index.html","hash":"a1c384d7b61212b041a221b28e6f9efb4a55431e","modified":1625562070745},{"_id":"public/archives/2019/11/index.html","hash":"9a6ec9a255555f8d8fbff55416fd59e6db50f311","modified":1625562070745},{"_id":"public/archives/2019/12/index.html","hash":"a747a10fa538abd15b3776f12430c551b37b2342","modified":1625562070746},{"_id":"public/archives/2020/index.html","hash":"b4b9784794a7c3e03d054a90c74f9f281cf1636d","modified":1625562070746},{"_id":"public/archives/2020/01/index.html","hash":"f5e47fb8a6c39768310832094a65604d81921cc7","modified":1625562070746},{"_id":"public/archives/2020/06/index.html","hash":"d7e2b99ff498f6c55ff9972a234270b68dee634f","modified":1625562070746},{"_id":"public/archives/2020/09/index.html","hash":"0731fc8cbbcc47c581ed8f62ed67ad9ac5d9677e","modified":1625562070746},{"_id":"public/categories/环境搭建/index.html","hash":"150af816ab7d0fa572b17545e8af561455e06ff1","modified":1625562070747},{"_id":"public/categories/paper/index.html","hash":"f38ea1aa0fb17974b181e5d0e408802566305041","modified":1625562070747},{"_id":"public/categories/Java/index.html","hash":"2e33f72a6f564fa6d8411c43558fcceba47d4179","modified":1625562070747},{"_id":"public/categories/MySQL/index.html","hash":"01ce8d4544638e349e3488be29d9a629bc2f22e1","modified":1625562070747},{"_id":"public/categories/图像/index.html","hash":"e51fe88216259b57292a327ed33ca4c1cd08e605","modified":1625562070747},{"_id":"public/categories/软件/index.html","hash":"aac0a19a16a803303db07b7bcf598638e3757460","modified":1625562070747},{"_id":"public/tags/工具/index.html","hash":"c9e04b62694c76656eba709f5ba9dd7912b8612c","modified":1625562070748},{"_id":"public/index.html","hash":"405d18519a55864372d59032b4b807ed619997dd","modified":1625562070748},{"_id":"public/tags/博客/index.html","hash":"4ce64985d4d008aada8dd9083cb3eb7abd35f30e","modified":1625562070748},{"_id":"public/tags/Hexo/index.html","hash":"00555f555cd8746eea8f66c6e6f93c6dc32c54c1","modified":1625562070748},{"_id":"public/tags/GitHub/index.html","hash":"1b7bd90282ddbc3436024c041784d7e311ca776d","modified":1625562070748},{"_id":"public/tags/Netlify/index.html","hash":"9801f0844ea7e364a4a79b830c3265f2edd93687","modified":1625562070748},{"_id":"public/tags/DeepLearning/index.html","hash":"85a4e24f3f8e0a446a207a056597bf6278bbfc8b","modified":1625562070748},{"_id":"public/tags/目标检测/index.html","hash":"3918475024c7eb9288b8bbf6d31c5f321383d79b","modified":1625562070749},{"_id":"public/tags/CVPR/index.html","hash":"e3aa1b130e75364c1b5a0e7b79ef2176a4e3af55","modified":1625562070749},{"_id":"public/tags/数据结构与算法/index.html","hash":"e265269a36b27b18a50be5396164e80e106b4680","modified":1625562070749},{"_id":"public/tags/Java/index.html","hash":"7fd14bc3af30779dbd91483c83f9cbaba55346d1","modified":1625562070749},{"_id":"public/tags/语言/index.html","hash":"216b7cf0a4ad5332b1498b5fe55b8d05cb609106","modified":1625562070749},{"_id":"public/tags/MySQL/index.html","hash":"f5ed7e1d771649c0cb9eba804a4fe0f7206483d5","modified":1625562070750},{"_id":"public/tags/OpenCV/index.html","hash":"a53ad5d63acf5f9ae0aa5c520a0c456f0962cd7a","modified":1625562070750},{"_id":"public/tags/Windows-Terminal/index.html","hash":"db2e5cb579867c9d1a8504859e08b90eddbc164b","modified":1625562070750},{"_id":"public/tags/python/index.html","hash":"d590bd78232a902dfc20b32bca71724d6793b095","modified":1625562070750},{"_id":"public/tags/Sublime/index.html","hash":"06adc200fcade942289b3c63dd11926714cd3394","modified":1625562070750},{"_id":"public/tags/PyCharm/index.html","hash":"521ae9c2c6c2c08bfab7c9c2a90b9e13c0dbdc4e","modified":1625562070751},{"_id":"public/tags/服务器配置/index.html","hash":"81456dc437451a6dd91e26bf5bbf96e86a938dea","modified":1625562070751},{"_id":"public/CNAME","hash":"cc5d5c950f263439facfe00be67d8e1d2b4f35e7","modified":1625562070751},{"_id":"public/medias/logo.png","hash":"840cd8014517adab1e973dd2fdb530eb107e45ce","modified":1625562070751},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1625562070751},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1625562070752},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1625562070752},{"_id":"public/medias/avatars/avatar.jpg","hash":"1f3c64aaaf82806384797983ff984bdd1dbaae5a","modified":1625562070752},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1625562070752},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1625562070752},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1625562070753},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1625562070755},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1625562070755},{"_id":"public/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1625562070755},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1625562070756},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1625562070757},{"_id":"public/medias/featureimages/16.jpg","hash":"40e2d4dbd03a56f67c0fc0d51b81e0d9593dbffc","modified":1625562070757},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1625562070757},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1625562070757},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1625562070757},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1625562070758},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1625562070758},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1625562070758},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1625562070758},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1625562070758},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1625562070759},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1625562070759},{"_id":"public/medias/featureimages/11.jpg","hash":"99848649d9d8afcba452912e62adb00e0a8133fd","modified":1625562070759},{"_id":"public/medias/featureimages/18.jpg","hash":"3163c7e119728bbf6050c7b348cbf331afdeba9a","modified":1625562070759},{"_id":"public/medias/featureimages/5.jpg","hash":"aff03e88cb5c5618cfc25242449b7889d98311e4","modified":1625562070759},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1625562070760},{"_id":"public/medias/reward/wechat.png","hash":"8ddd0a58543b164d498659be6f22a67ec3c6c831","modified":1625562070760},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1625562070760},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1625562070760},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1625562070760},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1625562070760},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1625562070761},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1625562070761},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1625562070761},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1625562070761},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1625562070761},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1625562070761},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1625562070762},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1625562070762},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1625562070762},{"_id":"public/medias/music/avatars/生きていたんだよな.jpg","hash":"9b9bb762e5b1cf9a0ff0b534b4d3eb49d43a82f5","modified":1625562070762},{"_id":"public/2020/09/21/cdn/1.png","hash":"72e8a791f311bb7dbd6659bc5a48248003178617","modified":1625562070762},{"_id":"public/2020/09/21/cdn/2.png","hash":"bf86d007e503d7980dc27dacfc298563116ae58d","modified":1625562070762},{"_id":"public/2020/09/21/cdn/3.png","hash":"be3e0a59140fd1f8542d9037ff80e3323911f09e","modified":1625562070762},{"_id":"public/2020/09/21/cdn/5.png","hash":"f53ea695403952a2c75bb3d715d69d1b63936966","modified":1625562070763},{"_id":"public/2019/09/28/cvpr2019/1.png","hash":"5acf66386f682ebbdf25856e12d64fa1ffea55df","modified":1625562070763},{"_id":"public/2019/09/28/cvpr2019/3.png","hash":"95f402a32455ad9ddfba0874923669a6a9e0e601","modified":1625562070763},{"_id":"public/2019/09/28/cvpr2019/5.png","hash":"a43f80a7b238733a9f21100c363a3e01d3192003","modified":1625562070763},{"_id":"public/2019/09/28/cvpr2019/6.png","hash":"da2d1247bdaa81a58e1cb9c711f0b1103e4b4a23","modified":1625562070763},{"_id":"public/2019/09/28/cvpr2019/7.png","hash":"ed7c1b45e7931c19f5eead9ec1893f247ae8874b","modified":1625562070764},{"_id":"public/2019/09/25/blog/1.png","hash":"263f4768af611c8526ac52ac512aeff2283cb0b5","modified":1625562070764},{"_id":"public/2019/09/25/blog/11.png","hash":"6de890a650c90c741de18e399d5f51aa94ebe28e","modified":1625562070764},{"_id":"public/2019/09/25/blog/10.png","hash":"9775feed6ca70a124e969fc0335302dcd58115e1","modified":1625562070764},{"_id":"public/2019/09/25/blog/12.png","hash":"c0848021bb381f4de69857d455d0157afb3ac211","modified":1625562070764},{"_id":"public/2019/09/25/blog/14.png","hash":"1132cb56e3d87ff7cdca59db30a4485ccf51835c","modified":1625562070764},{"_id":"public/2019/09/25/blog/2.png","hash":"8e901410800ea107c419de03eab85159b98b3efa","modified":1625562070849},{"_id":"public/favicon.png","hash":"1f3c64aaaf82806384797983ff984bdd1dbaae5a","modified":1625562070850},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1625562070871},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1625562070872},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1625562070872},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1625562070872},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1625562070872},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1625562070873},{"_id":"public/medias/featureimages/13.jpg","hash":"8c012214ec29108e23f74be2f88ae9f3b0ee7b5c","modified":1625562070873},{"_id":"public/medias/featureimages/25.jpg","hash":"73d25d76251e6060630c88d44e080d4615ff71b7","modified":1625562070873},{"_id":"public/medias/featureimages/22.jpg","hash":"8cffc6f2c8c7dc1dc8b840f53e5f108ecdd193d2","modified":1625562070873},{"_id":"public/medias/featureimages/20.jpg","hash":"6b391dbe7e0920eab3b7c56b6fa4368e7ecd6439","modified":1625562070873},{"_id":"public/medias/featureimages/26.jpg","hash":"93cb879cf906c20bc84a9b303b9d400eaef9f3fb","modified":1625562070874},{"_id":"public/medias/featureimages/6.jpg","hash":"f28e1857642b795bb890f411df16d58c34009e44","modified":1625562070874},{"_id":"public/medias/reward/alipay.jpg","hash":"70585e077f495aaab0c44a78b6541f13a9872421","modified":1625562070874},{"_id":"public/medias/banner/2.jpg","hash":"af9fd7d3a60737d8f85eb9357d202b74eb40ff82","modified":1625562070874},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1625562070874},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1625562070875},{"_id":"public/medias/featureimages/21.jpg","hash":"246dd68ddfc4f6e2ae1d5542fd099ed3f465147c","modified":1625562070875},{"_id":"public/medias/featureimages/27.jpg","hash":"287a125f78d70d3b2f799698459a255be759ceae","modified":1625562070875},{"_id":"public/medias/featureimages/8.jpg","hash":"a7cab7c0c02426bf560c0739b9db8fe1bc8d892f","modified":1625562070876},{"_id":"public/medias/featureimages/29.jpg","hash":"88da2215a333d0a8770b8ee9f7d463f46eca7e78","modified":1625562070876},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1625562070876},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1625562070876},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1625562070878},{"_id":"public/medias/music/avatars/深い森.jpg","hash":"da31e19a2209e611efe57f9df4c4c6fabf8e8f20","modified":1625562070880},{"_id":"public/medias/music/avatars/Weather.jpg","hash":"ede927b58c90105f49964327d15f82298aaa6ad3","modified":1625562070880},{"_id":"public/2020/09/21/cdn/4.png","hash":"d1a355fa8f857312d07d332d51b8e951e8cc9050","modified":1625562070881},{"_id":"public/2019/09/28/cvpr2019/2.png","hash":"6765a71d257373264441be7269273b688526465e","modified":1625562070881},{"_id":"public/2019/09/28/cvpr2019/4.png","hash":"e316f741bacc21b935261050607f5bf9903431f3","modified":1625562070881},{"_id":"public/2019/09/25/blog/13.png","hash":"7a8f1deedd175993abf6321bf728f45eeadb02b5","modified":1625562070882},{"_id":"public/2019/09/25/blog/15.png","hash":"cd91b9dce59129529cec43ec676505fbc6dc5dd0","modified":1625562070882},{"_id":"public/2019/09/25/blog/3.png","hash":"6a0b1620cafc05d80f8e625685915f0ac931629c","modified":1625562070882},{"_id":"public/2019/09/25/blog/5.png","hash":"8c527e62cb614380813234448bbe053bcd77f54b","modified":1625562070882},{"_id":"public/2019/09/25/blog/4.png","hash":"ffd6738df47c55d8e0b0093eb823cbcfb04d6b9f","modified":1625562070883},{"_id":"public/2019/09/25/blog/6.png","hash":"1274923a77d8ce066c77cdde648f3d991fa94bcd","modified":1625562070883},{"_id":"public/2019/09/25/blog/7.png","hash":"28dbe4d1a7aaf244ea040258cc1bedaac8b0ab88","modified":1625562070883},{"_id":"public/2019/09/25/blog/8.png","hash":"ee08196103d24cf759ee5dfaa45aaa35dbab82c2","modified":1625562070883},{"_id":"public/2019/09/25/blog/9.png","hash":"f9c0947b17e6e4594bf268fdcb725fb3a0e4f853","modified":1625562070883},{"_id":"public/2019/12/22/sublime/1.png","hash":"d21e28a4d7772fb5198a2a7571b4ff974386c43a","modified":1625562070883},{"_id":"public/2019/12/22/sublime/2.png","hash":"dcaf6a2eaac07d8dbc79cfe58edd2c5f14956800","modified":1625562070884},{"_id":"public/2019/12/01/java3/1_charset.jpg","hash":"7e260c959724f4c560bd1d0fdb2314fd0627b7c2","modified":1625562070884},{"_id":"public/2019/12/01/java3/2_zhuanhuan.jpg","hash":"bf2661016cb6764097ff530e0e15796904a9d732","modified":1625562070884},{"_id":"public/2019/12/01/java3/3_xuliehua.jpg","hash":"cbad318e997bf4ac62d33b7825520717e5f0d7ac","modified":1625562070884},{"_id":"public/2020/06/30/wt/2.png","hash":"d09a31babf201dfdfce2f2e5d25c40ae16d852f2","modified":1625562070884},{"_id":"public/2020/06/30/wt/3.png","hash":"a16c646fcda4f768aa7b483a7136b0f4997cab45","modified":1625562070884},{"_id":"public/2020/06/30/wt/5.png","hash":"b2c031c13d083120f6970ad5daa69e67a600e843","modified":1625562070885},{"_id":"public/2020/06/30/wt/7.png","hash":"cc510aea47a3fe5b794e1b84f5dbfb00d472cc1f","modified":1625562070885},{"_id":"public/2020/06/30/wt/git.png","hash":"e695a37c6fbcba609c1ca2333341c4dd1162b368","modified":1625562070885},{"_id":"public/2020/06/30/wt/terminal.ico","hash":"e881dace2f5d083f752a8c5447f1fe9b715a6513","modified":1625562070885},{"_id":"public/2020/06/10/data-structure/单链表结构.png","hash":"7ac4ecbff0f3e65ff9d59f92780510c912f9716e","modified":1625562070885},{"_id":"public/2020/06/10/data-structure/单链表结构特点.png","hash":"d5e75cf00318735f88c726e571a4b32a35b75629","modified":1625562070885},{"_id":"public/2020/06/10/data-structure/堆栈.png","hash":"3437c71b8323d21cdfe3c8f356814c9f9bc0137d","modified":1625562070885},{"_id":"public/2020/06/10/data-structure/增加结点.png","hash":"2bcb4a56af02c9bd897a1d574403c3ea5878c2e5","modified":1625562070886},{"_id":"public/2020/06/10/data-structure/数组查询快.png","hash":"3353eb18fc6546ddffb099416e7d7798928f24f8","modified":1625562070886},{"_id":"public/2020/06/10/data-structure/数组删除.png","hash":"575911d17dfda3e07ebddcb6670d2db15f3d254f","modified":1625562070886},{"_id":"public/2020/06/10/data-structure/数组添加.png","hash":"5e9d80c9db901fe8d8e445180f93dfc5d0505901","modified":1625562070886},{"_id":"public/2019/11/09/pycharm/1.png","hash":"c6807d0dfe83e63c1d9896331f37039b02708e4b","modified":1625562070886},{"_id":"public/2019/11/09/pycharm/2.png","hash":"4c40e93cb57f5b952e6c4e2fe8a2cd4a1bc1122b","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/3.png","hash":"05e8adb271d597052a67c760742be4d06f7dc45f","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/10.png","hash":"109cc0f3491d1e08f2499c1fe64e83f89df29676","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/4.png","hash":"781eaf75b62a3a4b28f2f045b46ee75abc6d65d1","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/6.png","hash":"dfa5fc7c716fd800f718f1e80582ca2c6c0cafc5","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/5.png","hash":"17164ac156e47f778ab5787d6bdae830ee9ab669","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/7.png","hash":"14b635253908a894ec5c6f839ce8fc5d2bb33eed","modified":1625562070887},{"_id":"public/2019/11/09/pycharm/9.png","hash":"48de80b2a963cd98d446958b6f5d3321504a29a2","modified":1625562070888},{"_id":"public/2019/11/09/pycharm/8.png","hash":"320551f0fd1c37117150b296373239ece1c9c3f2","modified":1625562070888},{"_id":"public/2019/12/08/opencv/11.png","hash":"aa4bf8f55a92701677ac2cccce826b8e6ed84095","modified":1625562070888},{"_id":"public/2019/12/08/opencv/10.png","hash":"d58a1f3b57e4b47b8a97ac9fb20e87f63eb6300d","modified":1625562070888},{"_id":"public/2019/12/08/opencv/12.png","hash":"b8205115491b3d1cf5e02021a88cb34e2a27370e","modified":1625562070888},{"_id":"public/2019/12/08/opencv/13.png","hash":"c337a7122691956e8ce0fc771ecd3abf11e87590","modified":1625562070888},{"_id":"public/2019/12/08/opencv/16.png","hash":"4ac967bd6e844893e5b5a862b08dd14766d7d359","modified":1625562070888},{"_id":"public/2019/12/08/opencv/18.png","hash":"40e9819dd1e68972a7190e7d0a23177c68db7ae1","modified":1625562070889},{"_id":"public/2019/12/08/opencv/17.png","hash":"cfc1a97017ca8e0e73696aa0f38bbffebe9caa8f","modified":1625562070889},{"_id":"public/2019/12/08/opencv/20.png","hash":"e873ce75fe58520eee73dbf69bab7a676d35aa8a","modified":1625562070889},{"_id":"public/2019/12/08/opencv/19.png","hash":"cbe88a7a0ce76dfa3bcbbbac35b9275238630eb1","modified":1625562070889},{"_id":"public/2019/12/08/opencv/21.png","hash":"89e18c07a13fe1c3beaec02f7cd050a177517474","modified":1625562070889},{"_id":"public/2019/12/08/opencv/23.png","hash":"0d1295f9187e6dcb161f6eaa1a4694d2d86a10bb","modified":1625562070889},{"_id":"public/2019/12/08/opencv/26.png","hash":"97d111fb903486e58d455ca580bd09a54a7d366b","modified":1625562070889},{"_id":"public/2019/12/08/opencv/27.png","hash":"05695a549ae73cdac18dcbf8cf9c596c92b7cca0","modified":1625562070889},{"_id":"public/2019/12/08/opencv/3.png","hash":"ed6b64d54deb8c9e1db9d0869eca540d96d54a92","modified":1625562070890},{"_id":"public/2019/12/08/opencv/24.png","hash":"5586160882c79c2e66888921e92e138b6a355693","modified":1625562070890},{"_id":"public/2019/12/08/opencv/4.png","hash":"574083d4f61989af09df672a8c84c02cebf3d607","modified":1625562070890},{"_id":"public/2019/12/08/opencv/31.png","hash":"352e85ae6112b17ec36dfd6b6943990116537c12","modified":1625562070890},{"_id":"public/2019/12/08/opencv/8.png","hash":"e3deeae1afe8f3b9010ccc52321b8e06d047e5a1","modified":1625562070890},{"_id":"public/2019/12/08/opencv/9.png","hash":"d3f69ca6fafbf6bb013239ee630736dc5d4edd41","modified":1625562070890},{"_id":"public/2019/12/08/opencv/Pyramid_2.png","hash":"e09eabd5af3eae7a74321e2ac45d792c228b5ac2","modified":1625562070890},{"_id":"public/2019/12/08/opencv/Pyramid_3.png","hash":"705f81bfc20f51f79905b656b4cd6efb8d9906cb","modified":1625562070891},{"_id":"public/2019/12/08/opencv/canny_5.png","hash":"ae81048fa96bcf19fa9c5949c848482b5d65addd","modified":1625562070891},{"_id":"public/2019/12/08/opencv/chain.png","hash":"74e57740acc79cca2a9c5f674ace73b8851909e3","modified":1625562070891},{"_id":"public/2019/12/08/opencv/l.png","hash":"b13a5d11bb3139c86e87b3845f35b64143a7cc7a","modified":1625562070891},{"_id":"public/2019/12/08/opencv/output_13_1.png","hash":"34e35d24a050c964e893bd29b81b0515406a5201","modified":1625562070891},{"_id":"public/2019/12/08/opencv/output_13_3.png","hash":"e5cc28a5ed2b9e23ad30a1e611ddfadbed2fce31","modified":1625562070891},{"_id":"public/2019/12/08/opencv/output_13_11.png","hash":"4b0d8ab4822ee7be5d844e34d7449c806e9abe7e","modified":1625562070891},{"_id":"public/2019/12/08/opencv/output_13_5.png","hash":"a87f492fb9bfeeeb7995617706140613aa0ab1e1","modified":1625562070894},{"_id":"public/2019/12/08/opencv/output_13_7.png","hash":"bf79465a8949626a4a9b89a079825caf573a12e8","modified":1625562070894},{"_id":"public/2019/12/08/opencv/output_13_9.png","hash":"e1bf2777b6f21dbf03aa2a0933c76ad638548bf6","modified":1625562070894},{"_id":"public/2019/12/08/opencv/sobel_1.png","hash":"a850b73e8e5a66b6e52d12d681e5b38aae259550","modified":1625562070895},{"_id":"public/2019/12/08/opencv/25.png","hash":"eeb842c65d23d7876ebfadd4b733029b5b491f4b","modified":1625562070896},{"_id":"public/css/prism-line-numbers.css","hash":"cdad9f52f4368d5912ab7faf6348a2c360e19208","modified":1625562070896},{"_id":"public/css/prism-tomorrow.css","hash":"733208631ad1ebf0ba27f7e6f02eb11414d4e284","modified":1625562070897},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1625562070961},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1625562070961},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1625562070968},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1625562070968},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1625562070973},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1625562070973},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1625562070973},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1625562070973},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1625562070974},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1625562070974},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1625562070974},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1625562070975},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1625562070975},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1625562070976},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1625562070976},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1625562070976},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1625562070976},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1625562070976},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1625562070976},{"_id":"public/css/matery.css","hash":"7a418c539884ff6432de099c85517a8b9f770d65","modified":1625562070977},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1625562070977},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1625562070977},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1625562070977},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1625562070977},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1625562070978},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1625562070978},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1625562070978},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1625562070978},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1625562070978},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1625562070978},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1625562070979},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1625562070979},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1625562070979},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1625562070979},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1625562070979},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1625562070980},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1625562070980},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1625562070980},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1625562070981},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1625562070981},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1625562070981},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1625562070981},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1625562070982},{"_id":"public/medias/featureimages/3.jpg","hash":"ab8a214659191597744de530ae5edc732a7eadd3","modified":1625562070982},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1625562070982},{"_id":"public/medias/featureimages/0.jpg","hash":"3aa60f2bb88b87e40840b572d84ffe71bdce01be","modified":1625562070982},{"_id":"public/medias/featureimages/23.jpg","hash":"ca1dd05a30e5ba57b8401ebe13bcb870c4f59ba7","modified":1625562070983},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1625562070983},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1625562070983},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1625562070984},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1625562070984},{"_id":"public/2019/12/01/java3/1_io.jpg","hash":"ccd65537aa477623bbc4d1b3b532a1edfab2107a","modified":1625562070984},{"_id":"public/2019/12/01/java3/2_copy.jpg","hash":"d482c93b0a60c01a28a1f7883fcbf030f88776fe","modified":1625562070985},{"_id":"public/2019/12/08/opencv/15.png","hash":"d124953fa62ae7d16a64249b3b09811dc7ca6809","modified":1625562070986},{"_id":"public/2019/12/08/opencv/2.png","hash":"0f28f122be551350916b72257d6a0c15781e72b4","modified":1625562070986},{"_id":"public/2019/12/08/opencv/22.png","hash":"5d924782e864a7c030b5bcaed02bc1829ad6ae10","modified":1625562070987},{"_id":"public/2019/12/08/opencv/30.png","hash":"b705a296b0240f19d913a824645c17ddaee081c4","modified":1625562070987},{"_id":"public/2019/12/08/opencv/32.png","hash":"254e89663a59538e13a48eb53370fbacef95f953","modified":1625562070987},{"_id":"public/2019/12/08/opencv/5.png","hash":"2d4c057bcda36ecf39a08ee4ccd550a490186344","modified":1625562070988},{"_id":"public/2019/12/08/opencv/6.png","hash":"12b45be86ad76785283b35a27d34f2d0cff9a6db","modified":1625562070988},{"_id":"public/2019/12/08/opencv/7.png","hash":"1ee54d0d1973581569cf6975d755e95bd6155b65","modified":1625562070988},{"_id":"public/2019/12/08/opencv/canny_1.png","hash":"00fe93ed472e33d2c6722fc66743f5db4c48a66a","modified":1625562070988},{"_id":"public/2019/12/08/opencv/canny_3.png","hash":"a5af9412e3d1efc9e6dcf570e6d0c97358b873f4","modified":1625562070988},{"_id":"public/2019/12/08/opencv/canny_2.png","hash":"634bdb86cf54ecbe016ca2a2fadcf44b5451429e","modified":1625562070989},{"_id":"public/2019/12/08/opencv/canny_4.png","hash":"a891d1e77ed0418fbaf6a4e4777dd0718d1e8235","modified":1625562070989},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1625562071051},{"_id":"public/medias/banner/4.jpg","hash":"a55f6c4e1a241940fcb113fed9f78ad3e2e37f21","modified":1625562071051},{"_id":"public/medias/banner/5.jpg","hash":"051c2dfbb6e1d4ca10ceefddcb0754d30aa296c0","modified":1625562071052},{"_id":"public/medias/featureimages/17.jpg","hash":"7985b7012093d3e4b31490a8ebf03d91590d93eb","modified":1625562071053},{"_id":"public/medias/featureimages/10.jpg","hash":"56c539ec6ae07ab3de6e0fed711e17ef692862e0","modified":1625562071057},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1625562071058},{"_id":"public/2019/12/08/opencv/28.png","hash":"7b22469f2bf1d88274e5da84181a6013c239a612","modified":1625562071058},{"_id":"public/2019/12/08/opencv/1.png","hash":"aa51ade046ef946bced8069f2dd107c9dec1e992","modified":1625562071059},{"_id":"public/2019/12/08/opencv/14.png","hash":"1f38d71e9da25b0a4cccdbe9a2c6552509c88c57","modified":1625562071059},{"_id":"public/medias/featureimages/24.jpg","hash":"14b21edd9902741e83181b8c09a1987e44c724bf","modified":1625562071159},{"_id":"public/medias/featureimages/12.jpg","hash":"75963565d4380370f6575ec4379d539bc4b6e423","modified":1625562071159},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1625562071163},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1625562071164},{"_id":"public/medias/featureimages/19.jpg","hash":"1ee2d4bc8b86142b4c25c52bc81aa039b1c0814c","modified":1625562071164},{"_id":"public/2019/12/08/opencv/Pyramid_1.png","hash":"4a70a319659ef712cb362b386dbe58921597cba6","modified":1625562071166},{"_id":"public/medias/banner/3.jpg","hash":"a70c016b42f5701366b76d178e69419f3853ccfb","modified":1625562071217},{"_id":"public/medias/banner/1.jpg","hash":"e78fac68289bb3fae4e8efda6af395318e22e8d8","modified":1625562071217},{"_id":"public/medias/featureimages/7.jpg","hash":"128ead609e53a725aab95ea95fb7e9b4b0a016b2","modified":1625562071240},{"_id":"public/medias/featureimages/15.jpg","hash":"e46d260fd6f98bfe447ae8774f7c01bca1b3f0fc","modified":1625562071240},{"_id":"public/2019/12/08/opencv/29.png","hash":"21e1ca57c71cc4ca7ea2422bdb0b971c6e25abad","modified":1625562071240},{"_id":"public/2019/12/08/opencv/hist_1.png","hash":"254607553cdd320bb916d39892dc1f5996d1bbaa","modified":1625562071241},{"_id":"public/medias/featureimages/14.jpg","hash":"a70c016b42f5701366b76d178e69419f3853ccfb","modified":1625562071267},{"_id":"public/medias/featureimages/9.jpg","hash":"bab7069772dc6cc03512f183f6e1bce329565001","modified":1625562071267},{"_id":"public/medias/featureimages/2.jpg","hash":"efc1f6f06057138456e9da7a99651faf43d6c4af","modified":1625562071328},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1625562071328},{"_id":"public/medias/featureimages/1.jpg","hash":"ce4f794733288ab1a8f72ef7a4d3ba3da8acf73c","modified":1625562071396},{"_id":"public/2020/06/10/data-structure/二叉树.bmp","hash":"ffb01f6ce56dfb741a5b079d30518dd95a3a2af9","modified":1625562071419},{"_id":"public/2020/06/10/data-structure/队列图.bmp","hash":"8869d8b38864a02afebfcb3adb4c86ef2265ab16","modified":1625562071419},{"_id":"public/medias/featureimages/4.jpg","hash":"ba8c404728bb0161e14161f2cddcadd080d51cf2","modified":1625562071458},{"_id":"public/medias/banner/6.jpg","hash":"2664e8a25bc53bee9fa4e85baaecbed1d75bc934","modified":1625562071458},{"_id":"public/medias/banner/0.jpg","hash":"41b9c68926fc240f68f26c17b66d36a09aedda8a","modified":1625562071480},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1625562071480},{"_id":"public/2020/06/10/data-structure/删除结点.bmp","hash":"f59bcf19c3bed647e8609e441c1e3cfcf8f515fb","modified":1625562071481},{"_id":"public/2020/06/30/wt/4.png","hash":"4b09be001426d2c944cbde926f2e74cae09826fc","modified":1625562071482},{"_id":"public/2020/06/30/wt/1.png","hash":"3a42c570db87888a8af8c8f9883026d4d35c77f1","modified":1625562071499},{"_id":"public/2019/12/08/opencv/scharr.jpg","hash":"0f84fa08b6835694a933f143a709cd8e914cc2da","modified":1625562071628},{"_id":"public/2020/06/30/wt/6.jpg","hash":"052380879b0782ebc250d09f18ca2555ec8d1b1d","modified":1625562071655},{"_id":"public/medias/music/生きていたんだよな.mp3","hash":"6e2a736861d416eb981315134e4cb10de8af57f9","modified":1625562071743},{"_id":"public/medias/music/夜曲.mp3","hash":"deae9bf9f94818a81ef45853de62c685ea073862","modified":1625562071807},{"_id":"public/medias/music/深い森.mp3","hash":"7ec9813db26e363e86ffc0566d2514130cfee893","modified":1625562071812},{"_id":"public/medias/music/Weather.mp3","hash":"5003f41c392166c135a1f93b0159d0b4c6a3ed1f","modified":1625562071853},{"_id":"public/medias/music/yequ.mp3","hash":"c9b6405e5c6b07e3f04115bb9d32a3ec88f9a451","modified":1625562071881},{"_id":"public/medias/music/yiluxiangbei.mp3","hash":"19109e0e2d8a9dc1e118f54f05394096144210fd","modified":1625562071909}],"Category":[{"name":"环境搭建","_id":"ckqrtogs10003rouxnstwbnux"},{"name":"paper","_id":"ckqrtogsg0008roux7qlezbmq"},{"name":"Java","_id":"ckqrtogw6000wroux5y4eo2d5"},{"name":"MySQL","_id":"ckqrtogx9001groux34l9akn4"},{"name":"软件","_id":"ckqrtogxd001lroux5dxro2hv"},{"name":"图像","_id":"ckqrtogxl001qrouxt57fhqge"}],"Data":[{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}]},{"_id":"friends","data":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2020-02-05T10:48:49.489Z","path":"404.html","comments":1,"_id":"ckqrtofu90000rouxhuh2szy0","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2020-02-05T10:48:49.641Z","path":"archives/index.html","comments":1,"_id":"ckqrtogvz000troux8l55r784","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-02-05T10:48:49.646Z","path":"tags/index.html","comments":1,"_id":"ckqrtogw4000vrouxdfxu8m2u","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2020-02-05T10:48:49.643Z","path":"categories/index.html","comments":1,"_id":"ckqrtogwb000zrouxfrdi6aet","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n<!-- > \\*子汉，\\*玎乐，\\*华翔，\\*九，\\*嘉文，\\*旭，\\*兴 -->\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ArSw\n* **地址：**https://yangting.online\n* **简介：**JNU DeepLerning\n\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n<!-- > \\*子汉，\\*玎乐，\\*华翔，\\*九，\\*嘉文，\\*旭，\\*兴 -->\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ArSw\n* **地址：**https://yangting.online\n* **简介：**JNU DeepLerning\n\n","updated":"2020-02-05T10:48:49.645Z","path":"friends/index.html","comments":1,"_id":"ckqrtogwf0011rouxud15x208","content":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<!-- > \\*子汉，\\*玎乐，\\*华翔，\\*九，\\*嘉文，\\*旭，\\*兴 -->\n\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ArSw</li>\n<li><strong>地址：</strong><a href=\"https://yangting.online\" target=\"_blank\" rel=\"noopener\">https://yangting.online</a></li>\n<li><strong>简介：</strong>JNU DeepLerning</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<!-- > \\*子汉，\\*玎乐，\\*华翔，\\*九，\\*嘉文，\\*旭，\\*兴 -->\n\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ArSw</li>\n<li><strong>地址：</strong><a href=\"https://yangting.online\" target=\"_blank\" rel=\"noopener\">https://yangting.online</a></li>\n<li><strong>简介：</strong>JNU DeepLerning</li>\n</ul>\n"},{"title":"about","date":"2019-07-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n* <b>硕士 控制工程</b>\n江南大学\n2018/09 - 现在\n\n<!-- \n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛 -->\n\n# 联系方式\n* <b>电子邮箱</b>\nyangting0_o@163.com\n1322129085@qq.com\n* <b>地址</b>\n无锡市江南大学，邮编214000\n* <b>微信</b>\nyt1322129085\n* <b>QQ</b>\n1322129085","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-07-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n* <b>硕士 控制工程</b>\n江南大学\n2018/09 - 现在\n\n<!-- \n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛 -->\n\n# 联系方式\n* <b>电子邮箱</b>\nyangting0_o@163.com\n1322129085@qq.com\n* <b>地址</b>\n无锡市江南大学，邮编214000\n* <b>微信</b>\nyt1322129085\n* <b>QQ</b>\n1322129085","updated":"2020-02-05T10:48:49.640Z","path":"about/index.html","comments":1,"_id":"ckqrtogwl0015rouxv4o9j1bp","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 控制工程</b><br>江南大学<br>2018/09 - 现在</li>\n</ul>\n<!-- \n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛 -->\n\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:yangting0_o@163.com\" target=\"_blank\" rel=\"noopener\">yangting0_o@163.com</a><br><a href=\"mailto:1322129085@qq.com\" target=\"_blank\" rel=\"noopener\">1322129085@qq.com</a></li>\n<li><b>地址</b><br>无锡市江南大学，邮编214000</li>\n<li><b>微信</b><br>yt1322129085</li>\n<li><b>QQ</b><br>1322129085</li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 控制工程</b><br>江南大学<br>2018/09 - 现在</li>\n</ul>\n<!-- \n# 获得荣誉\n### 2017\n* <b>金牌</b>\nACM-ICPC全国邀请赛（陕西）\n* <b>特等奖学金</b>\n大三学年\n* <b>二等奖</b>\n蓝桥杯C++组（上海）\n* <b>团体一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n* <b>高校一等奖</b>\n中国高校计算机大赛-团体程序设计天梯赛\n\n### 2016\n* <b>银牌</b>\nACM-ICPC亚洲区域赛（青岛）\n* <b>铜牌</b>\nACM-CCPC总决赛（宁波）\n* <b>铜牌</b>\nACM-CCPC（杭州）\n* <b>一等奖学金</b>\n大二学年\n\n### 2015\n* <b>国家奖学金</b>\n大一学年\n* <b>铜牌</b>\nACM-ICPC亚洲区域赛（上海）\n* <b>铜牌</b>\nACM-ICPC上海大都会赛 -->\n\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:yangting0_o@163.com\" target=\"_blank\" rel=\"noopener\">yangting0_o@163.com</a><br><a href=\"mailto:1322129085@qq.com\" target=\"_blank\" rel=\"noopener\">1322129085@qq.com</a></li>\n<li><b>地址</b><br>无锡市江南大学，邮编214000</li>\n<li><b>微信</b><br>yt1322129085</li>\n<li><b>QQ</b><br>1322129085</li>\n</ul>\n"},{"title":"contact","date":"2019-09-24T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**1322129085**\n* 微信：**yt1322129085**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n<!-- * **头像：**你的头像地址 -->\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ArSw\n* **地址：**https://yangting.online\n* **简介：**JNU DeepLerning\n<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg -->","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-09-24 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**1322129085**\n* 微信：**yt1322129085**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n<!-- * **头像：**你的头像地址 -->\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**ArSw\n* **地址：**https://yangting.online\n* **简介：**JNU DeepLerning\n<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg -->","updated":"2020-02-05T10:48:49.644Z","path":"contact/index.html","comments":1,"_id":"ckqrtogwt0018rouxpq3sp6g6","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>1322129085</strong></li>\n<li>微信：<strong>yt1322129085</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介<!-- * **头像：**你的头像地址 -->\n\n</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ArSw</li>\n<li><strong>地址：</strong><a href=\"https://yangting.online\" target=\"_blank\" rel=\"noopener\">https://yangting.online</a></li>\n<li><strong>简介：</strong>JNU DeepLerning<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg --></li>\n</ul>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>1322129085</strong></li>\n<li>微信：<strong>yt1322129085</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介<!-- * **头像：**你的头像地址 -->\n\n</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>ArSw</li>\n<li><strong>地址：</strong><a href=\"https://yangting.online\" target=\"_blank\" rel=\"noopener\">https://yangting.online</a></li>\n<li><strong>简介：</strong>JNU DeepLerning<!-- * **头像：**https://godweiyang.com/medias/avatars/avatar.jpg --></li>\n</ul>\n"}],"Post":[{"title":"CDN加速","img":"/medias/featureimages/12.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-21T13:46:18.000Z","password":null,"summary":"配置Cloudflare，使用免费CDN加速网站的访问","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=538788&auto=1&height=66\"></iframe></div>\n\n>总结下使用免费CDN加速网站访问的过程👀。\n\n由于本博客部署在GitHub上，而GitHub服务器部署在海外。因此在国内访问本博客速度较慢，特别是网络拥挤时，延迟更高。为改善这一情况，决定使用CDN加速博客的访问。\n\n# 简介\n---\n## CDN\n>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n><p align=\"right\">——维基百科</p>\n\n简单来说，CDN 就是部署在世界各地的缓存服务器，它们会提前缓存网站上的资源，然后当用户想要访问相关资源时，直接从 CDN 服务器上取就可以了。这样不仅可以增加访问速度减少访问延迟，还可以减缓网站服务器上的压力。\n\n世界上的 CDN 服务提供商有很多，七牛云、阿里云、腾讯云等等都提供了 CDN 服务，它们有的收费有的部分免费。我今天选择的 CDN 服务来自于 Cloudflare。\n## Cloudflare\n\n[Cloudflare](https://dash.cloudflare.com/)是全球最大的 DNS 服务提供商之一，号称是全球最快的 DNS 1.1.1.1 就是它们搞的。除此之外他们还提供 CDN、SSL 证书、DDos 保护等服务，并且 Cloudflare 与百度有合作，在国内也部署有大量的节点，还能顺便解决百度爬无法抓取 `GitHub` 的问题。我今天要使用的就是免费版的 SSL 证书以及 CDN 服务。\n\n除了 `Cloudflare` 比较 NB 以外选择他的另一个更重要的原因是国内的 CDN 无一例外都要要求域名在公安局备过案。作为一个遵纪守法的好市民，我肯定是不怕什么公安局备案的，我主要是觉得太麻烦了。\n# 配置步骤\n---\n## 站点添加\n\n首先去[Cloudflare](https://dash.cloudflare.com/)注册账号。选择添加站点\n![](1.png)\n![](2.png)\n然后`CF`会要求将你的 DNS 服务器替换为它提供的，接着去域名商处设置一下。 DNS 更新完之后`CF`会发送邮件通知。接着就能配置CDN加速了。\n![](3.png)\n![](4.png)\n\n## CDN加速配置\n设置完 DNS 后，将代理状态设置为已代理就行。此时`CDN`加速就已经开启了\n![](5.png)\n","source":"_posts/CDN.md","raw":"---\ntitle: CDN加速\nimg: /medias/featureimages/12.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-21 21:46:18\npassword:\nsummary: 配置Cloudflare，使用免费CDN加速网站的访问\ntags:\n- 工具\n- 博客\ncategories:\n- 环境搭建\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=538788&auto=1&height=66\"></iframe></div>\n\n>总结下使用免费CDN加速网站访问的过程👀。\n\n由于本博客部署在GitHub上，而GitHub服务器部署在海外。因此在国内访问本博客速度较慢，特别是网络拥挤时，延迟更高。为改善这一情况，决定使用CDN加速博客的访问。\n\n# 简介\n---\n## CDN\n>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。\n><p align=\"right\">——维基百科</p>\n\n简单来说，CDN 就是部署在世界各地的缓存服务器，它们会提前缓存网站上的资源，然后当用户想要访问相关资源时，直接从 CDN 服务器上取就可以了。这样不仅可以增加访问速度减少访问延迟，还可以减缓网站服务器上的压力。\n\n世界上的 CDN 服务提供商有很多，七牛云、阿里云、腾讯云等等都提供了 CDN 服务，它们有的收费有的部分免费。我今天选择的 CDN 服务来自于 Cloudflare。\n## Cloudflare\n\n[Cloudflare](https://dash.cloudflare.com/)是全球最大的 DNS 服务提供商之一，号称是全球最快的 DNS 1.1.1.1 就是它们搞的。除此之外他们还提供 CDN、SSL 证书、DDos 保护等服务，并且 Cloudflare 与百度有合作，在国内也部署有大量的节点，还能顺便解决百度爬无法抓取 `GitHub` 的问题。我今天要使用的就是免费版的 SSL 证书以及 CDN 服务。\n\n除了 `Cloudflare` 比较 NB 以外选择他的另一个更重要的原因是国内的 CDN 无一例外都要要求域名在公安局备过案。作为一个遵纪守法的好市民，我肯定是不怕什么公安局备案的，我主要是觉得太麻烦了。\n# 配置步骤\n---\n## 站点添加\n\n首先去[Cloudflare](https://dash.cloudflare.com/)注册账号。选择添加站点\n![](1.png)\n![](2.png)\n然后`CF`会要求将你的 DNS 服务器替换为它提供的，接着去域名商处设置一下。 DNS 更新完之后`CF`会发送邮件通知。接着就能配置CDN加速了。\n![](3.png)\n![](4.png)\n\n## CDN加速配置\n设置完 DNS 后，将代理状态设置为已代理就行。此时`CDN`加速就已经开启了\n![](5.png)\n","slug":"CDN","published":1,"updated":"2021-07-06T08:56:00.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogrh0001rouxffowf3pc","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=538788&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>总结下使用免费CDN加速网站访问的过程👀。</p>\n</blockquote>\n<p>由于本博客部署在GitHub上，而GitHub服务器部署在海外。因此在国内访问本博客速度较慢，特别是网络拥挤时，延迟更高。为改善这一情况，决定使用CDN加速博客的访问。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><hr>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><blockquote>\n<p>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n<p align=\"right\">——维基百科</p>\n</blockquote>\n<p>简单来说，CDN 就是部署在世界各地的缓存服务器，它们会提前缓存网站上的资源，然后当用户想要访问相关资源时，直接从 CDN 服务器上取就可以了。这样不仅可以增加访问速度减少访问延迟，还可以减缓网站服务器上的压力。</p>\n<p>世界上的 CDN 服务提供商有很多，七牛云、阿里云、腾讯云等等都提供了 CDN 服务，它们有的收费有的部分免费。我今天选择的 CDN 服务来自于 Cloudflare。</p>\n<h2 id=\"Cloudflare\"><a href=\"#Cloudflare\" class=\"headerlink\" title=\"Cloudflare\"></a>Cloudflare</h2><p><a href=\"https://dash.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">Cloudflare</a>是全球最大的 DNS 服务提供商之一，号称是全球最快的 DNS 1.1.1.1 就是它们搞的。除此之外他们还提供 CDN、SSL 证书、DDos 保护等服务，并且 Cloudflare 与百度有合作，在国内也部署有大量的节点，还能顺便解决百度爬无法抓取 <code>GitHub</code> 的问题。我今天要使用的就是免费版的 SSL 证书以及 CDN 服务。</p>\n<p>除了 <code>Cloudflare</code> 比较 NB 以外选择他的另一个更重要的原因是国内的 CDN 无一例外都要要求域名在公安局备过案。作为一个遵纪守法的好市民，我肯定是不怕什么公安局备案的，我主要是觉得太麻烦了。</p>\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><hr>\n<h2 id=\"站点添加\"><a href=\"#站点添加\" class=\"headerlink\" title=\"站点添加\"></a>站点添加</h2><p>首先去<a href=\"https://dash.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">Cloudflare</a>注册账号。选择添加站点<br><img src=\"1.png\" alt><br><img src=\"2.png\" alt><br>然后<code>CF</code>会要求将你的 DNS 服务器替换为它提供的，接着去域名商处设置一下。 DNS 更新完之后<code>CF</code>会发送邮件通知。接着就能配置CDN加速了。<br><img src=\"3.png\" alt><br><img src=\"4.png\" alt></p>\n<h2 id=\"CDN加速配置\"><a href=\"#CDN加速配置\" class=\"headerlink\" title=\"CDN加速配置\"></a>CDN加速配置</h2><p>设置完 DNS 后，将代理状态设置为已代理就行。此时<code>CDN</code>加速就已经开启了<br><img src=\"5.png\" alt></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=538788&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>总结下使用免费CDN加速网站访问的过程👀。</p>\n</blockquote>\n<p>由于本博客部署在GitHub上，而GitHub服务器部署在海外。因此在国内访问本博客速度较慢，特别是网络拥挤时，延迟更高。为改善这一情况，决定使用CDN加速博客的访问。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><hr>\n<h2 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h2><blockquote>\n<p>内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、影片、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</p>\n<p align=\"right\">——维基百科</p>\n</blockquote>\n<p>简单来说，CDN 就是部署在世界各地的缓存服务器，它们会提前缓存网站上的资源，然后当用户想要访问相关资源时，直接从 CDN 服务器上取就可以了。这样不仅可以增加访问速度减少访问延迟，还可以减缓网站服务器上的压力。</p>\n<p>世界上的 CDN 服务提供商有很多，七牛云、阿里云、腾讯云等等都提供了 CDN 服务，它们有的收费有的部分免费。我今天选择的 CDN 服务来自于 Cloudflare。</p>\n<h2 id=\"Cloudflare\"><a href=\"#Cloudflare\" class=\"headerlink\" title=\"Cloudflare\"></a>Cloudflare</h2><p><a href=\"https://dash.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">Cloudflare</a>是全球最大的 DNS 服务提供商之一，号称是全球最快的 DNS 1.1.1.1 就是它们搞的。除此之外他们还提供 CDN、SSL 证书、DDos 保护等服务，并且 Cloudflare 与百度有合作，在国内也部署有大量的节点，还能顺便解决百度爬无法抓取 <code>GitHub</code> 的问题。我今天要使用的就是免费版的 SSL 证书以及 CDN 服务。</p>\n<p>除了 <code>Cloudflare</code> 比较 NB 以外选择他的另一个更重要的原因是国内的 CDN 无一例外都要要求域名在公安局备过案。作为一个遵纪守法的好市民，我肯定是不怕什么公安局备案的，我主要是觉得太麻烦了。</p>\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><hr>\n<h2 id=\"站点添加\"><a href=\"#站点添加\" class=\"headerlink\" title=\"站点添加\"></a>站点添加</h2><p>首先去<a href=\"https://dash.cloudflare.com/\" target=\"_blank\" rel=\"noopener\">Cloudflare</a>注册账号。选择添加站点<br><img src=\"1.png\" alt><br><img src=\"2.png\" alt><br>然后<code>CF</code>会要求将你的 DNS 服务器替换为它提供的，接着去域名商处设置一下。 DNS 更新完之后<code>CF</code>会发送邮件通知。接着就能配置CDN加速了。<br><img src=\"3.png\" alt><br><img src=\"4.png\" alt></p>\n<h2 id=\"CDN加速配置\"><a href=\"#CDN加速配置\" class=\"headerlink\" title=\"CDN加速配置\"></a>CDN加速配置</h2><p>设置完 DNS 后，将代理状态设置为已代理就行。此时<code>CDN</code>加速就已经开启了<br><img src=\"5.png\" alt></p>\n"},{"title":"Hexo-Github-Netlify博客搭建教程","img":"/medias/featureimages/0.jpg","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2019-09-25T00:27:14.000Z","password":null,"summary":"主要讲解本blog的搭建过程😁","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=538882&auto=1&height=66\"></iframe></div>\n\n>主要讲解本blog的搭建过程，如有不详之处，可以联系我，或者在下方评论，我都会解答哒😁。\n\n# 我的博客源代码地址\n---\n大家有需要的可以star&fork我的[博客代码](https://github.com/Plutoxxx/Blog)，修改一些配置就可以写文章了。\n\n# 快速搭建\n---\n如果你不想重新自定义主题的话，可以直接下载我已经修改过的主题，只要稍微修改一些地方就行：\n* 在根目录配置文件_config.yml和themes config.yml中修改个人信息。\n* 在/_config.yml中修改deploy下的repository。\n* 在/_config.yml中修改baidu_url_submit下的host。\n* 在themes/_config.yml中修改gitalk。\n\n**当然在个性化设置前环境要先配置好**\n\n平时常用的命令有：\n```java\nhexo n \"博客名称\"  => hexo new \"博客名称\"   #这两个都是创建新文章，前者是简写模式\nhexo p  => hexo publish   \nhexo g  => hexo generate  #生成静态网页\nhexo s  => hexo server    #启动服务预览\nhexo d  => hexo deploy    #部署\nhexo clean   #清除缓存，网页正常情况下可以忽略此条命令\nctrl + c     #关闭本地服务器\n```\n\n# 安装Node.js\n---\n首先下载稳定版本[Node.js](https://nodejs.org/en/)。\n\n安装选项默认就行，一路Next。\n\n最后安装好之后，按Win+R打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n**添加国内镜像源**\n\n如果没梯子可以使用阿里的国内镜像进行加速\n```js\nnpm config set registry https://registry.npm.taobao.org\n```\n# 安装Hexo\n---\n安装完Node.js后，打开终端，输入以下命令：\n```hexo\nnpm install -g hexo-cli\nhexo -v  #查看是否安装成功\n```\n在合适的位置新建文件夹，用来存放blog文件，比如我的博客文件在 F:\\Project\\GitHub\\Blog 目录下。\n\n在该目录下初始化网站，输入 `hexo init` 初始化文件夹，接着输入 `npm install` 安装必要组件。 \n\n到这里，本地网站已经配置结束，输入 `hexo g` 生成静态网页，然后输入 `hexo s` 打开本地服务器，\n\n最后在浏览器中打开: http://localhost:4000/ 就能看到初始化的blog啦。\n\n最后按 `ctrl+c` 就能关闭本地服务器了\n\n# 安装Git和创建GitHub仓储\n---\n**安装Git**\n\n先到[Git官网](https://git-scm.com/download/win)下载软件。\n\n安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入 `git --version` 验证是否安装成功。\n\n**创建GitHub仓储**\n\n到[GitHub](https://github.com)注册一个账号，相信小伙伴们都有吧。然后新建一个项目，如图所示：\n![](1.png)\n\n然后设置一下Repository的名字，如图所示，不要勾选下边的 `Initalize this repository with a README`如下图所示，点击完成就行。\n![](2.png)\n\n# 本地连接GitHub\n---\n右击打开 `Git Bash here` ，输入:ssh，如图所示，说明配置好了：\n![](3.png)\n\n接着输入 `ssh-keygen -t rsa` （(主要是生成你跟github联系的秘钥key)）连续三个回车，key就生成了。打开C盘用户下的.ssh文件，其中 `id_rsa` 代表私钥， `id_rsa.pub` 代表公钥。\n\n将id_rsa.pub下的内容复制出来，打开GitHub下的Settings\n![](4.png)\n\n选择 `SSH and GPG keys` 中的 `New SSH key`粘贴进去就行了\n![](5.png)\n\n测试连接 `ssh -T git@github.com`，弹出警告后，填写yes，然后回车，出现以下则表示成功\n![](6.png)\n\n在Blog目录下，右击打开Git，输入命令： `git init`，会出现一个 `.git` 文件夹\n\n在项目根目录下,将你的本地项目和新建的repository联系起来:\n```git\ngit remote add origin https://github.com/your-name/your-Repository.git\n```\n完成后到根目录下：\n```git\t\ngit add .                       # 添加文件到暂缓区\ngit commit -m 'First commit'    # 将刚刚添加到暂缓区的内容提交到本地仓库.git\ngit push --set-upstream origin master #上传到远程仓库(由于是第一次push,所以是这个命令)\n```\n到这里,我们已经将我们的项目推送到GitHub的master分支下面了.接下来我们要对hexo进行一些配置:\n\n打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n修改最后一行的配置：\n```config\ndeploy:\n type: git #部署方式\n repository: git@github.com:you-name/your-Repository.git #关联github仓库\n branch: run-page #部署分支\n```\n在这里,我们将在这个项目仓库下新建一个run-page分支,至于有什么用,我等一下解释,先跟着我操作起来.\n\n在当前根目录下将不需要同步的文件和目录写到 `.gitignore` :\n```name\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\nthemes/\n.deploy*/\n```\n\n配置好了之后,保存退出,我们重新执行一下:\n```hexo\n$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n```\n\n最后,我们将public目录同步到Github:\n```hexo\n$ hexo d #部署应用\n```\n\n在执行这个命令的时候,我们可能会出现如下错误：\n```error\n$ ERROR Deployer not found: git\n```\n那是因为我们缺少一个依赖,我们安装一下:\n```npm\nnpm install hexo-deployer-git --save\n```\n然后再次执行一下,执行完成我们到Github，神奇的的事发生了，我们的项目多了一个(run-page),这个分支就是我们后面要用来生成我们到静态页面的。\n\n# 部署到Netlify\n---\n我们先到[Netlify](https://www.netlify.com)官网注册一下账号,因为我们是将项目托管到GitHub的,所以我们选择GitHub登录：\n![](7.png)\n点击网站新建：\n![](8.png)\n\n选择GitHub来源：\n![](9.png)\n\n选择刚建的项目：\n![](10.png)\n\n进行下一步配置：\n![](11.png)\n\n等待一会，Netlify会帮我们生成网站：\n![](12.png)\n\n第一次新建的时候,它会随机生成一个Netlify的二级域名,我们可以进行自定义二级域名,点击(\"Change site name\")即可进行设置,像这样：\n![](14.png)\n![](15.png)\n\n点击Save,等待Netlify进行热部署即可.\n\n然后点击创建好的二级域名,成功访问✌️！！！\n\n以后我们写好博客之后,直接执行：\n```hexo\n$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可\n```\n我们的个人博客就会自动进行刷新,是不是超厉害！！\n\n# 思路\n---\n部署完成之后,可能有的同学会觉得很晕,我画了一个部署的流程图：\n![](13.png)\n这就是我们为什么要利用两个分支的原因,我们将我们的项目分支托管到 `master` ,然后将生成的 `public` 目录,托管到 `run-page` 分支,以后我们可以写完博客以后,就可以直接输入：\n```hexo\n$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可\n```\n\n进行我们博客的推送,一旦我们推送到run-page分支,Netlify监测到我们的仓库发生了变化,就会根据这个分支的变化进行实时拉取并部署。\n\n","source":"_posts/Blog.md","raw":"---\ntitle: Hexo-Github-Netlify博客搭建教程\nimg: /medias/featureimages/0.jpg\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2019-09-25 08:27:14\npassword:\nsummary: 主要讲解本blog的搭建过程😁\ntags:\n- Hexo \n- GitHub \n- Netlify \n- 博客\ncategories:\n- 环境搭建\n\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=538882&auto=1&height=66\"></iframe></div>\n\n>主要讲解本blog的搭建过程，如有不详之处，可以联系我，或者在下方评论，我都会解答哒😁。\n\n# 我的博客源代码地址\n---\n大家有需要的可以star&fork我的[博客代码](https://github.com/Plutoxxx/Blog)，修改一些配置就可以写文章了。\n\n# 快速搭建\n---\n如果你不想重新自定义主题的话，可以直接下载我已经修改过的主题，只要稍微修改一些地方就行：\n* 在根目录配置文件_config.yml和themes config.yml中修改个人信息。\n* 在/_config.yml中修改deploy下的repository。\n* 在/_config.yml中修改baidu_url_submit下的host。\n* 在themes/_config.yml中修改gitalk。\n\n**当然在个性化设置前环境要先配置好**\n\n平时常用的命令有：\n```java\nhexo n \"博客名称\"  => hexo new \"博客名称\"   #这两个都是创建新文章，前者是简写模式\nhexo p  => hexo publish   \nhexo g  => hexo generate  #生成静态网页\nhexo s  => hexo server    #启动服务预览\nhexo d  => hexo deploy    #部署\nhexo clean   #清除缓存，网页正常情况下可以忽略此条命令\nctrl + c     #关闭本地服务器\n```\n\n# 安装Node.js\n---\n首先下载稳定版本[Node.js](https://nodejs.org/en/)。\n\n安装选项默认就行，一路Next。\n\n最后安装好之后，按Win+R打开命令提示符，输入`node -v`和`npm -v`，如果出现版本号，那么就安装成功了。\n\n**添加国内镜像源**\n\n如果没梯子可以使用阿里的国内镜像进行加速\n```js\nnpm config set registry https://registry.npm.taobao.org\n```\n# 安装Hexo\n---\n安装完Node.js后，打开终端，输入以下命令：\n```hexo\nnpm install -g hexo-cli\nhexo -v  #查看是否安装成功\n```\n在合适的位置新建文件夹，用来存放blog文件，比如我的博客文件在 F:\\Project\\GitHub\\Blog 目录下。\n\n在该目录下初始化网站，输入 `hexo init` 初始化文件夹，接着输入 `npm install` 安装必要组件。 \n\n到这里，本地网站已经配置结束，输入 `hexo g` 生成静态网页，然后输入 `hexo s` 打开本地服务器，\n\n最后在浏览器中打开: http://localhost:4000/ 就能看到初始化的blog啦。\n\n最后按 `ctrl+c` 就能关闭本地服务器了\n\n# 安装Git和创建GitHub仓储\n---\n**安装Git**\n\n先到[Git官网](https://git-scm.com/download/win)下载软件。\n\n安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。\n\n安装完成后在命令提示符中输入 `git --version` 验证是否安装成功。\n\n**创建GitHub仓储**\n\n到[GitHub](https://github.com)注册一个账号，相信小伙伴们都有吧。然后新建一个项目，如图所示：\n![](1.png)\n\n然后设置一下Repository的名字，如图所示，不要勾选下边的 `Initalize this repository with a README`如下图所示，点击完成就行。\n![](2.png)\n\n# 本地连接GitHub\n---\n右击打开 `Git Bash here` ，输入:ssh，如图所示，说明配置好了：\n![](3.png)\n\n接着输入 `ssh-keygen -t rsa` （(主要是生成你跟github联系的秘钥key)）连续三个回车，key就生成了。打开C盘用户下的.ssh文件，其中 `id_rsa` 代表私钥， `id_rsa.pub` 代表公钥。\n\n将id_rsa.pub下的内容复制出来，打开GitHub下的Settings\n![](4.png)\n\n选择 `SSH and GPG keys` 中的 `New SSH key`粘贴进去就行了\n![](5.png)\n\n测试连接 `ssh -T git@github.com`，弹出警告后，填写yes，然后回车，出现以下则表示成功\n![](6.png)\n\n在Blog目录下，右击打开Git，输入命令： `git init`，会出现一个 `.git` 文件夹\n\n在项目根目录下,将你的本地项目和新建的repository联系起来:\n```git\ngit remote add origin https://github.com/your-name/your-Repository.git\n```\n完成后到根目录下：\n```git\t\ngit add .                       # 添加文件到暂缓区\ngit commit -m 'First commit'    # 将刚刚添加到暂缓区的内容提交到本地仓库.git\ngit push --set-upstream origin master #上传到远程仓库(由于是第一次push,所以是这个命令)\n```\n到这里,我们已经将我们的项目推送到GitHub的master分支下面了.接下来我们要对hexo进行一些配置:\n\n打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。\n修改最后一行的配置：\n```config\ndeploy:\n type: git #部署方式\n repository: git@github.com:you-name/your-Repository.git #关联github仓库\n branch: run-page #部署分支\n```\n在这里,我们将在这个项目仓库下新建一个run-page分支,至于有什么用,我等一下解释,先跟着我操作起来.\n\n在当前根目录下将不需要同步的文件和目录写到 `.gitignore` :\n```name\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\nthemes/\n.deploy*/\n```\n\n配置好了之后,保存退出,我们重新执行一下:\n```hexo\n$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n```\n\n最后,我们将public目录同步到Github:\n```hexo\n$ hexo d #部署应用\n```\n\n在执行这个命令的时候,我们可能会出现如下错误：\n```error\n$ ERROR Deployer not found: git\n```\n那是因为我们缺少一个依赖,我们安装一下:\n```npm\nnpm install hexo-deployer-git --save\n```\n然后再次执行一下,执行完成我们到Github，神奇的的事发生了，我们的项目多了一个(run-page),这个分支就是我们后面要用来生成我们到静态页面的。\n\n# 部署到Netlify\n---\n我们先到[Netlify](https://www.netlify.com)官网注册一下账号,因为我们是将项目托管到GitHub的,所以我们选择GitHub登录：\n![](7.png)\n点击网站新建：\n![](8.png)\n\n选择GitHub来源：\n![](9.png)\n\n选择刚建的项目：\n![](10.png)\n\n进行下一步配置：\n![](11.png)\n\n等待一会，Netlify会帮我们生成网站：\n![](12.png)\n\n第一次新建的时候,它会随机生成一个Netlify的二级域名,我们可以进行自定义二级域名,点击(\"Change site name\")即可进行设置,像这样：\n![](14.png)\n![](15.png)\n\n点击Save,等待Netlify进行热部署即可.\n\n然后点击创建好的二级域名,成功访问✌️！！！\n\n以后我们写好博客之后,直接执行：\n```hexo\n$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可\n```\n我们的个人博客就会自动进行刷新,是不是超厉害！！\n\n# 思路\n---\n部署完成之后,可能有的同学会觉得很晕,我画了一个部署的流程图：\n![](13.png)\n这就是我们为什么要利用两个分支的原因,我们将我们的项目分支托管到 `master` ,然后将生成的 `public` 目录,托管到 `run-page` 分支,以后我们可以写完博客以后,就可以直接输入：\n```hexo\n$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可\n```\n\n进行我们博客的推送,一旦我们推送到run-page分支,Netlify监测到我们的仓库发生了变化,就会根据这个分支的变化进行实时拉取并部署。\n\n","slug":"Blog","published":1,"updated":"2020-10-16T11:25:51.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogrq0002rouxx72smesk","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=538882&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解本blog的搭建过程，如有不详之处，可以联系我，或者在下方评论，我都会解答哒😁。</p>\n</blockquote>\n<h1 id=\"我的博客源代码地址\"><a href=\"#我的博客源代码地址\" class=\"headerlink\" title=\"我的博客源代码地址\"></a>我的博客源代码地址</h1><hr>\n<p>大家有需要的可以star&amp;fork我的<a href=\"https://github.com/Plutoxxx/Blog\" target=\"_blank\" rel=\"noopener\">博客代码</a>，修改一些配置就可以写文章了。</p>\n<h1 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h1><hr>\n<p>如果你不想重新自定义主题的话，可以直接下载我已经修改过的主题，只要稍微修改一些地方就行：</p>\n<ul>\n<li>在根目录配置文件_config.yml和themes config.yml中修改个人信息。</li>\n<li>在/_config.yml中修改deploy下的repository。</li>\n<li>在/_config.yml中修改baidu_url_submit下的host。</li>\n<li>在themes/_config.yml中修改gitalk。</li>\n</ul>\n<p><strong>当然在个性化设置前环境要先配置好</strong></p>\n<p>平时常用的命令有：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">hexo n <span class=\"token string\">\"博客名称\"</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> hexo <span class=\"token keyword\">new</span> <span class=\"token string\">\"博客名称\"</span>   #这两个都是创建新文章，前者是简写模式\nhexo p  <span class=\"token operator\">=</span><span class=\"token operator\">></span> hexo publish   \nhexo g  <span class=\"token operator\">=</span><span class=\"token operator\">></span> hexo generate  #生成静态网页\nhexo s  <span class=\"token operator\">=</span><span class=\"token operator\">></span> hexo server    #启动服务预览\nhexo d  <span class=\"token operator\">=</span><span class=\"token operator\">></span> hexo deploy    #部署\nhexo clean   #清除缓存，网页正常情况下可以忽略此条命令\nctrl <span class=\"token operator\">+</span> c     #关闭本地服务器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><hr>\n<p>首先下载稳定版本<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>。</p>\n<p>安装选项默认就行，一路Next。</p>\n<p>最后安装好之后，按Win+R打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<p><strong>添加国内镜像源</strong></p>\n<p>如果没梯子可以使用阿里的国内镜像进行加速</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">npm config <span class=\"token keyword\">set</span> registry https<span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>registry<span class=\"token punctuation\">.</span>npm<span class=\"token punctuation\">.</span>taobao<span class=\"token punctuation\">.</span>org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><hr>\n<p>安装完Node.js后，打开终端，输入以下命令：</p>\n<pre class=\"line-numbers language-hexo\"><code class=\"language-hexo\">npm install -g hexo-cli\nhexo -v  #查看是否安装成功<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在合适的位置新建文件夹，用来存放blog文件，比如我的博客文件在 F:\\Project\\GitHub\\Blog 目录下。</p>\n<p>在该目录下初始化网站，输入 <code>hexo init</code> 初始化文件夹，接着输入 <code>npm install</code> 安装必要组件。 </p>\n<p>到这里，本地网站已经配置结束，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code> 打开本地服务器，</p>\n<p>最后在浏览器中打开: <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就能看到初始化的blog啦。</p>\n<p>最后按 <code>ctrl+c</code> 就能关闭本地服务器了</p>\n<h1 id=\"安装Git和创建GitHub仓储\"><a href=\"#安装Git和创建GitHub仓储\" class=\"headerlink\" title=\"安装Git和创建GitHub仓储\"></a>安装Git和创建GitHub仓储</h1><hr>\n<p><strong>安装Git</strong></p>\n<p>先到<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Git官网</a>下载软件。</p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入 <code>git --version</code> 验证是否安装成功。</p>\n<p><strong>创建GitHub仓储</strong></p>\n<p>到<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>注册一个账号，相信小伙伴们都有吧。然后新建一个项目，如图所示：<br><img src=\"1.png\" alt></p>\n<p>然后设置一下Repository的名字，如图所示，不要勾选下边的 <code>Initalize this repository with a README</code>如下图所示，点击完成就行。<br><img src=\"2.png\" alt></p>\n<h1 id=\"本地连接GitHub\"><a href=\"#本地连接GitHub\" class=\"headerlink\" title=\"本地连接GitHub\"></a>本地连接GitHub</h1><hr>\n<p>右击打开 <code>Git Bash here</code> ，输入:ssh，如图所示，说明配置好了：<br><img src=\"3.png\" alt></p>\n<p>接着输入 <code>ssh-keygen -t rsa</code> （(主要是生成你跟github联系的秘钥key)）连续三个回车，key就生成了。打开C盘用户下的.ssh文件，其中 <code>id_rsa</code> 代表私钥， <code>id_rsa.pub</code> 代表公钥。</p>\n<p>将id_rsa.pub下的内容复制出来，打开GitHub下的Settings<br><img src=\"4.png\" alt></p>\n<p>选择 <code>SSH and GPG keys</code> 中的 <code>New SSH key</code>粘贴进去就行了<br><img src=\"5.png\" alt></p>\n<p>测试连接 <code>ssh -T git@github.com</code>，弹出警告后，填写yes，然后回车，出现以下则表示成功<br><img src=\"6.png\" alt></p>\n<p>在Blog目录下，右击打开Git，输入命令： <code>git init</code>，会出现一个 <code>.git</code> 文件夹</p>\n<p>在项目根目录下,将你的本地项目和新建的repository联系起来:</p>\n<pre class=\"line-numbers language-git\"><code class=\"language-git\">git remote add origin https://github.com/your-name/your-Repository.git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>完成后到根目录下：</p>\n<pre class=\"line-numbers language-git\"><code class=\"language-git\">git add .                       # 添加文件到暂缓区\ngit commit -m <span class=\"token string\">'First commit'</span>    # 将刚刚添加到暂缓区的内容提交到本地仓库.git\ngit push --set-upstream origin master #上传到远程仓库(由于是第一次push,所以是这个命令)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>到这里,我们已经将我们的项目推送到GitHub的master分支下面了.接下来我们要对hexo进行一些配置:</p>\n<p>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。<br>修改最后一行的配置：</p>\n<pre class=\"line-numbers language-config\"><code class=\"language-config\">deploy:\n type: git #部署方式\n repository: git@github.com:you-name/your-Repository.git #关联github仓库\n branch: run-page #部署分支<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这里,我们将在这个项目仓库下新建一个run-page分支,至于有什么用,我等一下解释,先跟着我操作起来.</p>\n<p>在当前根目录下将不需要同步的文件和目录写到 <code>.gitignore</code> :</p>\n<pre class=\"line-numbers language-name\"><code class=\"language-name\">.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\nthemes/\n.deploy*/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配置好了之后,保存退出,我们重新执行一下:</p>\n<pre class=\"line-numbers language-hexo\"><code class=\"language-hexo\">$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>最后,我们将public目录同步到Github:</p>\n<pre class=\"line-numbers language-hexo\"><code class=\"language-hexo\">$ hexo d #部署应用<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在执行这个命令的时候,我们可能会出现如下错误：</p>\n<pre class=\"line-numbers language-error\"><code class=\"language-error\">$ ERROR Deployer not found: git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>那是因为我们缺少一个依赖,我们安装一下:</p>\n<pre class=\"line-numbers language-npm\"><code class=\"language-npm\">npm install hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>然后再次执行一下,执行完成我们到Github，神奇的的事发生了，我们的项目多了一个(run-page),这个分支就是我们后面要用来生成我们到静态页面的。</p>\n<h1 id=\"部署到Netlify\"><a href=\"#部署到Netlify\" class=\"headerlink\" title=\"部署到Netlify\"></a>部署到Netlify</h1><hr>\n<p>我们先到<a href=\"https://www.netlify.com\" target=\"_blank\" rel=\"noopener\">Netlify</a>官网注册一下账号,因为我们是将项目托管到GitHub的,所以我们选择GitHub登录：<br><img src=\"7.png\" alt><br>点击网站新建：<br><img src=\"8.png\" alt></p>\n<p>选择GitHub来源：<br><img src=\"9.png\" alt></p>\n<p>选择刚建的项目：<br><img src=\"10.png\" alt></p>\n<p>进行下一步配置：<br><img src=\"11.png\" alt></p>\n<p>等待一会，Netlify会帮我们生成网站：<br><img src=\"12.png\" alt></p>\n<p>第一次新建的时候,它会随机生成一个Netlify的二级域名,我们可以进行自定义二级域名,点击(“Change site name”)即可进行设置,像这样：<br><img src=\"14.png\" alt><br><img src=\"15.png\" alt></p>\n<p>点击Save,等待Netlify进行热部署即可.</p>\n<p>然后点击创建好的二级域名,成功访问✌️！！！</p>\n<p>以后我们写好博客之后,直接执行：</p>\n<pre class=\"line-numbers language-hexo\"><code class=\"language-hexo\">$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们的个人博客就会自动进行刷新,是不是超厉害！！</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><hr>\n<p>部署完成之后,可能有的同学会觉得很晕,我画了一个部署的流程图：<br><img src=\"13.png\" alt><br>这就是我们为什么要利用两个分支的原因,我们将我们的项目分支托管到 <code>master</code> ,然后将生成的 <code>public</code> 目录,托管到 <code>run-page</code> 分支,以后我们可以写完博客以后,就可以直接输入：</p>\n<pre class=\"line-numbers language-hexo\"><code class=\"language-hexo\">$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>进行我们博客的推送,一旦我们推送到run-page分支,Netlify监测到我们的仓库发生了变化,就会根据这个分支的变化进行实时拉取并部署。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=538882&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解本blog的搭建过程，如有不详之处，可以联系我，或者在下方评论，我都会解答哒😁。</p>\n</blockquote>\n<h1 id=\"我的博客源代码地址\"><a href=\"#我的博客源代码地址\" class=\"headerlink\" title=\"我的博客源代码地址\"></a>我的博客源代码地址</h1><hr>\n<p>大家有需要的可以star&amp;fork我的<a href=\"https://github.com/Plutoxxx/Blog\" target=\"_blank\" rel=\"noopener\">博客代码</a>，修改一些配置就可以写文章了。</p>\n<h1 id=\"快速搭建\"><a href=\"#快速搭建\" class=\"headerlink\" title=\"快速搭建\"></a>快速搭建</h1><hr>\n<p>如果你不想重新自定义主题的话，可以直接下载我已经修改过的主题，只要稍微修改一些地方就行：</p>\n<ul>\n<li>在根目录配置文件_config.yml和themes config.yml中修改个人信息。</li>\n<li>在/_config.yml中修改deploy下的repository。</li>\n<li>在/_config.yml中修改baidu_url_submit下的host。</li>\n<li>在themes/_config.yml中修改gitalk。</li>\n</ul>\n<p><strong>当然在个性化设置前环境要先配置好</strong></p>\n<p>平时常用的命令有：</p>\n<pre><code class=\"java\">hexo n &quot;博客名称&quot;  =&gt; hexo new &quot;博客名称&quot;   #这两个都是创建新文章，前者是简写模式\nhexo p  =&gt; hexo publish   \nhexo g  =&gt; hexo generate  #生成静态网页\nhexo s  =&gt; hexo server    #启动服务预览\nhexo d  =&gt; hexo deploy    #部署\nhexo clean   #清除缓存，网页正常情况下可以忽略此条命令\nctrl + c     #关闭本地服务器</code></pre>\n<h1 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h1><hr>\n<p>首先下载稳定版本<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>。</p>\n<p>安装选项默认就行，一路Next。</p>\n<p>最后安装好之后，按Win+R打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p>\n<p><strong>添加国内镜像源</strong></p>\n<p>如果没梯子可以使用阿里的国内镜像进行加速</p>\n<pre><code class=\"js\">npm config set registry https://registry.npm.taobao.org</code></pre>\n<h1 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h1><hr>\n<p>安装完Node.js后，打开终端，输入以下命令：</p>\n<pre><code class=\"hexo\">npm install -g hexo-cli\nhexo -v  #查看是否安装成功</code></pre>\n<p>在合适的位置新建文件夹，用来存放blog文件，比如我的博客文件在 F:\\Project\\GitHub\\Blog 目录下。</p>\n<p>在该目录下初始化网站，输入 <code>hexo init</code> 初始化文件夹，接着输入 <code>npm install</code> 安装必要组件。 </p>\n<p>到这里，本地网站已经配置结束，输入 <code>hexo g</code> 生成静态网页，然后输入 <code>hexo s</code> 打开本地服务器，</p>\n<p>最后在浏览器中打开: <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 就能看到初始化的blog啦。</p>\n<p>最后按 <code>ctrl+c</code> 就能关闭本地服务器了</p>\n<h1 id=\"安装Git和创建GitHub仓储\"><a href=\"#安装Git和创建GitHub仓储\" class=\"headerlink\" title=\"安装Git和创建GitHub仓储\"></a>安装Git和创建GitHub仓储</h1><hr>\n<p><strong>安装Git</strong></p>\n<p>先到<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Git官网</a>下载软件。</p>\n<p>安装选项还是全部默认，只不过最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。</p>\n<p>安装完成后在命令提示符中输入 <code>git --version</code> 验证是否安装成功。</p>\n<p><strong>创建GitHub仓储</strong></p>\n<p>到<a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a>注册一个账号，相信小伙伴们都有吧。然后新建一个项目，如图所示：<br><img src=\"1.png\" alt></p>\n<p>然后设置一下Repository的名字，如图所示，不要勾选下边的 <code>Initalize this repository with a README</code>如下图所示，点击完成就行。<br><img src=\"2.png\" alt></p>\n<h1 id=\"本地连接GitHub\"><a href=\"#本地连接GitHub\" class=\"headerlink\" title=\"本地连接GitHub\"></a>本地连接GitHub</h1><hr>\n<p>右击打开 <code>Git Bash here</code> ，输入:ssh，如图所示，说明配置好了：<br><img src=\"3.png\" alt></p>\n<p>接着输入 <code>ssh-keygen -t rsa</code> （(主要是生成你跟github联系的秘钥key)）连续三个回车，key就生成了。打开C盘用户下的.ssh文件，其中 <code>id_rsa</code> 代表私钥， <code>id_rsa.pub</code> 代表公钥。</p>\n<p>将id_rsa.pub下的内容复制出来，打开GitHub下的Settings<br><img src=\"4.png\" alt></p>\n<p>选择 <code>SSH and GPG keys</code> 中的 <code>New SSH key</code>粘贴进去就行了<br><img src=\"5.png\" alt></p>\n<p>测试连接 <code>ssh -T git@github.com</code>，弹出警告后，填写yes，然后回车，出现以下则表示成功<br><img src=\"6.png\" alt></p>\n<p>在Blog目录下，右击打开Git，输入命令： <code>git init</code>，会出现一个 <code>.git</code> 文件夹</p>\n<p>在项目根目录下,将你的本地项目和新建的repository联系起来:</p>\n<pre><code class=\"git\">git remote add origin https://github.com/your-name/your-Repository.git</code></pre>\n<p>完成后到根目录下：</p>\n<pre><code class=\"git\">git add .                       # 添加文件到暂缓区\ngit commit -m &#39;First commit&#39;    # 将刚刚添加到暂缓区的内容提交到本地仓库.git\ngit push --set-upstream origin master #上传到远程仓库(由于是第一次push,所以是这个命令)</code></pre>\n<p>到这里,我们已经将我们的项目推送到GitHub的master分支下面了.接下来我们要对hexo进行一些配置:</p>\n<p>打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。<br>修改最后一行的配置：</p>\n<pre><code class=\"config\">deploy:\n type: git #部署方式\n repository: git@github.com:you-name/your-Repository.git #关联github仓库\n branch: run-page #部署分支</code></pre>\n<p>在这里,我们将在这个项目仓库下新建一个run-page分支,至于有什么用,我等一下解释,先跟着我操作起来.</p>\n<p>在当前根目录下将不需要同步的文件和目录写到 <code>.gitignore</code> :</p>\n<pre><code class=\"name\">.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\nthemes/\n.deploy*/</code></pre>\n<p>配置好了之后,保存退出,我们重新执行一下:</p>\n<pre><code class=\"hexo\">$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件</code></pre>\n<p>最后,我们将public目录同步到Github:</p>\n<pre><code class=\"hexo\">$ hexo d #部署应用</code></pre>\n<p>在执行这个命令的时候,我们可能会出现如下错误：</p>\n<pre><code class=\"error\">$ ERROR Deployer not found: git</code></pre>\n<p>那是因为我们缺少一个依赖,我们安装一下:</p>\n<pre><code class=\"npm\">npm install hexo-deployer-git --save</code></pre>\n<p>然后再次执行一下,执行完成我们到Github，神奇的的事发生了，我们的项目多了一个(run-page),这个分支就是我们后面要用来生成我们到静态页面的。</p>\n<h1 id=\"部署到Netlify\"><a href=\"#部署到Netlify\" class=\"headerlink\" title=\"部署到Netlify\"></a>部署到Netlify</h1><hr>\n<p>我们先到<a href=\"https://www.netlify.com\" target=\"_blank\" rel=\"noopener\">Netlify</a>官网注册一下账号,因为我们是将项目托管到GitHub的,所以我们选择GitHub登录：<br><img src=\"7.png\" alt><br>点击网站新建：<br><img src=\"8.png\" alt></p>\n<p>选择GitHub来源：<br><img src=\"9.png\" alt></p>\n<p>选择刚建的项目：<br><img src=\"10.png\" alt></p>\n<p>进行下一步配置：<br><img src=\"11.png\" alt></p>\n<p>等待一会，Netlify会帮我们生成网站：<br><img src=\"12.png\" alt></p>\n<p>第一次新建的时候,它会随机生成一个Netlify的二级域名,我们可以进行自定义二级域名,点击(“Change site name”)即可进行设置,像这样：<br><img src=\"14.png\" alt><br><img src=\"15.png\" alt></p>\n<p>点击Save,等待Netlify进行热部署即可.</p>\n<p>然后点击创建好的二级域名,成功访问✌️！！！</p>\n<p>以后我们写好博客之后,直接执行：</p>\n<pre><code class=\"hexo\">$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可</code></pre>\n<p>我们的个人博客就会自动进行刷新,是不是超厉害！！</p>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><hr>\n<p>部署完成之后,可能有的同学会觉得很晕,我画了一个部署的流程图：<br><img src=\"13.png\" alt><br>这就是我们为什么要利用两个分支的原因,我们将我们的项目分支托管到 <code>master</code> ,然后将生成的 <code>public</code> 目录,托管到 <code>run-page</code> 分支,以后我们可以写完博客以后,就可以直接输入：</p>\n<pre><code class=\"hexo\">$ hexo clean #清理各种缓存和旧文件\n$ hexo g     #生成静态文件\n$ hexo s     #在本地查看生成网页（取消用ctrl+c）\n$ hexo d     #推送到GitHub\n# 写完blog不需要清除缓存，直接生成静态文件即可</code></pre>\n<p>进行我们博客的推送,一旦我们推送到run-page分支,Netlify监测到我们的仓库发生了变化,就会根据这个分支的变化进行实时拉取并部署。</p>\n"},{"title":"CVPR2019算法总结","img":"/medias/featureimages/1.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-28T00:22:19.000Z","password":null,"summary":"介绍一下目标检测主要的优化方向，以及CVPR2019中目标检测相关的论文。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=709658&auto=1&height=66\"></iframe></div>\n\n>介绍一下目标检测主要的优化方向，以及CVPR2019中目标检测相关的论文。\n\n# 介绍\n---\n目标检测是很多计算机视觉应用的基础，比如实例分割、人体关键点提取、人脸识别等，它结合了目标分类和定位两个任务。\n\n现代大多数目标检测器的框架是 (two-stage/single-stage)，目标检测被定义为一个多任务学习的过程，主要包括：\n\n* 区分前景物体与背景，并给它们分配恰当的类别标签。\n\n* 回归相应的位置参数，最大化检测框与**GT bounding box**的交并比(\\(IoU\\))或是其他指标。\n\n# 目标检测主要的优化方向\n---\n二维目标检测实现和优化方向包括backbone、IoU、损失函数、NMS、anchor、one shot learning/zero shot learning等。\n\\\n**基于目标检测的backbone和特征提取**\n目标检测的backbone一般是基于ImageNet预训练的图像分类网络。图像的分类只关注分类以及感受视野，不用关注目标的定位，目标检测同时还要关注图片的空间信息。如果下采样过多，会导致最后的Feature map很小，小目标很容易被忽略。现在很多基础网络，ResNet、MaskR-CNN、DenseNet、FPN、DetNet、RetinNet等能够提取图像的上下文信息，在特征提取上不断优化。\n\\\n**基于位置回归的优化算法**\n包括UnitBox、IoU-Net，能够预测检测到的边界框和它们对应的GT bounding box之间的IoU，使得该网络能像其分类模块一样，对检测框的定位精确程度有所掌握，神经网络在Backbone引入IoU-Net做边界修订。\n\\\n**基于优化损失函数的方法**\n主要有Smooth L1 loss、Smooth L2 loss、Focal loss等\n\\\n**基于优化NMS的方法**\n主要有Soft-NMS,Softer-NMS,以及Relation Netwrok，ConvNMS，NMS Network，Yes-Net等\n\\\n**基于Anchor生成的算法**\n有Sliding window、Region Proposal Network（RPN）、CornerNet、meta-anchor等。\n\\\n**One-shot learning以及Zero shot learning**\n都属于迁移学习领域主要研究的是网络少样本精准分类问题，单样本学习能力。\n\n# GIoU\n---\n[**论文下载**](http://openaccess.thecvf.com/content_CVPR_2019/papers/Rezatofighi_Generalized_Intersection_Over_Union_A_Metric_and_a_Loss_for_CVPR_2019_paper.pdf)\n\n## Motivation\n\n包围框回归是2D/3D视觉任务中的重要模块，不管是目标检测，目标跟踪，还是实例分割，都依赖于对bounding box进行回归，以获得准确的定位效果。\n\n其中IoU(\\(Intersection\\ over\\ Union\\))是使得包围框回归的重要参数。简单来讲就是模型产生的目标框(\\(Result\\))与 (GT) 的重叠率。可以理解为检测结果与GT的交集比上它们的并集，公式为：\n\n$$IoU=\\frac{Result\\bigcap GT}{Result\\bigcup GT}$$\n\nIoU是目标检测中一个重要的概念，在anchor-based的方法中，他的作用不仅用来确定正样本和负样本，还可以用来评价输出框(\\(predict\\ box\\))和(Ground\\ Truth)的距离，或者说(predict\\ box)的准确性。IoU有一个好的特性就是对尺度不敏感(\\(scale\\ invariant\\))。\n\n在regression任务中，判断predict box和gt的距离最直接的指标就是IoU，但所采用的loss却不适合，如图所示，在loss相同的情况下，regression的效果却大不相同，也就是说loss没有体现出regression的效果，而IoU却可以根据不同的情况得到不同的数值，能最直接反应回归效果。\n\n![](1.png)\n\n## Method\n\n本文提出用IoU这个直接指标来指导bounding box的回归。与其用一个代理的损失函数来监督学习，不如直接用指标本身来的好。此时损失函数为：\n$$L_{IoU}=1-IoU$$\n\n但是直接使用IoU作为损失函数会出现两个问题:\n* 如果两个框没有相交，根据定义，IoU=0，不能反映两者的距离大小（重合度）。同时因为loss=0，没有梯度回传，无法进行学习训练。\n* IoU无法精确的反映两者的重合度大小。如图所示，三种情况IoU都相等，但看得出来他们的重合度是不一样的，左边的图回归的效果最好，右边的最差。\n![](2.png)\n\n针对IoU的两个缺点，论文提出了一个新的指标**GIoU**(\\(Generalized\\ Intersection\\ over\\ Union\\))，如图所示：\n![](3.png)\n\nGIoU的定义很简单，就是先计算两个框的最小闭包区域面积，再计算IoU，再计算闭包区域中不属于两个框的区域占闭包区域的比重，最后用IoU减去这个比重得到GIoU。GIoU有如下4个特点：\n\n* 与IoU相似，GIoU也是一种距离度量，作为损失函数的话，满足损失函数的基本要求。$$L_{GIoU}=1-GIoU$$\n\n* GIoU对scale不敏感。\n\n* GIoU是IoU的下界，在两个框无线重合的情况下，IoU=GIoU。\n\n* IoU取值[0,1]，但GIoU有对称区间，取值范围[-1,1]。在两者重合的时候取最大值1，在两者无交集且无限远的时候取最小值-1，因此GIoU是一个非常好的距离度量指标。\n\n* 与IoU只关注重叠区域不同，GIoU不仅关注重叠区域，还关注其他的非重合区域，能更好的反映两者的重合度。\n\n其实GIoU不仅定义简单，在2D目标检测中计算方式也很简单，计算重合区域和IoU一样，计算最小闭包区域只需要得到两者max和min坐标，坐标围成的矩形就是最小闭包区域。\n\nGIoU和IoU作为loss的算法如下所示：\n![](4.png)\n\n步骤为：\n* 分别计算GT和Predict Box的面积\n* 计算Intersection的面积\n* 计算最小闭包区域面积\n* 计算IoU和GIoU\n* 根据公式得到loss\n\n## Experiments\n\nGIoU loss可以替换掉大多数目标检测算法中bounding box regression，本文选取了Faster R-CNN、Mask R-CNN和YOLO v3 三个方法验证GIoU loss的效果。实验在Pascal VOC和MS COCO数据集上进行。\n\n效果如下：\n\n![](5.png)\n![](6.png)\n![](7.png)\n\n可以看出YOLOv3在COCO上有明显涨点，但在其他模型下涨点并不明显，作者也指出了faster rcnn和mask rcnn效果不明显的原因是anchor很密，GIoU发挥作用的情况并不多。\n\n总体来说，文章的motivation比较好，指出用L1、L2作为regression损失函数的缺点，以及用直接指标IoU作为损失函数的缺陷性，提出新的metric来代替L1、L2损失函数，从而提升regression效果，想法简单粗暴，但work的场景有很大局限性。","source":"_posts/CVPR2019.md","raw":"---\ntitle: CVPR2019算法总结\nimg: /medias/featureimages/1.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-09-28 08:22:19\npassword:\nsummary: 介绍一下目标检测主要的优化方向，以及CVPR2019中目标检测相关的论文。\ntags:\n- DeepLearning\n- 目标检测\n- CVPR\ncategories:\n- paper\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=709658&auto=1&height=66\"></iframe></div>\n\n>介绍一下目标检测主要的优化方向，以及CVPR2019中目标检测相关的论文。\n\n# 介绍\n---\n目标检测是很多计算机视觉应用的基础，比如实例分割、人体关键点提取、人脸识别等，它结合了目标分类和定位两个任务。\n\n现代大多数目标检测器的框架是 (two-stage/single-stage)，目标检测被定义为一个多任务学习的过程，主要包括：\n\n* 区分前景物体与背景，并给它们分配恰当的类别标签。\n\n* 回归相应的位置参数，最大化检测框与**GT bounding box**的交并比(\\(IoU\\))或是其他指标。\n\n# 目标检测主要的优化方向\n---\n二维目标检测实现和优化方向包括backbone、IoU、损失函数、NMS、anchor、one shot learning/zero shot learning等。\n\\\n**基于目标检测的backbone和特征提取**\n目标检测的backbone一般是基于ImageNet预训练的图像分类网络。图像的分类只关注分类以及感受视野，不用关注目标的定位，目标检测同时还要关注图片的空间信息。如果下采样过多，会导致最后的Feature map很小，小目标很容易被忽略。现在很多基础网络，ResNet、MaskR-CNN、DenseNet、FPN、DetNet、RetinNet等能够提取图像的上下文信息，在特征提取上不断优化。\n\\\n**基于位置回归的优化算法**\n包括UnitBox、IoU-Net，能够预测检测到的边界框和它们对应的GT bounding box之间的IoU，使得该网络能像其分类模块一样，对检测框的定位精确程度有所掌握，神经网络在Backbone引入IoU-Net做边界修订。\n\\\n**基于优化损失函数的方法**\n主要有Smooth L1 loss、Smooth L2 loss、Focal loss等\n\\\n**基于优化NMS的方法**\n主要有Soft-NMS,Softer-NMS,以及Relation Netwrok，ConvNMS，NMS Network，Yes-Net等\n\\\n**基于Anchor生成的算法**\n有Sliding window、Region Proposal Network（RPN）、CornerNet、meta-anchor等。\n\\\n**One-shot learning以及Zero shot learning**\n都属于迁移学习领域主要研究的是网络少样本精准分类问题，单样本学习能力。\n\n# GIoU\n---\n[**论文下载**](http://openaccess.thecvf.com/content_CVPR_2019/papers/Rezatofighi_Generalized_Intersection_Over_Union_A_Metric_and_a_Loss_for_CVPR_2019_paper.pdf)\n\n## Motivation\n\n包围框回归是2D/3D视觉任务中的重要模块，不管是目标检测，目标跟踪，还是实例分割，都依赖于对bounding box进行回归，以获得准确的定位效果。\n\n其中IoU(\\(Intersection\\ over\\ Union\\))是使得包围框回归的重要参数。简单来讲就是模型产生的目标框(\\(Result\\))与 (GT) 的重叠率。可以理解为检测结果与GT的交集比上它们的并集，公式为：\n\n$$IoU=\\frac{Result\\bigcap GT}{Result\\bigcup GT}$$\n\nIoU是目标检测中一个重要的概念，在anchor-based的方法中，他的作用不仅用来确定正样本和负样本，还可以用来评价输出框(\\(predict\\ box\\))和(Ground\\ Truth)的距离，或者说(predict\\ box)的准确性。IoU有一个好的特性就是对尺度不敏感(\\(scale\\ invariant\\))。\n\n在regression任务中，判断predict box和gt的距离最直接的指标就是IoU，但所采用的loss却不适合，如图所示，在loss相同的情况下，regression的效果却大不相同，也就是说loss没有体现出regression的效果，而IoU却可以根据不同的情况得到不同的数值，能最直接反应回归效果。\n\n![](1.png)\n\n## Method\n\n本文提出用IoU这个直接指标来指导bounding box的回归。与其用一个代理的损失函数来监督学习，不如直接用指标本身来的好。此时损失函数为：\n$$L_{IoU}=1-IoU$$\n\n但是直接使用IoU作为损失函数会出现两个问题:\n* 如果两个框没有相交，根据定义，IoU=0，不能反映两者的距离大小（重合度）。同时因为loss=0，没有梯度回传，无法进行学习训练。\n* IoU无法精确的反映两者的重合度大小。如图所示，三种情况IoU都相等，但看得出来他们的重合度是不一样的，左边的图回归的效果最好，右边的最差。\n![](2.png)\n\n针对IoU的两个缺点，论文提出了一个新的指标**GIoU**(\\(Generalized\\ Intersection\\ over\\ Union\\))，如图所示：\n![](3.png)\n\nGIoU的定义很简单，就是先计算两个框的最小闭包区域面积，再计算IoU，再计算闭包区域中不属于两个框的区域占闭包区域的比重，最后用IoU减去这个比重得到GIoU。GIoU有如下4个特点：\n\n* 与IoU相似，GIoU也是一种距离度量，作为损失函数的话，满足损失函数的基本要求。$$L_{GIoU}=1-GIoU$$\n\n* GIoU对scale不敏感。\n\n* GIoU是IoU的下界，在两个框无线重合的情况下，IoU=GIoU。\n\n* IoU取值[0,1]，但GIoU有对称区间，取值范围[-1,1]。在两者重合的时候取最大值1，在两者无交集且无限远的时候取最小值-1，因此GIoU是一个非常好的距离度量指标。\n\n* 与IoU只关注重叠区域不同，GIoU不仅关注重叠区域，还关注其他的非重合区域，能更好的反映两者的重合度。\n\n其实GIoU不仅定义简单，在2D目标检测中计算方式也很简单，计算重合区域和IoU一样，计算最小闭包区域只需要得到两者max和min坐标，坐标围成的矩形就是最小闭包区域。\n\nGIoU和IoU作为loss的算法如下所示：\n![](4.png)\n\n步骤为：\n* 分别计算GT和Predict Box的面积\n* 计算Intersection的面积\n* 计算最小闭包区域面积\n* 计算IoU和GIoU\n* 根据公式得到loss\n\n## Experiments\n\nGIoU loss可以替换掉大多数目标检测算法中bounding box regression，本文选取了Faster R-CNN、Mask R-CNN和YOLO v3 三个方法验证GIoU loss的效果。实验在Pascal VOC和MS COCO数据集上进行。\n\n效果如下：\n\n![](5.png)\n![](6.png)\n![](7.png)\n\n可以看出YOLOv3在COCO上有明显涨点，但在其他模型下涨点并不明显，作者也指出了faster rcnn和mask rcnn效果不明显的原因是anchor很密，GIoU发挥作用的情况并不多。\n\n总体来说，文章的motivation比较好，指出用L1、L2作为regression损失函数的缺点，以及用直接指标IoU作为损失函数的缺陷性，提出新的metric来代替L1、L2损失函数，从而提升regression效果，想法简单粗暴，但work的场景有很大局限性。","slug":"CVPR2019","published":1,"updated":"2021-07-06T09:00:41.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogs70005rouxvvi4ckiv","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=709658&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>介绍一下目标检测主要的优化方向，以及CVPR2019中目标检测相关的论文。</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>目标检测是很多计算机视觉应用的基础，比如实例分割、人体关键点提取、人脸识别等，它结合了目标分类和定位两个任务。</p>\n<p>现代大多数目标检测器的框架是 (two-stage/single-stage)，目标检测被定义为一个多任务学习的过程，主要包括：</p>\n<ul>\n<li><p>区分前景物体与背景，并给它们分配恰当的类别标签。</p>\n</li>\n<li><p>回归相应的位置参数，最大化检测框与<strong>GT bounding box</strong>的交并比((IoU))或是其他指标。</p>\n</li>\n</ul>\n<h1 id=\"目标检测主要的优化方向\"><a href=\"#目标检测主要的优化方向\" class=\"headerlink\" title=\"目标检测主要的优化方向\"></a>目标检测主要的优化方向</h1><hr>\n<p>二维目标检测实现和优化方向包括backbone、IoU、损失函数、NMS、anchor、one shot learning/zero shot learning等。<br><br><strong>基于目标检测的backbone和特征提取</strong><br>目标检测的backbone一般是基于ImageNet预训练的图像分类网络。图像的分类只关注分类以及感受视野，不用关注目标的定位，目标检测同时还要关注图片的空间信息。如果下采样过多，会导致最后的Feature map很小，小目标很容易被忽略。现在很多基础网络，ResNet、MaskR-CNN、DenseNet、FPN、DetNet、RetinNet等能够提取图像的上下文信息，在特征提取上不断优化。<br><br><strong>基于位置回归的优化算法</strong><br>包括UnitBox、IoU-Net，能够预测检测到的边界框和它们对应的GT bounding box之间的IoU，使得该网络能像其分类模块一样，对检测框的定位精确程度有所掌握，神经网络在Backbone引入IoU-Net做边界修订。<br><br><strong>基于优化损失函数的方法</strong><br>主要有Smooth L1 loss、Smooth L2 loss、Focal loss等<br><br><strong>基于优化NMS的方法</strong><br>主要有Soft-NMS,Softer-NMS,以及Relation Netwrok，ConvNMS，NMS Network，Yes-Net等<br><br><strong>基于Anchor生成的算法</strong><br>有Sliding window、Region Proposal Network（RPN）、CornerNet、meta-anchor等。<br><br><strong>One-shot learning以及Zero shot learning</strong><br>都属于迁移学习领域主要研究的是网络少样本精准分类问题，单样本学习能力。</p>\n<h1 id=\"GIoU\"><a href=\"#GIoU\" class=\"headerlink\" title=\"GIoU\"></a>GIoU</h1><hr>\n<p><a href=\"http://openaccess.thecvf.com/content_CVPR_2019/papers/Rezatofighi_Generalized_Intersection_Over_Union_A_Metric_and_a_Loss_for_CVPR_2019_paper.pdf\" target=\"_blank\" rel=\"noopener\"><strong>论文下载</strong></a></p>\n<h2 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h2><p>包围框回归是2D/3D视觉任务中的重要模块，不管是目标检测，目标跟踪，还是实例分割，都依赖于对bounding box进行回归，以获得准确的定位效果。</p>\n<p>其中IoU((Intersection\\ over\\ Union))是使得包围框回归的重要参数。简单来讲就是模型产生的目标框((Result))与 (GT) 的重叠率。可以理解为检测结果与GT的交集比上它们的并集，公式为：</p>\n<p>$$IoU=\\frac{Result\\bigcap GT}{Result\\bigcup GT}$$</p>\n<p>IoU是目标检测中一个重要的概念，在anchor-based的方法中，他的作用不仅用来确定正样本和负样本，还可以用来评价输出框((predict\\ box))和(Ground\\ Truth)的距离，或者说(predict\\ box)的准确性。IoU有一个好的特性就是对尺度不敏感((scale\\ invariant))。</p>\n<p>在regression任务中，判断predict box和gt的距离最直接的指标就是IoU，但所采用的loss却不适合，如图所示，在loss相同的情况下，regression的效果却大不相同，也就是说loss没有体现出regression的效果，而IoU却可以根据不同的情况得到不同的数值，能最直接反应回归效果。</p>\n<p><img src=\"1.png\" alt></p>\n<h2 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h2><p>本文提出用IoU这个直接指标来指导bounding box的回归。与其用一个代理的损失函数来监督学习，不如直接用指标本身来的好。此时损失函数为：<br>$$L_{IoU}=1-IoU$$</p>\n<p>但是直接使用IoU作为损失函数会出现两个问题:</p>\n<ul>\n<li>如果两个框没有相交，根据定义，IoU=0，不能反映两者的距离大小（重合度）。同时因为loss=0，没有梯度回传，无法进行学习训练。</li>\n<li>IoU无法精确的反映两者的重合度大小。如图所示，三种情况IoU都相等，但看得出来他们的重合度是不一样的，左边的图回归的效果最好，右边的最差。<br><img src=\"2.png\" alt></li>\n</ul>\n<p>针对IoU的两个缺点，论文提出了一个新的指标<strong>GIoU</strong>((Generalized\\ Intersection\\ over\\ Union))，如图所示：<br><img src=\"3.png\" alt></p>\n<p>GIoU的定义很简单，就是先计算两个框的最小闭包区域面积，再计算IoU，再计算闭包区域中不属于两个框的区域占闭包区域的比重，最后用IoU减去这个比重得到GIoU。GIoU有如下4个特点：</p>\n<ul>\n<li><p>与IoU相似，GIoU也是一种距离度量，作为损失函数的话，满足损失函数的基本要求。$$L_{GIoU}=1-GIoU$$</p>\n</li>\n<li><p>GIoU对scale不敏感。</p>\n</li>\n<li><p>GIoU是IoU的下界，在两个框无线重合的情况下，IoU=GIoU。</p>\n</li>\n<li><p>IoU取值[0,1]，但GIoU有对称区间，取值范围[-1,1]。在两者重合的时候取最大值1，在两者无交集且无限远的时候取最小值-1，因此GIoU是一个非常好的距离度量指标。</p>\n</li>\n<li><p>与IoU只关注重叠区域不同，GIoU不仅关注重叠区域，还关注其他的非重合区域，能更好的反映两者的重合度。</p>\n</li>\n</ul>\n<p>其实GIoU不仅定义简单，在2D目标检测中计算方式也很简单，计算重合区域和IoU一样，计算最小闭包区域只需要得到两者max和min坐标，坐标围成的矩形就是最小闭包区域。</p>\n<p>GIoU和IoU作为loss的算法如下所示：<br><img src=\"4.png\" alt></p>\n<p>步骤为：</p>\n<ul>\n<li>分别计算GT和Predict Box的面积</li>\n<li>计算Intersection的面积</li>\n<li>计算最小闭包区域面积</li>\n<li>计算IoU和GIoU</li>\n<li>根据公式得到loss</li>\n</ul>\n<h2 id=\"Experiments\"><a href=\"#Experiments\" class=\"headerlink\" title=\"Experiments\"></a>Experiments</h2><p>GIoU loss可以替换掉大多数目标检测算法中bounding box regression，本文选取了Faster R-CNN、Mask R-CNN和YOLO v3 三个方法验证GIoU loss的效果。实验在Pascal VOC和MS COCO数据集上进行。</p>\n<p>效果如下：</p>\n<p><img src=\"5.png\" alt><br><img src=\"6.png\" alt><br><img src=\"7.png\" alt></p>\n<p>可以看出YOLOv3在COCO上有明显涨点，但在其他模型下涨点并不明显，作者也指出了faster rcnn和mask rcnn效果不明显的原因是anchor很密，GIoU发挥作用的情况并不多。</p>\n<p>总体来说，文章的motivation比较好，指出用L1、L2作为regression损失函数的缺点，以及用直接指标IoU作为损失函数的缺陷性，提出新的metric来代替L1、L2损失函数，从而提升regression效果，想法简单粗暴，但work的场景有很大局限性。</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=709658&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>介绍一下目标检测主要的优化方向，以及CVPR2019中目标检测相关的论文。</p>\n</blockquote>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><hr>\n<p>目标检测是很多计算机视觉应用的基础，比如实例分割、人体关键点提取、人脸识别等，它结合了目标分类和定位两个任务。</p>\n<p>现代大多数目标检测器的框架是 (two-stage/single-stage)，目标检测被定义为一个多任务学习的过程，主要包括：</p>\n<ul>\n<li><p>区分前景物体与背景，并给它们分配恰当的类别标签。</p>\n</li>\n<li><p>回归相应的位置参数，最大化检测框与<strong>GT bounding box</strong>的交并比((IoU))或是其他指标。</p>\n</li>\n</ul>\n<h1 id=\"目标检测主要的优化方向\"><a href=\"#目标检测主要的优化方向\" class=\"headerlink\" title=\"目标检测主要的优化方向\"></a>目标检测主要的优化方向</h1><hr>\n<p>二维目标检测实现和优化方向包括backbone、IoU、损失函数、NMS、anchor、one shot learning/zero shot learning等。<br><br><strong>基于目标检测的backbone和特征提取</strong><br>目标检测的backbone一般是基于ImageNet预训练的图像分类网络。图像的分类只关注分类以及感受视野，不用关注目标的定位，目标检测同时还要关注图片的空间信息。如果下采样过多，会导致最后的Feature map很小，小目标很容易被忽略。现在很多基础网络，ResNet、MaskR-CNN、DenseNet、FPN、DetNet、RetinNet等能够提取图像的上下文信息，在特征提取上不断优化。<br><br><strong>基于位置回归的优化算法</strong><br>包括UnitBox、IoU-Net，能够预测检测到的边界框和它们对应的GT bounding box之间的IoU，使得该网络能像其分类模块一样，对检测框的定位精确程度有所掌握，神经网络在Backbone引入IoU-Net做边界修订。<br><br><strong>基于优化损失函数的方法</strong><br>主要有Smooth L1 loss、Smooth L2 loss、Focal loss等<br><br><strong>基于优化NMS的方法</strong><br>主要有Soft-NMS,Softer-NMS,以及Relation Netwrok，ConvNMS，NMS Network，Yes-Net等<br><br><strong>基于Anchor生成的算法</strong><br>有Sliding window、Region Proposal Network（RPN）、CornerNet、meta-anchor等。<br><br><strong>One-shot learning以及Zero shot learning</strong><br>都属于迁移学习领域主要研究的是网络少样本精准分类问题，单样本学习能力。</p>\n<h1 id=\"GIoU\"><a href=\"#GIoU\" class=\"headerlink\" title=\"GIoU\"></a>GIoU</h1><hr>\n<p><a href=\"http://openaccess.thecvf.com/content_CVPR_2019/papers/Rezatofighi_Generalized_Intersection_Over_Union_A_Metric_and_a_Loss_for_CVPR_2019_paper.pdf\" target=\"_blank\" rel=\"noopener\"><strong>论文下载</strong></a></p>\n<h2 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h2><p>包围框回归是2D/3D视觉任务中的重要模块，不管是目标检测，目标跟踪，还是实例分割，都依赖于对bounding box进行回归，以获得准确的定位效果。</p>\n<p>其中IoU((Intersection\\ over\\ Union))是使得包围框回归的重要参数。简单来讲就是模型产生的目标框((Result))与 (GT) 的重叠率。可以理解为检测结果与GT的交集比上它们的并集，公式为：</p>\n<p>$$IoU=\\frac{Result\\bigcap GT}{Result\\bigcup GT}$$</p>\n<p>IoU是目标检测中一个重要的概念，在anchor-based的方法中，他的作用不仅用来确定正样本和负样本，还可以用来评价输出框((predict\\ box))和(Ground\\ Truth)的距离，或者说(predict\\ box)的准确性。IoU有一个好的特性就是对尺度不敏感((scale\\ invariant))。</p>\n<p>在regression任务中，判断predict box和gt的距离最直接的指标就是IoU，但所采用的loss却不适合，如图所示，在loss相同的情况下，regression的效果却大不相同，也就是说loss没有体现出regression的效果，而IoU却可以根据不同的情况得到不同的数值，能最直接反应回归效果。</p>\n<p><img src=\"1.png\" alt></p>\n<h2 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h2><p>本文提出用IoU这个直接指标来指导bounding box的回归。与其用一个代理的损失函数来监督学习，不如直接用指标本身来的好。此时损失函数为：<br>$$L_{IoU}=1-IoU$$</p>\n<p>但是直接使用IoU作为损失函数会出现两个问题:</p>\n<ul>\n<li>如果两个框没有相交，根据定义，IoU=0，不能反映两者的距离大小（重合度）。同时因为loss=0，没有梯度回传，无法进行学习训练。</li>\n<li>IoU无法精确的反映两者的重合度大小。如图所示，三种情况IoU都相等，但看得出来他们的重合度是不一样的，左边的图回归的效果最好，右边的最差。<br><img src=\"2.png\" alt></li>\n</ul>\n<p>针对IoU的两个缺点，论文提出了一个新的指标<strong>GIoU</strong>((Generalized\\ Intersection\\ over\\ Union))，如图所示：<br><img src=\"3.png\" alt></p>\n<p>GIoU的定义很简单，就是先计算两个框的最小闭包区域面积，再计算IoU，再计算闭包区域中不属于两个框的区域占闭包区域的比重，最后用IoU减去这个比重得到GIoU。GIoU有如下4个特点：</p>\n<ul>\n<li><p>与IoU相似，GIoU也是一种距离度量，作为损失函数的话，满足损失函数的基本要求。$$L_{GIoU}=1-GIoU$$</p>\n</li>\n<li><p>GIoU对scale不敏感。</p>\n</li>\n<li><p>GIoU是IoU的下界，在两个框无线重合的情况下，IoU=GIoU。</p>\n</li>\n<li><p>IoU取值[0,1]，但GIoU有对称区间，取值范围[-1,1]。在两者重合的时候取最大值1，在两者无交集且无限远的时候取最小值-1，因此GIoU是一个非常好的距离度量指标。</p>\n</li>\n<li><p>与IoU只关注重叠区域不同，GIoU不仅关注重叠区域，还关注其他的非重合区域，能更好的反映两者的重合度。</p>\n</li>\n</ul>\n<p>其实GIoU不仅定义简单，在2D目标检测中计算方式也很简单，计算重合区域和IoU一样，计算最小闭包区域只需要得到两者max和min坐标，坐标围成的矩形就是最小闭包区域。</p>\n<p>GIoU和IoU作为loss的算法如下所示：<br><img src=\"4.png\" alt></p>\n<p>步骤为：</p>\n<ul>\n<li>分别计算GT和Predict Box的面积</li>\n<li>计算Intersection的面积</li>\n<li>计算最小闭包区域面积</li>\n<li>计算IoU和GIoU</li>\n<li>根据公式得到loss</li>\n</ul>\n<h2 id=\"Experiments\"><a href=\"#Experiments\" class=\"headerlink\" title=\"Experiments\"></a>Experiments</h2><p>GIoU loss可以替换掉大多数目标检测算法中bounding box regression，本文选取了Faster R-CNN、Mask R-CNN和YOLO v3 三个方法验证GIoU loss的效果。实验在Pascal VOC和MS COCO数据集上进行。</p>\n<p>效果如下：</p>\n<p><img src=\"5.png\" alt><br><img src=\"6.png\" alt><br><img src=\"7.png\" alt></p>\n<p>可以看出YOLOv3在COCO上有明显涨点，但在其他模型下涨点并不明显，作者也指出了faster rcnn和mask rcnn效果不明显的原因是anchor很密，GIoU发挥作用的情况并不多。</p>\n<p>总体来说，文章的motivation比较好，指出用L1、L2作为regression损失函数的缺点，以及用直接指标IoU作为损失函数的缺陷性，提出新的metric来代替L1、L2损失函数，从而提升regression效果，想法简单粗暴，但work的场景有很大局限性。</p>\n"},{"title":"数据结构与算法","img":"/medias/featureimages/2.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-10T12:18:31.000Z","password":null,"summary":"总结一下数据结构、算法相关的知识。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26116370&auto=1&height=66\"></iframe></div>\n\n# 数据结构\n---\n数据存储的常用结构有：栈、队列、数组、链表和二叉树。我们分别来了解一下：\n\n## 栈\n\n* **栈**：**stack**,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。\n\n简单的说：采用该结构的集合，对元素的存取有如下的特点\n\n* 先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。\n\n* 栈的入口、出口的都是栈的顶端位置。\n![](堆栈.png)\n\n这里两个名词需要注意：\n\n* **压栈**：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。\n* **弹栈**：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。\n\n* 常用方法：\n - `public boolean empty()`：测试此堆栈是否为空。\n - `public E peek()`：查看此堆栈顶部的对象，而不从堆栈中删除它。\n - `public E pop()`：删除此堆栈顶部的对象，并将该对象作为此函数的值返回。\n - `public E push(E item)`：将项目推送到此堆栈的顶部。\n - `public int search(Object o) `：返回一个对象在此堆栈上的基于1的位置。\n\n### 相关题目\n\n1. 栈的压入、弹出序列\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n```java\nimport java.util.ArrayList;\nimport java.util.Stack;\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        Stack<Integer> temp = new Stack<>();\n        int i=0;\n        for(int num: pushA){\n            temp.push(num);//入栈\n            //模拟出栈\n            while(!temp.isEmpty() && temp.peek()==popA[i]){\n                i++;\n                temp.pop();\n            }\n        }\n        return temp.isEmpty();\n    }\n}\n```\n\n## 队列\n\n* **队列**：**queue**,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。\n\n简单的说，采用该结构的集合，对元素的存取有如下的特点：\n\n* 先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。\n* 队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。\n\n![](队列图.bmp)\n\n* 常用方法：\n - `public boolean add(E e)`：将指定的元素插入到此队列中。\n - `public E peek()`：检索但不删除此队列的头，如果此队列为空，则返回 null 。 \n - `public E pop()`：检索并删除此队列的头，如果此队列为空，则返回 null 。 \n - `public E remove() `：检索并删除此队列的头。 \n\n## 数组\n\n* **数组**:**Array**,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。\n\n简单的说,采用该结构的集合，对元素的存取有如下的特点：\n\n*  查找元素快：通过索引，可以快速访问指定位置的元素\n\n  ![](数组查询快.png)\n\n*  增删元素慢\n  * **指定索引位置增加元素**：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图：![](数组添加.png)\n  * **指定索引位置删除元素：**需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图：![](数组删除.png)\n\n## 链表\n\n* **链表**:**linked list**,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是**单向链表**。\n\n  ![](单链表结构特点.png)\n\n简单的说，采用该结构的集合，对元素的存取有如下的特点：\n\n* 多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。\n\n  ![](单链表结构.png)\n\n* 查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素\n\n* 增删元素快：\n\n  *  增加元素：只需要修改连接下个元素的地址即可。\n\n    ![](增加结点.png)\n\n  *  删除元素：只需要修改连接下个元素的地址即可。\n\n    ![](删除结点.bmp)\n\n* 常用方法：\n - `public boolean add(E e)`：将指定的元素追加到此列表的末尾。 \n - `public void add(int index, E element) `：将指定的元素追加到此列表的末尾。 \n - `public boolean contains(Object o)`：如果此列表包含指定的元素，则返回 true 。\n - `public E get(int index)`：返回此列表中指定位置的元素。 \n - `public E peek()`：检索但不删除此列表的头（第一个元素）。\n - `public E poll()`：检索并删除此列表的头（第一个元素）。\n - `public E push(E e)`：将元素推送到由此列表表示的堆栈上。\n - `public E pop()`：从此列表表示的堆栈中弹出一个元素。\n - `public E remove() `：检索并删除此列表的头（第一个元素）。\n - `public E removeLast() `：从此列表中删除并返回最后一个元素。\n - `public int size() `：返回此列表中的元素数。 \n\n### 相关题目\n\n1. 反转链表\n输入一个链表，反转链表后，输出新链表的表头。\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        if(head == null){\n            return null;\n        }\n        ListNode pre = null;\n        ListNode cur = head;\n        while (cur != null){\n            ListNode next = cur.next;\n            cur.next = pre;\n            //将链表的两个节点右移\n            pre = cur;\n            cur = next;\n        }\n        return pre;\n    }\n}\n```\n\n## 二叉树\n\n* **二叉树**：**binary tree** ,是每个结点不超过2的有序**树（tree）** 。\n\n简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。\n\n二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。\n\n如图：\n\n![](二叉树.bmp)\n\n### 相关题目\n\n1. 重建二叉树\n输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n```java\n/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    private static int index = 0;\n    private static TreeNode solve(int[] pre, int[] tempIn) {\n        int len1 = 0; /// 当前节点的左子树的节点的个数\n        int len2 = 0; /// 当前节点的右子树的节点的个数\n        for (int i = 0; i < tempIn.length; i++) {\n            if (pre[index] == tempIn[i]) {\n                break;\n            }\n            len1 ++; /// 左子树节点的个数++\n        }\n        len2 = tempIn.length - len1 - 1;\n\n        int index1 = 0;\n        int index2 = 0;\n        int[] temp1 = new int[len1]; /// 当前节点的左子树\n        int[] temp2 = new int[len2]; /// 当前节点的右子树\n        boolean flag = false; //设置判断标志false->当前中序的值为左子树中的值，true->当前中序的值为右子树中的值\n        for (int i = 0; i < tempIn.length; i++) {\n            if (pre[index] == tempIn[i]) {\n                flag = true;\n            } else if (!flag) {\n                temp1[index1++] = tempIn[i];//存放左子树的值\n            } else {\n                temp2[index2++] = tempIn[i];//存放右子树的值\n            }\n        }\n        TreeNode node = new TreeNode(pre[index]);//node为重建树后的节点\n        node.right = null;\n        node.left = null;\n        if (index < pre.length && temp1.length > 0) {\n            index++; /// 遍历前序序列的下标加1\n            node.left = solve(pre, temp1); /// 创建当前节点的左子树\n        }\n        if (index < pre.length && temp2.length > 0) {\n            index++; /// 遍历前序序列的下标加1\n            node.right = solve(pre, temp2); /// 创建当前节点的右子树\n        }\n        return node;\n    }\n    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n        index = 0;\n        return solve(pre, in);\n    }\n}\n```\n\n2. 打印二叉树\n从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n\n```java\nimport java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {\n        ArrayList<Integer> ans = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();//存放二叉树节点\n        if(root != null){\n            queue.add(root);\n        }\n        while(!queue.isEmpty()){\n            //取出队列中的节点\n            TreeNode node = queue.poll();\n            //保存树中的节点到ArrayList\n            ans.add(node.val);\n            //同层节点从左到右打印\n            if(node.left != null) queue.add(node.left);\n            if(node.right != null) queue.add(node.right);\n        }\n        return ans;\n    }\n}\n```\n\n# 算法","source":"_posts/Data-Structure.md","raw":"---\ntitle: 数据结构与算法\nimg: /medias/featureimages/2.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-10 20:18:31\npassword:\nsummary: 总结一下数据结构、算法相关的知识。\ntags:\n    - 数据结构与算法\ncategories:\n    - Java\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=26116370&auto=1&height=66\"></iframe></div>\n\n# 数据结构\n---\n数据存储的常用结构有：栈、队列、数组、链表和二叉树。我们分别来了解一下：\n\n## 栈\n\n* **栈**：**stack**,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。\n\n简单的说：采用该结构的集合，对元素的存取有如下的特点\n\n* 先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。\n\n* 栈的入口、出口的都是栈的顶端位置。\n![](堆栈.png)\n\n这里两个名词需要注意：\n\n* **压栈**：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。\n* **弹栈**：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。\n\n* 常用方法：\n - `public boolean empty()`：测试此堆栈是否为空。\n - `public E peek()`：查看此堆栈顶部的对象，而不从堆栈中删除它。\n - `public E pop()`：删除此堆栈顶部的对象，并将该对象作为此函数的值返回。\n - `public E push(E item)`：将项目推送到此堆栈的顶部。\n - `public int search(Object o) `：返回一个对象在此堆栈上的基于1的位置。\n\n### 相关题目\n\n1. 栈的压入、弹出序列\n输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）\n\n```java\nimport java.util.ArrayList;\nimport java.util.Stack;\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        Stack<Integer> temp = new Stack<>();\n        int i=0;\n        for(int num: pushA){\n            temp.push(num);//入栈\n            //模拟出栈\n            while(!temp.isEmpty() && temp.peek()==popA[i]){\n                i++;\n                temp.pop();\n            }\n        }\n        return temp.isEmpty();\n    }\n}\n```\n\n## 队列\n\n* **队列**：**queue**,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。\n\n简单的说，采用该结构的集合，对元素的存取有如下的特点：\n\n* 先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。\n* 队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。\n\n![](队列图.bmp)\n\n* 常用方法：\n - `public boolean add(E e)`：将指定的元素插入到此队列中。\n - `public E peek()`：检索但不删除此队列的头，如果此队列为空，则返回 null 。 \n - `public E pop()`：检索并删除此队列的头，如果此队列为空，则返回 null 。 \n - `public E remove() `：检索并删除此队列的头。 \n\n## 数组\n\n* **数组**:**Array**,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。\n\n简单的说,采用该结构的集合，对元素的存取有如下的特点：\n\n*  查找元素快：通过索引，可以快速访问指定位置的元素\n\n  ![](数组查询快.png)\n\n*  增删元素慢\n  * **指定索引位置增加元素**：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图：![](数组添加.png)\n  * **指定索引位置删除元素：**需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图：![](数组删除.png)\n\n## 链表\n\n* **链表**:**linked list**,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是**单向链表**。\n\n  ![](单链表结构特点.png)\n\n简单的说，采用该结构的集合，对元素的存取有如下的特点：\n\n* 多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。\n\n  ![](单链表结构.png)\n\n* 查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素\n\n* 增删元素快：\n\n  *  增加元素：只需要修改连接下个元素的地址即可。\n\n    ![](增加结点.png)\n\n  *  删除元素：只需要修改连接下个元素的地址即可。\n\n    ![](删除结点.bmp)\n\n* 常用方法：\n - `public boolean add(E e)`：将指定的元素追加到此列表的末尾。 \n - `public void add(int index, E element) `：将指定的元素追加到此列表的末尾。 \n - `public boolean contains(Object o)`：如果此列表包含指定的元素，则返回 true 。\n - `public E get(int index)`：返回此列表中指定位置的元素。 \n - `public E peek()`：检索但不删除此列表的头（第一个元素）。\n - `public E poll()`：检索并删除此列表的头（第一个元素）。\n - `public E push(E e)`：将元素推送到由此列表表示的堆栈上。\n - `public E pop()`：从此列表表示的堆栈中弹出一个元素。\n - `public E remove() `：检索并删除此列表的头（第一个元素）。\n - `public E removeLast() `：从此列表中删除并返回最后一个元素。\n - `public int size() `：返回此列表中的元素数。 \n\n### 相关题目\n\n1. 反转链表\n输入一个链表，反转链表后，输出新链表的表头。\n```java\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n        if(head == null){\n            return null;\n        }\n        ListNode pre = null;\n        ListNode cur = head;\n        while (cur != null){\n            ListNode next = cur.next;\n            cur.next = pre;\n            //将链表的两个节点右移\n            pre = cur;\n            cur = next;\n        }\n        return pre;\n    }\n}\n```\n\n## 二叉树\n\n* **二叉树**：**binary tree** ,是每个结点不超过2的有序**树（tree）** 。\n\n简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。\n\n二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。\n\n如图：\n\n![](二叉树.bmp)\n\n### 相关题目\n\n1. 重建二叉树\n输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。\n\n```java\n/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    private static int index = 0;\n    private static TreeNode solve(int[] pre, int[] tempIn) {\n        int len1 = 0; /// 当前节点的左子树的节点的个数\n        int len2 = 0; /// 当前节点的右子树的节点的个数\n        for (int i = 0; i < tempIn.length; i++) {\n            if (pre[index] == tempIn[i]) {\n                break;\n            }\n            len1 ++; /// 左子树节点的个数++\n        }\n        len2 = tempIn.length - len1 - 1;\n\n        int index1 = 0;\n        int index2 = 0;\n        int[] temp1 = new int[len1]; /// 当前节点的左子树\n        int[] temp2 = new int[len2]; /// 当前节点的右子树\n        boolean flag = false; //设置判断标志false->当前中序的值为左子树中的值，true->当前中序的值为右子树中的值\n        for (int i = 0; i < tempIn.length; i++) {\n            if (pre[index] == tempIn[i]) {\n                flag = true;\n            } else if (!flag) {\n                temp1[index1++] = tempIn[i];//存放左子树的值\n            } else {\n                temp2[index2++] = tempIn[i];//存放右子树的值\n            }\n        }\n        TreeNode node = new TreeNode(pre[index]);//node为重建树后的节点\n        node.right = null;\n        node.left = null;\n        if (index < pre.length && temp1.length > 0) {\n            index++; /// 遍历前序序列的下标加1\n            node.left = solve(pre, temp1); /// 创建当前节点的左子树\n        }\n        if (index < pre.length && temp2.length > 0) {\n            index++; /// 遍历前序序列的下标加1\n            node.right = solve(pre, temp2); /// 创建当前节点的右子树\n        }\n        return node;\n    }\n    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n        index = 0;\n        return solve(pre, in);\n    }\n}\n```\n\n2. 打印二叉树\n从上往下打印出二叉树的每个节点，同层节点从左至右打印。\n\n```java\nimport java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public ArrayList<Integer> PrintFromTopToBottom(TreeNode root) {\n        ArrayList<Integer> ans = new ArrayList<>();\n        Queue<TreeNode> queue = new LinkedList<>();//存放二叉树节点\n        if(root != null){\n            queue.add(root);\n        }\n        while(!queue.isEmpty()){\n            //取出队列中的节点\n            TreeNode node = queue.poll();\n            //保存树中的节点到ArrayList\n            ans.add(node.val);\n            //同层节点从左到右打印\n            if(node.left != null) queue.add(node.left);\n            if(node.right != null) queue.add(node.right);\n        }\n        return ans;\n    }\n}\n```\n\n# 算法","slug":"Data-Structure","published":1,"updated":"2020-10-16T11:25:51.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogvv000srouxl93pz0w1","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26116370&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><hr>\n<p>数据存储的常用结构有：栈、队列、数组、链表和二叉树。我们分别来了解一下：</p>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><ul>\n<li><strong>栈</strong>：<strong>stack</strong>,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li>\n</ul>\n<p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p>\n<ul>\n<li><p>先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p>\n</li>\n<li><p>栈的入口、出口的都是栈的顶端位置。<br><img src=\"%E5%A0%86%E6%A0%88.png\" alt></p>\n</li>\n</ul>\n<p>这里两个名词需要注意：</p>\n<ul>\n<li><p><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</p>\n</li>\n<li><p><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</p>\n</li>\n<li><p>常用方法：</p>\n<ul>\n<li><code>public boolean empty()</code>：测试此堆栈是否为空。</li>\n<li><code>public E peek()</code>：查看此堆栈顶部的对象，而不从堆栈中删除它。</li>\n<li><code>public E pop()</code>：删除此堆栈顶部的对象，并将该对象作为此函数的值返回。</li>\n<li><code>public E push(E item)</code>：将项目推送到此堆栈的顶部。</li>\n<li><code>public int search(Object o)</code>：返回一个对象在此堆栈上的基于1的位置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><ol>\n<li>栈的压入、弹出序列<br>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Stack<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">IsPopOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pushA<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> popA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Stack<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stack</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token operator\">:</span> pushA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            temp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//入栈</span>\n            <span class=\"token comment\" spellcheck=\"true\">//模拟出栈</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>temp<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>popA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                temp<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><ul>\n<li><strong>队列</strong>：<strong>queue</strong>,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li>\n</ul>\n<p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p>\n<ul>\n<li>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</li>\n<li>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。</li>\n</ul>\n<p><img src=\"%E9%98%9F%E5%88%97%E5%9B%BE.bmp\" alt></p>\n<ul>\n<li>常用方法：<ul>\n<li><code>public boolean add(E e)</code>：将指定的元素插入到此队列中。</li>\n<li><code>public E peek()</code>：检索但不删除此队列的头，如果此队列为空，则返回 null 。 </li>\n<li><code>public E pop()</code>：检索并删除此队列的头，如果此队列为空，则返回 null 。 </li>\n<li><code>public E remove()</code>：检索并删除此队列的头。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li><strong>数组</strong>:<strong>Array</strong>,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。</li>\n</ul>\n<p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p>\n<ul>\n<li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p>\n<p><img src=\"%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E5%BF%AB.png\" alt></p>\n</li>\n<li><p>增删元素慢</p>\n<ul>\n<li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图：<img src=\"%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0.png\" alt></li>\n<li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图：<img src=\"%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png\" alt></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><ul>\n<li><p><strong>链表</strong>:<strong>linked list</strong>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是<strong>单向链表</strong>。</p>\n<p><img src=\"%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png\" alt></p>\n</li>\n</ul>\n<p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p>\n<ul>\n<li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p>\n<p><img src=\"%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png\" alt></p>\n</li>\n<li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p>\n</li>\n<li><p>增删元素快：</p>\n<ul>\n<li><p>增加元素：只需要修改连接下个元素的地址即可。</p>\n<p><img src=\"%E5%A2%9E%E5%8A%A0%E7%BB%93%E7%82%B9.png\" alt></p>\n</li>\n<li><p>删除元素：只需要修改连接下个元素的地址即可。</p>\n<p><img src=\"%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9.bmp\" alt></p>\n</li>\n</ul>\n</li>\n<li><p>常用方法：</p>\n<ul>\n<li><code>public boolean add(E e)</code>：将指定的元素追加到此列表的末尾。 </li>\n<li><code>public void add(int index, E element)</code>：将指定的元素追加到此列表的末尾。 </li>\n<li><code>public boolean contains(Object o)</code>：如果此列表包含指定的元素，则返回 true 。</li>\n<li><code>public E get(int index)</code>：返回此列表中指定位置的元素。 </li>\n<li><code>public E peek()</code>：检索但不删除此列表的头（第一个元素）。</li>\n<li><code>public E poll()</code>：检索并删除此列表的头（第一个元素）。</li>\n<li><code>public E push(E e)</code>：将元素推送到由此列表表示的堆栈上。</li>\n<li><code>public E pop()</code>：从此列表表示的堆栈中弹出一个元素。</li>\n<li><code>public E remove()</code>：检索并删除此列表的头（第一个元素）。</li>\n<li><code>public E removeLast()</code>：从此列表中删除并返回最后一个元素。</li>\n<li><code>public int size()</code>：返回此列表中的元素数。 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关题目-1\"><a href=\"#相关题目-1\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><ol>\n<li><p>反转链表<br>输入一个链表，反转链表后，输出新链表的表头。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/*\npublic class ListNode {\n int val;\n ListNode next = null;\n\n ListNode(int val) {\n     this.val = val;\n }\n}*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> ListNode <span class=\"token function\">ReverseList</span><span class=\"token punctuation\">(</span>ListNode head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     ListNode pre <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n     ListNode cur <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         ListNode next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n         cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">//将链表的两个节点右移</span>\n         pre <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span>\n         cur <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><ul>\n<li><strong>二叉树</strong>：<strong>binary tree</strong> ,是每个结点不超过2的有序<strong>树（tree）</strong> 。</li>\n</ul>\n<p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。</p>\n<p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。</p>\n<p>如图：</p>\n<p><img src=\"%E4%BA%8C%E5%8F%89%E6%A0%91.bmp\" alt></p>\n<h3 id=\"相关题目-2\"><a href=\"#相关题目-2\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><ol>\n<li>重建二叉树<br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> TreeNode <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tempIn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 当前节点的左子树的节点的个数</span>\n        <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 当前节点的右子树的节点的个数</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tempIn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> tempIn<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            len1 <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 左子树节点的个数++</span>\n        <span class=\"token punctuation\">}</span>\n        len2 <span class=\"token operator\">=</span> tempIn<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> len1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> index1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>len1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 当前节点的左子树</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>len2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 当前节点的右子树</span>\n        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//设置判断标志false->当前中序的值为左子树中的值，true->当前中序的值为右子树中的值</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tempIn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> tempIn<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                temp1<span class=\"token punctuation\">[</span>index1<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempIn<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//存放左子树的值</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                temp2<span class=\"token punctuation\">[</span>index2<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tempIn<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//存放右子树的值</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        TreeNode node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//node为重建树后的节点</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> pre<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> temp1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 遍历前序序列的下标加1</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> temp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 创建当前节点的左子树</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> pre<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> temp2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 遍历前序序列的下标加1</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// 创建当前节点的右子树</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> TreeNode <span class=\"token function\">reConstructBinaryTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>打印二叉树<br>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>LinkedList<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> ArrayList<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> <span class=\"token function\">PrintFromTopToBottom</span><span class=\"token punctuation\">(</span>TreeNode root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ArrayList<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//存放二叉树节点</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//取出队列中的节点</span>\n            TreeNode node <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//保存树中的节点到ArrayList</span>\n            ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//同层节点从左到右打印</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1>","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=26116370&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><hr>\n<p>数据存储的常用结构有：栈、队列、数组、链表和二叉树。我们分别来了解一下：</p>\n<h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><ul>\n<li><strong>栈</strong>：<strong>stack</strong>,又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除操作，不允许在其他任何位置进行添加、查找、删除等操作。</li>\n</ul>\n<p>简单的说：采用该结构的集合，对元素的存取有如下的特点</p>\n<ul>\n<li><p>先进后出（即，存进去的元素，要在后它后面的元素依次取出后，才能取出该元素）。例如，子弹压进弹夹，先压进去的子弹在下面，后压进去的子弹在上面，当开枪时，先弹出上面的子弹，然后才能弹出下面的子弹。</p>\n</li>\n<li><p>栈的入口、出口的都是栈的顶端位置。<br><img src=\"%E5%A0%86%E6%A0%88.png\" alt></p>\n</li>\n</ul>\n<p>这里两个名词需要注意：</p>\n<ul>\n<li><p><strong>压栈</strong>：就是存元素。即，把元素存储到栈的顶端位置，栈中已有元素依次向栈底方向移动一个位置。</p>\n</li>\n<li><p><strong>弹栈</strong>：就是取元素。即，把栈的顶端位置元素取出，栈中已有元素依次向栈顶方向移动一个位置。</p>\n</li>\n<li><p>常用方法：</p>\n<ul>\n<li><code>public boolean empty()</code>：测试此堆栈是否为空。</li>\n<li><code>public E peek()</code>：查看此堆栈顶部的对象，而不从堆栈中删除它。</li>\n<li><code>public E pop()</code>：删除此堆栈顶部的对象，并将该对象作为此函数的值返回。</li>\n<li><code>public E push(E item)</code>：将项目推送到此堆栈的顶部。</li>\n<li><code>public int search(Object o)</code>：返回一个对象在此堆栈上的基于1的位置。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><ol>\n<li>栈的压入、弹出序列<br>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</li>\n</ol>\n<pre><code class=\"java\">import java.util.ArrayList;\nimport java.util.Stack;\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        Stack&lt;Integer&gt; temp = new Stack&lt;&gt;();\n        int i=0;\n        for(int num: pushA){\n            temp.push(num);//入栈\n            //模拟出栈\n            while(!temp.isEmpty() &amp;&amp; temp.peek()==popA[i]){\n                i++;\n                temp.pop();\n            }\n        }\n        return temp.isEmpty();\n    }\n}</code></pre>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><ul>\n<li><strong>队列</strong>：<strong>queue</strong>,简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li>\n</ul>\n<p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p>\n<ul>\n<li>先进先出（即，存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如，小火车过山洞，车头先进去，车尾后进去；车头先出来，车尾后出来。</li>\n<li>队列的入口、出口各占一侧。例如，下图中的左侧为入口，右侧为出口。</li>\n</ul>\n<p><img src=\"%E9%98%9F%E5%88%97%E5%9B%BE.bmp\" alt></p>\n<ul>\n<li>常用方法：<ul>\n<li><code>public boolean add(E e)</code>：将指定的元素插入到此队列中。</li>\n<li><code>public E peek()</code>：检索但不删除此队列的头，如果此队列为空，则返回 null 。 </li>\n<li><code>public E pop()</code>：检索并删除此队列的头，如果此队列为空，则返回 null 。 </li>\n<li><code>public E remove()</code>：检索并删除此队列的头。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li><strong>数组</strong>:<strong>Array</strong>,是有序的元素序列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号就可以快速找到租房子的人。</li>\n</ul>\n<p>简单的说,采用该结构的集合，对元素的存取有如下的特点：</p>\n<ul>\n<li><p>查找元素快：通过索引，可以快速访问指定位置的元素</p>\n<p><img src=\"%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2%E5%BF%AB.png\" alt></p>\n</li>\n<li><p>增删元素慢</p>\n<ul>\n<li><strong>指定索引位置增加元素</strong>：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。如下图：<img src=\"%E6%95%B0%E7%BB%84%E6%B7%BB%E5%8A%A0.png\" alt></li>\n<li><strong>指定索引位置删除元素：</strong>需要创建一个新数组，把原数组元素根据索引，复制到新数组对应索引的位置，原数组中指定索引位置元素不复制到新数组中。如下图：<img src=\"%E6%95%B0%E7%BB%84%E5%88%A0%E9%99%A4.png\" alt></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><ul>\n<li><p><strong>链表</strong>:<strong>linked list</strong>,由一系列结点node（链表中每一个元素称为结点）组成，结点可以在运行时i动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有单向链表与双向链表，那么这里给大家介绍的是<strong>单向链表</strong>。</p>\n<p><img src=\"%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9.png\" alt></p>\n</li>\n</ul>\n<p>简单的说，采用该结构的集合，对元素的存取有如下的特点：</p>\n<ul>\n<li><p>多个结点之间，通过地址进行连接。例如，多个人手拉手，每个人使用自己的右手拉住下个人的左手，依次类推，这样多个人就连在一起了。</p>\n<p><img src=\"%E5%8D%95%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png\" alt></p>\n</li>\n<li><p>查找元素慢：想查找某个元素，需要通过连接的节点，依次向后查找指定元素</p>\n</li>\n<li><p>增删元素快：</p>\n<ul>\n<li><p>增加元素：只需要修改连接下个元素的地址即可。</p>\n<p><img src=\"%E5%A2%9E%E5%8A%A0%E7%BB%93%E7%82%B9.png\" alt></p>\n</li>\n<li><p>删除元素：只需要修改连接下个元素的地址即可。</p>\n<p><img src=\"%E5%88%A0%E9%99%A4%E7%BB%93%E7%82%B9.bmp\" alt></p>\n</li>\n</ul>\n</li>\n<li><p>常用方法：</p>\n<ul>\n<li><code>public boolean add(E e)</code>：将指定的元素追加到此列表的末尾。 </li>\n<li><code>public void add(int index, E element)</code>：将指定的元素追加到此列表的末尾。 </li>\n<li><code>public boolean contains(Object o)</code>：如果此列表包含指定的元素，则返回 true 。</li>\n<li><code>public E get(int index)</code>：返回此列表中指定位置的元素。 </li>\n<li><code>public E peek()</code>：检索但不删除此列表的头（第一个元素）。</li>\n<li><code>public E poll()</code>：检索并删除此列表的头（第一个元素）。</li>\n<li><code>public E push(E e)</code>：将元素推送到由此列表表示的堆栈上。</li>\n<li><code>public E pop()</code>：从此列表表示的堆栈中弹出一个元素。</li>\n<li><code>public E remove()</code>：检索并删除此列表的头（第一个元素）。</li>\n<li><code>public E removeLast()</code>：从此列表中删除并返回最后一个元素。</li>\n<li><code>public int size()</code>：返回此列表中的元素数。 </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相关题目-1\"><a href=\"#相关题目-1\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><ol>\n<li><p>反转链表<br>输入一个链表，反转链表后，输出新链表的表头。</p>\n<pre><code class=\"java\">/*\npublic class ListNode {\n int val;\n ListNode next = null;\n\n ListNode(int val) {\n     this.val = val;\n }\n}*/\npublic class Solution {\n public ListNode ReverseList(ListNode head) {\n     if(head == null){\n         return null;\n     }\n     ListNode pre = null;\n     ListNode cur = head;\n     while (cur != null){\n         ListNode next = cur.next;\n         cur.next = pre;\n         //将链表的两个节点右移\n         pre = cur;\n         cur = next;\n     }\n     return pre;\n }\n}</code></pre>\n</li>\n</ol>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><ul>\n<li><strong>二叉树</strong>：<strong>binary tree</strong> ,是每个结点不超过2的有序<strong>树（tree）</strong> 。</li>\n</ul>\n<p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点上都最多只能有两个子结点。</p>\n<p>二叉树是每个节点最多有两个子树的树结构。顶上的叫根结点，两边被称作“左子树”和“右子树”。</p>\n<p>如图：</p>\n<p><img src=\"%E4%BA%8C%E5%8F%89%E6%A0%91.bmp\" alt></p>\n<h3 id=\"相关题目-2\"><a href=\"#相关题目-2\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h3><ol>\n<li>重建二叉树<br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</li>\n</ol>\n<pre><code class=\"java\">/**\n * Definition for binary tree\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    private static int index = 0;\n    private static TreeNode solve(int[] pre, int[] tempIn) {\n        int len1 = 0; /// 当前节点的左子树的节点的个数\n        int len2 = 0; /// 当前节点的右子树的节点的个数\n        for (int i = 0; i &lt; tempIn.length; i++) {\n            if (pre[index] == tempIn[i]) {\n                break;\n            }\n            len1 ++; /// 左子树节点的个数++\n        }\n        len2 = tempIn.length - len1 - 1;\n\n        int index1 = 0;\n        int index2 = 0;\n        int[] temp1 = new int[len1]; /// 当前节点的左子树\n        int[] temp2 = new int[len2]; /// 当前节点的右子树\n        boolean flag = false; //设置判断标志false-&gt;当前中序的值为左子树中的值，true-&gt;当前中序的值为右子树中的值\n        for (int i = 0; i &lt; tempIn.length; i++) {\n            if (pre[index] == tempIn[i]) {\n                flag = true;\n            } else if (!flag) {\n                temp1[index1++] = tempIn[i];//存放左子树的值\n            } else {\n                temp2[index2++] = tempIn[i];//存放右子树的值\n            }\n        }\n        TreeNode node = new TreeNode(pre[index]);//node为重建树后的节点\n        node.right = null;\n        node.left = null;\n        if (index &lt; pre.length &amp;&amp; temp1.length &gt; 0) {\n            index++; /// 遍历前序序列的下标加1\n            node.left = solve(pre, temp1); /// 创建当前节点的左子树\n        }\n        if (index &lt; pre.length &amp;&amp; temp2.length &gt; 0) {\n            index++; /// 遍历前序序列的下标加1\n            node.right = solve(pre, temp2); /// 创建当前节点的右子树\n        }\n        return node;\n    }\n    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {\n        index = 0;\n        return solve(pre, in);\n    }\n}</code></pre>\n<ol start=\"2\">\n<li>打印二叉树<br>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</li>\n</ol>\n<pre><code class=\"java\">import java.util.ArrayList;\nimport java.util.Queue;\nimport java.util.LinkedList;\n/**\npublic class TreeNode {\n    int val = 0;\n    TreeNode left = null;\n    TreeNode right = null;\n\n    public TreeNode(int val) {\n        this.val = val;\n\n    }\n\n}\n*/\npublic class Solution {\n    public ArrayList&lt;Integer&gt; PrintFromTopToBottom(TreeNode root) {\n        ArrayList&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();//存放二叉树节点\n        if(root != null){\n            queue.add(root);\n        }\n        while(!queue.isEmpty()){\n            //取出队列中的节点\n            TreeNode node = queue.poll();\n            //保存树中的节点到ArrayList\n            ans.add(node.val);\n            //同层节点从左到右打印\n            if(node.left != null) queue.add(node.left);\n            if(node.right != null) queue.add(node.right);\n        }\n        return ans;\n    }\n}</code></pre>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1>"},{"title":"Java基础①","img":"/medias/featureimages/3.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-27T09:30:46.000Z","password":null,"summary":"讲解Java面向对象的基本特性😆。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=22822489&auto=1&height=66\"></iframe></div>\n\n>主要讲解Java面向对象的基本特性，若有错误之处，望批评指正😆。\n\n# Java面向对象\n---\n## 对象和封装\n\n1. 当一个对象作为参数，传递到方法中时，实际上传递的是地址值。\n2. **局部变量、成员变量区别**\n\n* 定义的位置不一样(**重点**)\n局部：在方法的内部。\n成员：在方法的外部，直接写在类当中。\n\n* 作用范围不一样(**重点**)\n局部：只在方法当中才有用，出了方法就不能用了。\n成员：整个类都能使用。\n\n* 默认值不同(**重点**)\n局部：没有默认值，要想用，必须手动赋值。\n成员：如果没有赋值，会有默认值，规则和数组一样。\n\n* 内存的位置不一样(**了解**)\n局部：位于栈内存。\n成员：位于堆内存。\n\n* 生命周期不一样(**了解**)\n局部：随着方法进栈而诞生，随着方法的出栈而消失。\n成员：随着对象创建而诞生，随着对象被垃圾回收而消失。\n\n3. 封装就是将一些细节信息隐藏起来，对外界不可见。\n\n4. 构造方法是专门用来创建对象的方法，当我们利用关键字new来创建对象时，其实就是调用的构造方法。格式如下：\n```java\n//无参构造方法\npublic class_name(){\n\t方法体\n}\n//有参构造方法\npublic class_name(type name){\n\t方法体\n}\n```\n\n## 继承\n1. 在继承中，“子类就是一个父类”，就是说子类可以被当成一个父类看待。\n```java\n//父类格式：\npublic class Fu_class{\n\t...\n}\n//子类格式：\npublic class Zi_class extends Fu_class{\n\t...\n}\n```\n在子类中，访问变量的方式如下：\n```java\n局部变量：name\n本类成员变量：this.name\n父类成员变量：super.name\n```\n2. 重写(\\(override\\)):在继承关系中，方法名称一样，参数列表也**一样**。\n   重载(\\(overload\\)):方法名称一样，参数列表**不一样**。\n   \n3. 重写注意事项：\n* 必须保证父子类之间的名称相同，参数列表也相同,利用`@Override`来检测是不是有效的覆盖重写\n```java\n@Override\npublic void name(type parameter_name){\n\t方法体\n}\n```\n* 子类方法的返回值必须**小于等于**父类方法的返回值范围\n* 子类方法的权限必须**大于等于**父类方法的权限修饰符\n```java\npublic > protected > (default) > private\n//default指的是留空，不写\n```\n\n4. 继承关系中，父类构造方法的访问特点：\n子类必须调用父类构造方法，不写则赠送一个`super()`方法，写了则用指定的super调用，super只能有一个，还必须是第一个。\n\n5. 继承中super关键字的用法有3种：\n* 在子类的**成员方法**中，访问父类的**成员变量**。\n* 在子类的**成员方法**中，访问父类的**成员方法**。\n* 在子类的**构造方法**中，访问父类的**构造方法**。\n\n## 抽象\n\n1. 抽象方法：在权限修饰符后加上`abstract`关键字，去掉大括号，分号结束。\n```java\npublic abstract void method_name ();\n```\n2. 抽象类：在class前加上`abstract`即为抽象类。\n```java\npublic abstract class class_name{\n\t...\n}\n```\n\n3. 使用抽象类和抽象方法：\n* 不能直接`new`（创建）抽象类对象\n* 必须用一个子类来继承抽象父类\n* 子类必须覆盖重写（去掉`abstract`关键字，写方法体）抽象父类中的所有抽象方法\n* 创建子类对象进行使用\n\n## 接口（Interface）\n\n\n1. 接口使用步骤：\n* 建立一个`Interface`类，里边写抽象方法\n```java\npublic Interface Interface_name{\n\t...\n}\n\n* 接口不能直接使用，必须有一个“实现类”来“实现”该接口\n```java\npublic class imp_name implements Interface_name{\n\t...\n}\n```\n\n* 接口的实现类必须覆盖重写（实现）接口中**所有**的抽象类\n\n* 创建实现类的对象，进行使用\n\n2. 接口中定义\"成员变量\"，使用`public static final`进行修饰，格式：\n```java\n//其中public static final可以省略，但是不写，默认也是这样\npublic static final type var_name = value;\n```\n\n3. 类-接口：\n* 类与类之间是单继承，直接父类只有一个\n* 类与接口之间是多实现的，一个类可以实现多个接口\n* 接口与接口之间是多继承的\n* 多个父接口之间当中的抽象方法如果重复，没有关系\n* 多个父接口当中的默认方法（`defaule`关键字）如果重复，那么子接口必须进行默认方法的重写\n\n## 多态\n\n1. 其实就是一句话：父类引用指向子类对象，格式：\n```java\nFu_class obj = new Zi_class();\n//or\nInterface_name obj = new implements_name();\n```\n\n2. 多态下成员变量、成员方法使用口诀：\n* 成员变量：编译看左边，运行看左边\n* 成员方法：编译看左边，运行看右边\n\n3. 对象的转型\n* 对象的向上转型，其实就是多态写法，格式：\n```java\nFu_class obj = new Zi_class();\n```\n* 对象的向下转型，其实就是[**还原**]动作，格式：\n```java\nZi_class obj = (Zi_class) Fu_obj_name();\n```\n\n* `instance of`会得到一个`boolean`值结果，判断前边的对象能不能作为后边类型的实例\n```java\nobj instance of class_name;\n```\n\n## Final关键字\n\n1. final关键字来修饰一个类的时候，表示这个类不能有任何子类，格式：\n```java\npublic final class class_name{\n\t...\n}\n```\n\n2. final关键字来修饰一个方法时，这个方法是最终方法，不能覆盖重写，格式：\n```java\n修饰符 final 返回值类型 method_name(type parameter_name){\n\t方法体\n}\n```\n\n  >tips：对于类和方法来说，abstract和final关键字不能同时使用，相互矛盾。\n\n3. final修饰成员变量时，成员变量不再给默认值，要么直接赋值，要么通过构造方法赋值\n\n## 四种权限修饰符\n|      范围          |public | protected | (\\(default\\)) | private|\n|:------------------:|:-----:|:---------:|:-------------:|:------:|\n|同一个类（我自己）    |  √     |    √    |    √   |   √   |\n|同一个包（我领居）    |  √     |    √    |    √   |   ×   |\n|不同包子类（我儿子）  |  √     |    √    |    ×   |   ×   |\n|不同包非子类（陌生人）|  √     |    ×    |    ×   |   ×   |\n\n## 内部类\n\n1. 成员内部类定义格式：\n```java\npublic class out_class_name{\n\tpublic class in_class_name{\n\t\t...\n\t}\n}\n```\n\n  >tips：内部类用外部类，随意访问；外部类用内部类，需要内部对象。\n\n  新建成员内部类对象：\n\n  ```java\n  out_class_name.in_class_name obj =  new out_class_name().in_class_name();\n  ```\n\n2. 局部内部类：只有当前所属的方法才可以使用它，出了这个方法外边就不能用了，格式：\n```java\n修饰符 class out_class_name{\n\t修饰符 返回值类型 out_method_name(type parameter_name){\n\t\tclass in_class_name{\n\t\t\t...\n\t\t}\n\t}\n}\n```\n\n  >tips：局部内部类，如果想要访问所在方法的局部变量，那么这个局部变量必须是**有效的final**。这是由于生命周期所决定：\n  * 局部变量，跟着方法→位于栈内存→方法运行结束，立刻出栈，局部变量消失。\n  * new出来的对象→位于堆内存→对象一直位于堆内存，直到垃圾回收清理。\n\n3. 使用内部类时，权限修饰符规则：\n* 外部类：(public) / \\((default)\\)\n* 成员内部类：(public) / (protected) / \\((default)\\) / (private)\n* 局部内部类：什么都不写\n\n4. 匿名内部类：如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用**匿名内部类**，格式为：\n```java\nInterface_name obj = new Interface_name(){\n\t//覆盖重写全部抽象方法\n}\n```\n\n  >tips：\n  * 匿名内部类在**创建对象**的时候，只能使用**唯一一次**\n  * 匿名对象在**调用方法**的时候，只能调用**唯一一次**\n  * 匿名内部类省略了**实现类/子类名称**，但是匿名对象省略了**对象名称**。**匿名内部类和匿名对象不是一回事**","source":"_posts/Java1.md","raw":"---\ntitle: Java基础①\nimg: /medias/featureimages/3.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-10-27 17:30:46\npassword:\nsummary: 讲解Java面向对象的基本特性😆。\ntags:\n- Java\n- 语言\ncategories:\n- Java\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=22822489&auto=1&height=66\"></iframe></div>\n\n>主要讲解Java面向对象的基本特性，若有错误之处，望批评指正😆。\n\n# Java面向对象\n---\n## 对象和封装\n\n1. 当一个对象作为参数，传递到方法中时，实际上传递的是地址值。\n2. **局部变量、成员变量区别**\n\n* 定义的位置不一样(**重点**)\n局部：在方法的内部。\n成员：在方法的外部，直接写在类当中。\n\n* 作用范围不一样(**重点**)\n局部：只在方法当中才有用，出了方法就不能用了。\n成员：整个类都能使用。\n\n* 默认值不同(**重点**)\n局部：没有默认值，要想用，必须手动赋值。\n成员：如果没有赋值，会有默认值，规则和数组一样。\n\n* 内存的位置不一样(**了解**)\n局部：位于栈内存。\n成员：位于堆内存。\n\n* 生命周期不一样(**了解**)\n局部：随着方法进栈而诞生，随着方法的出栈而消失。\n成员：随着对象创建而诞生，随着对象被垃圾回收而消失。\n\n3. 封装就是将一些细节信息隐藏起来，对外界不可见。\n\n4. 构造方法是专门用来创建对象的方法，当我们利用关键字new来创建对象时，其实就是调用的构造方法。格式如下：\n```java\n//无参构造方法\npublic class_name(){\n\t方法体\n}\n//有参构造方法\npublic class_name(type name){\n\t方法体\n}\n```\n\n## 继承\n1. 在继承中，“子类就是一个父类”，就是说子类可以被当成一个父类看待。\n```java\n//父类格式：\npublic class Fu_class{\n\t...\n}\n//子类格式：\npublic class Zi_class extends Fu_class{\n\t...\n}\n```\n在子类中，访问变量的方式如下：\n```java\n局部变量：name\n本类成员变量：this.name\n父类成员变量：super.name\n```\n2. 重写(\\(override\\)):在继承关系中，方法名称一样，参数列表也**一样**。\n   重载(\\(overload\\)):方法名称一样，参数列表**不一样**。\n   \n3. 重写注意事项：\n* 必须保证父子类之间的名称相同，参数列表也相同,利用`@Override`来检测是不是有效的覆盖重写\n```java\n@Override\npublic void name(type parameter_name){\n\t方法体\n}\n```\n* 子类方法的返回值必须**小于等于**父类方法的返回值范围\n* 子类方法的权限必须**大于等于**父类方法的权限修饰符\n```java\npublic > protected > (default) > private\n//default指的是留空，不写\n```\n\n4. 继承关系中，父类构造方法的访问特点：\n子类必须调用父类构造方法，不写则赠送一个`super()`方法，写了则用指定的super调用，super只能有一个，还必须是第一个。\n\n5. 继承中super关键字的用法有3种：\n* 在子类的**成员方法**中，访问父类的**成员变量**。\n* 在子类的**成员方法**中，访问父类的**成员方法**。\n* 在子类的**构造方法**中，访问父类的**构造方法**。\n\n## 抽象\n\n1. 抽象方法：在权限修饰符后加上`abstract`关键字，去掉大括号，分号结束。\n```java\npublic abstract void method_name ();\n```\n2. 抽象类：在class前加上`abstract`即为抽象类。\n```java\npublic abstract class class_name{\n\t...\n}\n```\n\n3. 使用抽象类和抽象方法：\n* 不能直接`new`（创建）抽象类对象\n* 必须用一个子类来继承抽象父类\n* 子类必须覆盖重写（去掉`abstract`关键字，写方法体）抽象父类中的所有抽象方法\n* 创建子类对象进行使用\n\n## 接口（Interface）\n\n\n1. 接口使用步骤：\n* 建立一个`Interface`类，里边写抽象方法\n```java\npublic Interface Interface_name{\n\t...\n}\n\n* 接口不能直接使用，必须有一个“实现类”来“实现”该接口\n```java\npublic class imp_name implements Interface_name{\n\t...\n}\n```\n\n* 接口的实现类必须覆盖重写（实现）接口中**所有**的抽象类\n\n* 创建实现类的对象，进行使用\n\n2. 接口中定义\"成员变量\"，使用`public static final`进行修饰，格式：\n```java\n//其中public static final可以省略，但是不写，默认也是这样\npublic static final type var_name = value;\n```\n\n3. 类-接口：\n* 类与类之间是单继承，直接父类只有一个\n* 类与接口之间是多实现的，一个类可以实现多个接口\n* 接口与接口之间是多继承的\n* 多个父接口之间当中的抽象方法如果重复，没有关系\n* 多个父接口当中的默认方法（`defaule`关键字）如果重复，那么子接口必须进行默认方法的重写\n\n## 多态\n\n1. 其实就是一句话：父类引用指向子类对象，格式：\n```java\nFu_class obj = new Zi_class();\n//or\nInterface_name obj = new implements_name();\n```\n\n2. 多态下成员变量、成员方法使用口诀：\n* 成员变量：编译看左边，运行看左边\n* 成员方法：编译看左边，运行看右边\n\n3. 对象的转型\n* 对象的向上转型，其实就是多态写法，格式：\n```java\nFu_class obj = new Zi_class();\n```\n* 对象的向下转型，其实就是[**还原**]动作，格式：\n```java\nZi_class obj = (Zi_class) Fu_obj_name();\n```\n\n* `instance of`会得到一个`boolean`值结果，判断前边的对象能不能作为后边类型的实例\n```java\nobj instance of class_name;\n```\n\n## Final关键字\n\n1. final关键字来修饰一个类的时候，表示这个类不能有任何子类，格式：\n```java\npublic final class class_name{\n\t...\n}\n```\n\n2. final关键字来修饰一个方法时，这个方法是最终方法，不能覆盖重写，格式：\n```java\n修饰符 final 返回值类型 method_name(type parameter_name){\n\t方法体\n}\n```\n\n  >tips：对于类和方法来说，abstract和final关键字不能同时使用，相互矛盾。\n\n3. final修饰成员变量时，成员变量不再给默认值，要么直接赋值，要么通过构造方法赋值\n\n## 四种权限修饰符\n|      范围          |public | protected | (\\(default\\)) | private|\n|:------------------:|:-----:|:---------:|:-------------:|:------:|\n|同一个类（我自己）    |  √     |    √    |    √   |   √   |\n|同一个包（我领居）    |  √     |    √    |    √   |   ×   |\n|不同包子类（我儿子）  |  √     |    √    |    ×   |   ×   |\n|不同包非子类（陌生人）|  √     |    ×    |    ×   |   ×   |\n\n## 内部类\n\n1. 成员内部类定义格式：\n```java\npublic class out_class_name{\n\tpublic class in_class_name{\n\t\t...\n\t}\n}\n```\n\n  >tips：内部类用外部类，随意访问；外部类用内部类，需要内部对象。\n\n  新建成员内部类对象：\n\n  ```java\n  out_class_name.in_class_name obj =  new out_class_name().in_class_name();\n  ```\n\n2. 局部内部类：只有当前所属的方法才可以使用它，出了这个方法外边就不能用了，格式：\n```java\n修饰符 class out_class_name{\n\t修饰符 返回值类型 out_method_name(type parameter_name){\n\t\tclass in_class_name{\n\t\t\t...\n\t\t}\n\t}\n}\n```\n\n  >tips：局部内部类，如果想要访问所在方法的局部变量，那么这个局部变量必须是**有效的final**。这是由于生命周期所决定：\n  * 局部变量，跟着方法→位于栈内存→方法运行结束，立刻出栈，局部变量消失。\n  * new出来的对象→位于堆内存→对象一直位于堆内存，直到垃圾回收清理。\n\n3. 使用内部类时，权限修饰符规则：\n* 外部类：(public) / \\((default)\\)\n* 成员内部类：(public) / (protected) / \\((default)\\) / (private)\n* 局部内部类：什么都不写\n\n4. 匿名内部类：如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用**匿名内部类**，格式为：\n```java\nInterface_name obj = new Interface_name(){\n\t//覆盖重写全部抽象方法\n}\n```\n\n  >tips：\n  * 匿名内部类在**创建对象**的时候，只能使用**唯一一次**\n  * 匿名对象在**调用方法**的时候，只能调用**唯一一次**\n  * 匿名内部类省略了**实现类/子类名称**，但是匿名对象省略了**对象名称**。**匿名内部类和匿名对象不是一回事**","slug":"Java1","published":1,"updated":"2020-10-16T11:25:51.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogw2000urouxc5h4vg4l","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22822489&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解Java面向对象的基本特性，若有错误之处，望批评指正😆。</p>\n</blockquote>\n<h1 id=\"Java面向对象\"><a href=\"#Java面向对象\" class=\"headerlink\" title=\"Java面向对象\"></a>Java面向对象</h1><hr>\n<h2 id=\"对象和封装\"><a href=\"#对象和封装\" class=\"headerlink\" title=\"对象和封装\"></a>对象和封装</h2><ol>\n<li>当一个对象作为参数，传递到方法中时，实际上传递的是地址值。</li>\n<li><strong>局部变量、成员变量区别</strong></li>\n</ol>\n<ul>\n<li><p>定义的位置不一样(<strong>重点</strong>)<br>局部：在方法的内部。<br>成员：在方法的外部，直接写在类当中。</p>\n</li>\n<li><p>作用范围不一样(<strong>重点</strong>)<br>局部：只在方法当中才有用，出了方法就不能用了。<br>成员：整个类都能使用。</p>\n</li>\n<li><p>默认值不同(<strong>重点</strong>)<br>局部：没有默认值，要想用，必须手动赋值。<br>成员：如果没有赋值，会有默认值，规则和数组一样。</p>\n</li>\n<li><p>内存的位置不一样(<strong>了解</strong>)<br>局部：位于栈内存。<br>成员：位于堆内存。</p>\n</li>\n<li><p>生命周期不一样(<strong>了解</strong>)<br>局部：随着方法进栈而诞生，随着方法的出栈而消失。<br>成员：随着对象创建而诞生，随着对象被垃圾回收而消失。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p>封装就是将一些细节信息隐藏起来，对外界不可见。</p>\n</li>\n<li><p>构造方法是专门用来创建对象的方法，当我们利用关键字new来创建对象时，其实就是调用的构造方法。格式如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//无参构造方法</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n 方法体\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//有参构造方法</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">class_name</span><span class=\"token punctuation\">(</span>type name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n 方法体\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li><p>在继承中，“子类就是一个父类”，就是说子类可以被当成一个父类看待。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//父类格式：</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Fu_class</span><span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//子类格式：</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Zi_class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Fu_class</span><span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在子类中，访问变量的方式如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">局部变量：name\n本类成员变量：<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name\n父类成员变量：<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>重写((override)):在继承关系中，方法名称一样，参数列表也<strong>一样</strong>。<br>重载((overload)):方法名称一样，参数列表<strong>不一样</strong>。</p>\n</li>\n<li><p>重写注意事项：</p>\n</li>\n</ol>\n<ul>\n<li>必须保证父子类之间的名称相同，参数列表也相同,利用<code>@Override</code>来检测是不是有效的覆盖重写<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>type parameter_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  方法体\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>子类方法的返回值必须<strong>小于等于</strong>父类方法的返回值范围</li>\n<li>子类方法的权限必须<strong>大于等于</strong>父类方法的权限修饰符<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token operator\">></span> <span class=\"token keyword\">protected</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token keyword\">private</span>\n<span class=\"token comment\" spellcheck=\"true\">//default指的是留空，不写</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>继承关系中，父类构造方法的访问特点：<br>子类必须调用父类构造方法，不写则赠送一个<code>super()</code>方法，写了则用指定的super调用，super只能有一个，还必须是第一个。</p>\n</li>\n<li><p>继承中super关键字的用法有3种：</p>\n</li>\n</ol>\n<ul>\n<li>在子类的<strong>成员方法</strong>中，访问父类的<strong>成员变量</strong>。</li>\n<li>在子类的<strong>成员方法</strong>中，访问父类的<strong>成员方法</strong>。</li>\n<li>在子类的<strong>构造方法</strong>中，访问父类的<strong>构造方法</strong>。</li>\n</ul>\n<h2 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h2><ol>\n<li><p>抽象方法：在权限修饰符后加上<code>abstract</code>关键字，去掉大括号，分号结束。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method_name</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>抽象类：在class前加上<code>abstract</code>即为抽象类。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">class_name</span><span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>使用抽象类和抽象方法：</p>\n</li>\n</ol>\n<ul>\n<li>不能直接<code>new</code>（创建）抽象类对象</li>\n<li>必须用一个子类来继承抽象父类</li>\n<li>子类必须覆盖重写（去掉<code>abstract</code>关键字，写方法体）抽象父类中的所有抽象方法</li>\n<li>创建子类对象进行使用</li>\n</ul>\n<h2 id=\"接口（Interface）\"><a href=\"#接口（Interface）\" class=\"headerlink\" title=\"接口（Interface）\"></a>接口（Interface）</h2><ol>\n<li>接口使用步骤：</li>\n</ol>\n<ul>\n<li><p>建立一个<code>Interface</code>类，里边写抽象方法</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> Interface <span class=\"token class-name\">Interface_name</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>接口不能直接使用，必须有一个“实现类”来“实现”该接口</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">imp_name</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Interface_name</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>接口的实现类必须覆盖重写（实现）接口中<strong>所有</strong>的抽象类</p>\n</li>\n<li><p>创建实现类的对象，进行使用</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>接口中定义”成员变量”，使用<code>public static final</code>进行修饰，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//其中public static final可以省略，但是不写，默认也是这样</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> type var_name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>类-接口：</p>\n</li>\n</ol>\n<ul>\n<li>类与类之间是单继承，直接父类只有一个</li>\n<li>类与接口之间是多实现的，一个类可以实现多个接口</li>\n<li>接口与接口之间是多继承的</li>\n<li>多个父接口之间当中的抽象方法如果重复，没有关系</li>\n<li>多个父接口当中的默认方法（<code>defaule</code>关键字）如果重复，那么子接口必须进行默认方法的重写</li>\n</ul>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ol>\n<li><p>其实就是一句话：父类引用指向子类对象，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Fu_class obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Zi_class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//or</span>\nInterface_name obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">implements_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>多态下成员变量、成员方法使用口诀：</p>\n</li>\n</ol>\n<ul>\n<li>成员变量：编译看左边，运行看左边</li>\n<li>成员方法：编译看左边，运行看右边</li>\n</ul>\n<ol start=\"3\">\n<li>对象的转型</li>\n</ol>\n<ul>\n<li><p>对象的向上转型，其实就是多态写法，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Fu_class obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Zi_class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>对象的向下转型，其实就是[<strong>还原</strong>]动作，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Zi_class obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Zi_class<span class=\"token punctuation\">)</span> <span class=\"token function\">Fu_obj_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p><code>instance of</code>会得到一个<code>boolean</code>值结果，判断前边的对象能不能作为后边类型的实例</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">obj instance of class_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"Final关键字\"><a href=\"#Final关键字\" class=\"headerlink\" title=\"Final关键字\"></a>Final关键字</h2><ol>\n<li><p>final关键字来修饰一个类的时候，表示这个类不能有任何子类，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">class_name</span><span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>final关键字来修饰一个方法时，这个方法是最终方法，不能覆盖重写，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">修饰符 <span class=\"token keyword\">final</span> 返回值类型 <span class=\"token function\">method_name</span><span class=\"token punctuation\">(</span>type parameter_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n 方法体\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>tips：对于类和方法来说，abstract和final关键字不能同时使用，相互矛盾。</p>\n</blockquote>\n</li>\n<li><p>final修饰成员变量时，成员变量不再给默认值，要么直接赋值，要么通过构造方法赋值</p>\n</li>\n</ol>\n<h2 id=\"四种权限修饰符\"><a href=\"#四种权限修饰符\" class=\"headerlink\" title=\"四种权限修饰符\"></a>四种权限修饰符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">范围</th>\n<th align=\"center\">public</th>\n<th align=\"center\">protected</th>\n<th align=\"center\">((default))</th>\n<th align=\"center\">private</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">同一个类（我自己）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">同一个包（我领居）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">不同包子类（我儿子）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">不同包非子类（陌生人）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><ol>\n<li><p>成员内部类定义格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">out_class_name</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">in_class_name</span><span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>tips：内部类用外部类，随意访问；外部类用内部类，需要内部对象。</p>\n</blockquote>\n<p>新建成员内部类对象：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">out_class_name<span class=\"token punctuation\">.</span>in_class_name obj <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">out_class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">in_class_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>局部内部类：只有当前所属的方法才可以使用它，出了这个方法外边就不能用了，格式：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">修饰符 <span class=\"token keyword\">class</span> <span class=\"token class-name\">out_class_name</span><span class=\"token punctuation\">{</span>\n 修饰符 返回值类型 <span class=\"token function\">out_method_name</span><span class=\"token punctuation\">(</span>type parameter_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">class</span> <span class=\"token class-name\">in_class_name</span><span class=\"token punctuation\">{</span>\n         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n     <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>tips：局部内部类，如果想要访问所在方法的局部变量，那么这个局部变量必须是<strong>有效的final</strong>。这是由于生命周期所决定：</p>\n<ul>\n<li>局部变量，跟着方法→位于栈内存→方法运行结束，立刻出栈，局部变量消失。</li>\n<li>new出来的对象→位于堆内存→对象一直位于堆内存，直到垃圾回收清理。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>使用内部类时，权限修饰符规则：</p>\n</li>\n</ol>\n<ul>\n<li>外部类：(public) / ((default))</li>\n<li>成员内部类：(public) / (protected) / ((default)) / (private)</li>\n<li>局部内部类：什么都不写</li>\n</ul>\n<ol start=\"4\">\n<li><p>匿名内部类：如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用<strong>匿名内部类</strong>，格式为：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Interface_name obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Interface_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token comment\" spellcheck=\"true\">//覆盖重写全部抽象方法</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>tips：</p>\n<ul>\n<li>匿名内部类在<strong>创建对象</strong>的时候，只能使用<strong>唯一一次</strong></li>\n<li>匿名对象在<strong>调用方法</strong>的时候，只能调用<strong>唯一一次</strong></li>\n<li>匿名内部类省略了<strong>实现类/子类名称</strong>，但是匿名对象省略了<strong>对象名称</strong>。<strong>匿名内部类和匿名对象不是一回事</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22822489&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解Java面向对象的基本特性，若有错误之处，望批评指正😆。</p>\n</blockquote>\n<h1 id=\"Java面向对象\"><a href=\"#Java面向对象\" class=\"headerlink\" title=\"Java面向对象\"></a>Java面向对象</h1><hr>\n<h2 id=\"对象和封装\"><a href=\"#对象和封装\" class=\"headerlink\" title=\"对象和封装\"></a>对象和封装</h2><ol>\n<li>当一个对象作为参数，传递到方法中时，实际上传递的是地址值。</li>\n<li><strong>局部变量、成员变量区别</strong></li>\n</ol>\n<ul>\n<li><p>定义的位置不一样(<strong>重点</strong>)<br>局部：在方法的内部。<br>成员：在方法的外部，直接写在类当中。</p>\n</li>\n<li><p>作用范围不一样(<strong>重点</strong>)<br>局部：只在方法当中才有用，出了方法就不能用了。<br>成员：整个类都能使用。</p>\n</li>\n<li><p>默认值不同(<strong>重点</strong>)<br>局部：没有默认值，要想用，必须手动赋值。<br>成员：如果没有赋值，会有默认值，规则和数组一样。</p>\n</li>\n<li><p>内存的位置不一样(<strong>了解</strong>)<br>局部：位于栈内存。<br>成员：位于堆内存。</p>\n</li>\n<li><p>生命周期不一样(<strong>了解</strong>)<br>局部：随着方法进栈而诞生，随着方法的出栈而消失。<br>成员：随着对象创建而诞生，随着对象被垃圾回收而消失。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li><p>封装就是将一些细节信息隐藏起来，对外界不可见。</p>\n</li>\n<li><p>构造方法是专门用来创建对象的方法，当我们利用关键字new来创建对象时，其实就是调用的构造方法。格式如下：</p>\n<pre><code class=\"java\">//无参构造方法\npublic class_name(){\n 方法体\n}\n//有参构造方法\npublic class_name(type name){\n 方法体\n}</code></pre>\n</li>\n</ol>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ol>\n<li><p>在继承中，“子类就是一个父类”，就是说子类可以被当成一个父类看待。</p>\n<pre><code class=\"java\">//父类格式：\npublic class Fu_class{\n ...\n}\n//子类格式：\npublic class Zi_class extends Fu_class{\n ...\n}</code></pre>\n<p>在子类中，访问变量的方式如下：</p>\n<pre><code class=\"java\">局部变量：name\n本类成员变量：this.name\n父类成员变量：super.name</code></pre>\n</li>\n<li><p>重写((override)):在继承关系中，方法名称一样，参数列表也<strong>一样</strong>。<br>重载((overload)):方法名称一样，参数列表<strong>不一样</strong>。</p>\n</li>\n<li><p>重写注意事项：</p>\n</li>\n</ol>\n<ul>\n<li>必须保证父子类之间的名称相同，参数列表也相同,利用<code>@Override</code>来检测是不是有效的覆盖重写<pre><code class=\"java\">@Override\npublic void name(type parameter_name){\n  方法体\n}</code></pre>\n</li>\n<li>子类方法的返回值必须<strong>小于等于</strong>父类方法的返回值范围</li>\n<li>子类方法的权限必须<strong>大于等于</strong>父类方法的权限修饰符<pre><code class=\"java\">public &gt; protected &gt; (default) &gt; private\n//default指的是留空，不写</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li><p>继承关系中，父类构造方法的访问特点：<br>子类必须调用父类构造方法，不写则赠送一个<code>super()</code>方法，写了则用指定的super调用，super只能有一个，还必须是第一个。</p>\n</li>\n<li><p>继承中super关键字的用法有3种：</p>\n</li>\n</ol>\n<ul>\n<li>在子类的<strong>成员方法</strong>中，访问父类的<strong>成员变量</strong>。</li>\n<li>在子类的<strong>成员方法</strong>中，访问父类的<strong>成员方法</strong>。</li>\n<li>在子类的<strong>构造方法</strong>中，访问父类的<strong>构造方法</strong>。</li>\n</ul>\n<h2 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h2><ol>\n<li><p>抽象方法：在权限修饰符后加上<code>abstract</code>关键字，去掉大括号，分号结束。</p>\n<pre><code class=\"java\">public abstract void method_name ();</code></pre>\n</li>\n<li><p>抽象类：在class前加上<code>abstract</code>即为抽象类。</p>\n<pre><code class=\"java\">public abstract class class_name{\n ...\n}</code></pre>\n</li>\n<li><p>使用抽象类和抽象方法：</p>\n</li>\n</ol>\n<ul>\n<li>不能直接<code>new</code>（创建）抽象类对象</li>\n<li>必须用一个子类来继承抽象父类</li>\n<li>子类必须覆盖重写（去掉<code>abstract</code>关键字，写方法体）抽象父类中的所有抽象方法</li>\n<li>创建子类对象进行使用</li>\n</ul>\n<h2 id=\"接口（Interface）\"><a href=\"#接口（Interface）\" class=\"headerlink\" title=\"接口（Interface）\"></a>接口（Interface）</h2><ol>\n<li>接口使用步骤：</li>\n</ol>\n<ul>\n<li><p>建立一个<code>Interface</code>类，里边写抽象方法</p>\n<pre><code class=\"java\">public Interface Interface_name{\n  ...\n}</code></pre>\n</li>\n<li><p>接口不能直接使用，必须有一个“实现类”来“实现”该接口</p>\n<pre><code class=\"java\">public class imp_name implements Interface_name{\n  ...\n}</code></pre>\n</li>\n<li><p>接口的实现类必须覆盖重写（实现）接口中<strong>所有</strong>的抽象类</p>\n</li>\n<li><p>创建实现类的对象，进行使用</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>接口中定义”成员变量”，使用<code>public static final</code>进行修饰，格式：</p>\n<pre><code class=\"java\">//其中public static final可以省略，但是不写，默认也是这样\npublic static final type var_name = value;</code></pre>\n</li>\n<li><p>类-接口：</p>\n</li>\n</ol>\n<ul>\n<li>类与类之间是单继承，直接父类只有一个</li>\n<li>类与接口之间是多实现的，一个类可以实现多个接口</li>\n<li>接口与接口之间是多继承的</li>\n<li>多个父接口之间当中的抽象方法如果重复，没有关系</li>\n<li>多个父接口当中的默认方法（<code>defaule</code>关键字）如果重复，那么子接口必须进行默认方法的重写</li>\n</ul>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ol>\n<li><p>其实就是一句话：父类引用指向子类对象，格式：</p>\n<pre><code class=\"java\">Fu_class obj = new Zi_class();\n//or\nInterface_name obj = new implements_name();</code></pre>\n</li>\n<li><p>多态下成员变量、成员方法使用口诀：</p>\n</li>\n</ol>\n<ul>\n<li>成员变量：编译看左边，运行看左边</li>\n<li>成员方法：编译看左边，运行看右边</li>\n</ul>\n<ol start=\"3\">\n<li>对象的转型</li>\n</ol>\n<ul>\n<li><p>对象的向上转型，其实就是多态写法，格式：</p>\n<pre><code class=\"java\">Fu_class obj = new Zi_class();</code></pre>\n</li>\n<li><p>对象的向下转型，其实就是[<strong>还原</strong>]动作，格式：</p>\n<pre><code class=\"java\">Zi_class obj = (Zi_class) Fu_obj_name();</code></pre>\n</li>\n<li><p><code>instance of</code>会得到一个<code>boolean</code>值结果，判断前边的对象能不能作为后边类型的实例</p>\n<pre><code class=\"java\">obj instance of class_name;</code></pre>\n</li>\n</ul>\n<h2 id=\"Final关键字\"><a href=\"#Final关键字\" class=\"headerlink\" title=\"Final关键字\"></a>Final关键字</h2><ol>\n<li><p>final关键字来修饰一个类的时候，表示这个类不能有任何子类，格式：</p>\n<pre><code class=\"java\">public final class class_name{\n ...\n}</code></pre>\n</li>\n<li><p>final关键字来修饰一个方法时，这个方法是最终方法，不能覆盖重写，格式：</p>\n<pre><code class=\"java\">修饰符 final 返回值类型 method_name(type parameter_name){\n 方法体\n}</code></pre>\n<blockquote>\n<p>tips：对于类和方法来说，abstract和final关键字不能同时使用，相互矛盾。</p>\n</blockquote>\n</li>\n<li><p>final修饰成员变量时，成员变量不再给默认值，要么直接赋值，要么通过构造方法赋值</p>\n</li>\n</ol>\n<h2 id=\"四种权限修饰符\"><a href=\"#四种权限修饰符\" class=\"headerlink\" title=\"四种权限修饰符\"></a>四种权限修饰符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">范围</th>\n<th align=\"center\">public</th>\n<th align=\"center\">protected</th>\n<th align=\"center\">((default))</th>\n<th align=\"center\">private</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">同一个类（我自己）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">同一个包（我领居）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">不同包子类（我儿子）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">不同包非子类（陌生人）</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><ol>\n<li><p>成员内部类定义格式：</p>\n<pre><code class=\"java\">public class out_class_name{\n public class in_class_name{\n     ...\n }\n}</code></pre>\n<blockquote>\n<p>tips：内部类用外部类，随意访问；外部类用内部类，需要内部对象。</p>\n</blockquote>\n<p>新建成员内部类对象：</p>\n<pre><code class=\"java\">out_class_name.in_class_name obj =  new out_class_name().in_class_name();</code></pre>\n</li>\n<li><p>局部内部类：只有当前所属的方法才可以使用它，出了这个方法外边就不能用了，格式：</p>\n<pre><code class=\"java\">修饰符 class out_class_name{\n 修饰符 返回值类型 out_method_name(type parameter_name){\n     class in_class_name{\n         ...\n     }\n }\n}</code></pre>\n<blockquote>\n<p>tips：局部内部类，如果想要访问所在方法的局部变量，那么这个局部变量必须是<strong>有效的final</strong>。这是由于生命周期所决定：</p>\n<ul>\n<li>局部变量，跟着方法→位于栈内存→方法运行结束，立刻出栈，局部变量消失。</li>\n<li>new出来的对象→位于堆内存→对象一直位于堆内存，直到垃圾回收清理。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>使用内部类时，权限修饰符规则：</p>\n</li>\n</ol>\n<ul>\n<li>外部类：(public) / ((default))</li>\n<li>成员内部类：(public) / (protected) / ((default)) / (private)</li>\n<li>局部内部类：什么都不写</li>\n</ul>\n<ol start=\"4\">\n<li><p>匿名内部类：如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，那么这种情况下就可以省略掉该类的定义，而改为使用<strong>匿名内部类</strong>，格式为：</p>\n<pre><code class=\"java\">Interface_name obj = new Interface_name(){\n //覆盖重写全部抽象方法\n}</code></pre>\n<blockquote>\n<p>tips：</p>\n<ul>\n<li>匿名内部类在<strong>创建对象</strong>的时候，只能使用<strong>唯一一次</strong></li>\n<li>匿名对象在<strong>调用方法</strong>的时候，只能调用<strong>唯一一次</strong></li>\n<li>匿名内部类省略了<strong>实现类/子类名称</strong>，但是匿名对象省略了<strong>对象名称</strong>。<strong>匿名内部类和匿名对象不是一回事</strong></li>\n</ul>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Java基础②","img":"/medias/featureimages/4.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-03T06:53:35.000Z","password":null,"summary":"总结Java中集合相关的知识🤣。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=551277612&auto=1&height=66\"></iframe></div>\n\n>主要总结Java中集合相关的知识，若有错误，欢迎更正🤣。\n\n# Java集合\n---\n\n## collection常用功能\n\nCollection是所有单列集合的父接口，Collection中定义了单列集合（List和Set）通用的一些方法，这些方法可以操作所有的单列集合。方法如下：\n\n* `public boolean add(E e)`: 把给定的对象添加到当前集合中 。\n* `public void clear()`: 清空集合中所有的元素。\n* `public boolean remove(E e)`: 把给定的对象在当前集合中删除。\n* `public boolean contains(E e)`: 判断当前集合中是否包含给定的对象。\n* `public boolean isEmpty()`: 判断当前集合是否为空。\n* `public int size()`: 返回集合中元素的个数。\n* `public Object[] toArray()`: 把集合中的元素，存储到数组中。\n\n## iterator迭代器\n\n### 1. 迭代的概念\n* **迭代**：Collection集合元素的通用获取方式。在取出元素之前要先判断集合中有没有元素，如果有，就把这个元素取出来，继续判断，如果还有就再取出来。一直把集合中的所有元素全部取出来。这种取出方式专业术语称为迭代。\n\n### 2. iterator接口的常用方法\n* `public E next()`: 返回迭代的下一个元素。\n* `public boolean hasNext`: 如果仍有元素可以迭代，则返回true。\n\n### 3. 增强for循环\n* 专门用来遍历数组和集合的，内部原理其实是一个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。格式为：\n```java\nfor(type var : collection集合 or 数组){\n\t...\n}\n```\n\n## List\n\nList是Collection集合的子接口，不但继承了Collection接口中的方法，而且增加一些根据元素索引来操作集合的特有方法\n\n### 1. List接口特点\n* 它是一个元素存取有序的集合。\n* 它是一个带有索引的集合，通过索引就可以精确操作集合中的元素\n* 集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素\n\n### 2. List接口中常用方法\n- `public void add(int index, E element)`： 将指定的元素，添加到该集合中的指定位置上。\n- `public E get(int index)`：返回集合中指定位置的元素。\n- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。\n- `public E set(int index, E element)`：用指定元素替换集合中指定位置的元素,返回值的更新前的元素。\n\n### 3. ArrayList集合（List子类）\n* 数据存储的格式是数组结构。元素增删慢，查找快。\n\n### 4. LinkedList集合（List子类）\n* 数据存储的结构是链表结构。元素增删快，查询慢。\n* 里边包含了大量操作首尾元素的方法。\n- `public void addFirst(E e)`：将指定元素插入此列表的开头。\n- `public void addLast(E e)`：将指定元素添加到此列表的结尾。\n- `public void push(E e)`：将元素推入此列表所表示的堆栈。\n- `public E getFirst()`：返回此列表的第一个元素。\n- `public E getLast()`：返回此列表的最后一个元素。\n- `public E removeFirst()`：移除并返回此列表的第一个元素。\n- `public E removeLast()`：移除并返回此列表的最后一个元素。\n- `public E pop()`:从此列表所表示的堆栈处弹出一个元素。\n- `public boolean isEmpty()`：如果列表不包含元素，则返回true。\n\n>tips：使用LinkedList集合特有的方法,不能使用多态。\n\n\n## Set\n\n同样继承自Collection接口，与Collection接口中的方法基本一致。\n### 1. Set接口特点\n* 不允许存储重复的元素。\n* 没有索引，没有带索引的方法，也不能用普通的for循环遍历。\n\n### 2. HashSet（Set实现）\n* 根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于hashCode与equals方法。\n\n>tips：必须重写hashCode和equals方法。\n\n### 3. LinkedHashSet（Set实现）\n* 数据为链表+哈希表组合的存储结构。\n* 元素放入取出是有顺序的。\n\n## 可变参数\n\n当方法参数列表已经确定，但是参数个数不确定时，可以用可变参数。格式为：\n```java\n修饰符 返回值类型 method_name(type ...var){\n\t方法体\n}\n```\n> * 一个方法的参数列表，只能有一个参数变量。\n* 如果方法的参数有多个，那么可变参数必须写在参数列表末尾。\n\n\n## Map\n\n### 1. Map集合特点\n* Map集合是一个双列集合,一个元素包含两个值(一个key,一个value)。\n* Map集合中的元素,key和value的数据类型可以相同,也可以不同。\n* Map集合中的元素,key是不允许重复的,value是可以重复的。\n* Map集合中的元素,key和value是一一对应。\n\n### 2. HsahMap（Map实现）\n* HashMap集合底层是哈希表:查询的速度特别的快。\n* hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致。\n\n### 3. LinkedHashMap（HsahMap实现）\n* LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)。\n* LinkedHashMap集合是一个有序的集合,存储元素和取出元素的顺序是一致的。\n\n## JDK9新特性\nList、Set、Map接口:里边增加了一个静态的方法of,可以给集合一次性添加多个元素。\n* `static <E> List<E> of​(E... elements)`：一次性添加多个元素。\n\n> * of方法只适用于List接口，Set接口，Map接口，不适用于接接口的实现类。\n* of方法的返回值是一个不能改变的集合，集合不能再使用add，put方法添加元素，否则会抛出异常。\n* Set接口和Map接口在调用of方法的时候，不能有重复的元素，否则会抛出异常。","source":"_posts/Java2.md","raw":"---\ntitle: Java基础②\nimg: /medias/featureimages/4.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-03 14:53:35\npassword:\nsummary: 总结Java中集合相关的知识🤣。\ntags:\n- Java\n- 语言\ncategories:\n- Java\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=551277612&auto=1&height=66\"></iframe></div>\n\n>主要总结Java中集合相关的知识，若有错误，欢迎更正🤣。\n\n# Java集合\n---\n\n## collection常用功能\n\nCollection是所有单列集合的父接口，Collection中定义了单列集合（List和Set）通用的一些方法，这些方法可以操作所有的单列集合。方法如下：\n\n* `public boolean add(E e)`: 把给定的对象添加到当前集合中 。\n* `public void clear()`: 清空集合中所有的元素。\n* `public boolean remove(E e)`: 把给定的对象在当前集合中删除。\n* `public boolean contains(E e)`: 判断当前集合中是否包含给定的对象。\n* `public boolean isEmpty()`: 判断当前集合是否为空。\n* `public int size()`: 返回集合中元素的个数。\n* `public Object[] toArray()`: 把集合中的元素，存储到数组中。\n\n## iterator迭代器\n\n### 1. 迭代的概念\n* **迭代**：Collection集合元素的通用获取方式。在取出元素之前要先判断集合中有没有元素，如果有，就把这个元素取出来，继续判断，如果还有就再取出来。一直把集合中的所有元素全部取出来。这种取出方式专业术语称为迭代。\n\n### 2. iterator接口的常用方法\n* `public E next()`: 返回迭代的下一个元素。\n* `public boolean hasNext`: 如果仍有元素可以迭代，则返回true。\n\n### 3. 增强for循环\n* 专门用来遍历数组和集合的，内部原理其实是一个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。格式为：\n```java\nfor(type var : collection集合 or 数组){\n\t...\n}\n```\n\n## List\n\nList是Collection集合的子接口，不但继承了Collection接口中的方法，而且增加一些根据元素索引来操作集合的特有方法\n\n### 1. List接口特点\n* 它是一个元素存取有序的集合。\n* 它是一个带有索引的集合，通过索引就可以精确操作集合中的元素\n* 集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素\n\n### 2. List接口中常用方法\n- `public void add(int index, E element)`： 将指定的元素，添加到该集合中的指定位置上。\n- `public E get(int index)`：返回集合中指定位置的元素。\n- `public E remove(int index)`: 移除列表中指定位置的元素, 返回的是被移除的元素。\n- `public E set(int index, E element)`：用指定元素替换集合中指定位置的元素,返回值的更新前的元素。\n\n### 3. ArrayList集合（List子类）\n* 数据存储的格式是数组结构。元素增删慢，查找快。\n\n### 4. LinkedList集合（List子类）\n* 数据存储的结构是链表结构。元素增删快，查询慢。\n* 里边包含了大量操作首尾元素的方法。\n- `public void addFirst(E e)`：将指定元素插入此列表的开头。\n- `public void addLast(E e)`：将指定元素添加到此列表的结尾。\n- `public void push(E e)`：将元素推入此列表所表示的堆栈。\n- `public E getFirst()`：返回此列表的第一个元素。\n- `public E getLast()`：返回此列表的最后一个元素。\n- `public E removeFirst()`：移除并返回此列表的第一个元素。\n- `public E removeLast()`：移除并返回此列表的最后一个元素。\n- `public E pop()`:从此列表所表示的堆栈处弹出一个元素。\n- `public boolean isEmpty()`：如果列表不包含元素，则返回true。\n\n>tips：使用LinkedList集合特有的方法,不能使用多态。\n\n\n## Set\n\n同样继承自Collection接口，与Collection接口中的方法基本一致。\n### 1. Set接口特点\n* 不允许存储重复的元素。\n* 没有索引，没有带索引的方法，也不能用普通的for循环遍历。\n\n### 2. HashSet（Set实现）\n* 根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于hashCode与equals方法。\n\n>tips：必须重写hashCode和equals方法。\n\n### 3. LinkedHashSet（Set实现）\n* 数据为链表+哈希表组合的存储结构。\n* 元素放入取出是有顺序的。\n\n## 可变参数\n\n当方法参数列表已经确定，但是参数个数不确定时，可以用可变参数。格式为：\n```java\n修饰符 返回值类型 method_name(type ...var){\n\t方法体\n}\n```\n> * 一个方法的参数列表，只能有一个参数变量。\n* 如果方法的参数有多个，那么可变参数必须写在参数列表末尾。\n\n\n## Map\n\n### 1. Map集合特点\n* Map集合是一个双列集合,一个元素包含两个值(一个key,一个value)。\n* Map集合中的元素,key和value的数据类型可以相同,也可以不同。\n* Map集合中的元素,key是不允许重复的,value是可以重复的。\n* Map集合中的元素,key和value是一一对应。\n\n### 2. HsahMap（Map实现）\n* HashMap集合底层是哈希表:查询的速度特别的快。\n* hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致。\n\n### 3. LinkedHashMap（HsahMap实现）\n* LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)。\n* LinkedHashMap集合是一个有序的集合,存储元素和取出元素的顺序是一致的。\n\n## JDK9新特性\nList、Set、Map接口:里边增加了一个静态的方法of,可以给集合一次性添加多个元素。\n* `static <E> List<E> of​(E... elements)`：一次性添加多个元素。\n\n> * of方法只适用于List接口，Set接口，Map接口，不适用于接接口的实现类。\n* of方法的返回值是一个不能改变的集合，集合不能再使用add，put方法添加元素，否则会抛出异常。\n* Set接口和Map接口在调用of方法的时候，不能有重复的元素，否则会抛出异常。","slug":"Java2","published":1,"updated":"2020-10-16T11:25:51.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogw8000yrouxdlz71zh4","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=551277612&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要总结Java中集合相关的知识，若有错误，欢迎更正🤣。</p>\n</blockquote>\n<h1 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"Java集合\"></a>Java集合</h1><hr>\n<h2 id=\"collection常用功能\"><a href=\"#collection常用功能\" class=\"headerlink\" title=\"collection常用功能\"></a>collection常用功能</h2><p>Collection是所有单列集合的父接口，Collection中定义了单列集合（List和Set）通用的一些方法，这些方法可以操作所有的单列集合。方法如下：</p>\n<ul>\n<li><code>public boolean add(E e)</code>: 把给定的对象添加到当前集合中 。</li>\n<li><code>public void clear()</code>: 清空集合中所有的元素。</li>\n<li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li>\n<li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li>\n<li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li>\n<li><code>public int size()</code>: 返回集合中元素的个数。</li>\n<li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li>\n</ul>\n<h2 id=\"iterator迭代器\"><a href=\"#iterator迭代器\" class=\"headerlink\" title=\"iterator迭代器\"></a>iterator迭代器</h2><h3 id=\"1-迭代的概念\"><a href=\"#1-迭代的概念\" class=\"headerlink\" title=\"1. 迭代的概念\"></a>1. 迭代的概念</h3><ul>\n<li><strong>迭代</strong>：Collection集合元素的通用获取方式。在取出元素之前要先判断集合中有没有元素，如果有，就把这个元素取出来，继续判断，如果还有就再取出来。一直把集合中的所有元素全部取出来。这种取出方式专业术语称为迭代。</li>\n</ul>\n<h3 id=\"2-iterator接口的常用方法\"><a href=\"#2-iterator接口的常用方法\" class=\"headerlink\" title=\"2. iterator接口的常用方法\"></a>2. iterator接口的常用方法</h3><ul>\n<li><code>public E next()</code>: 返回迭代的下一个元素。</li>\n<li><code>public boolean hasNext</code>: 如果仍有元素可以迭代，则返回true。</li>\n</ul>\n<h3 id=\"3-增强for循环\"><a href=\"#3-增强for循环\" class=\"headerlink\" title=\"3. 增强for循环\"></a>3. 增强for循环</h3><ul>\n<li>专门用来遍历数组和集合的，内部原理其实是一个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。格式为：<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>type var <span class=\"token operator\">:</span> collection集合 or 数组<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>List是Collection集合的子接口，不但继承了Collection接口中的方法，而且增加一些根据元素索引来操作集合的特有方法</p>\n<h3 id=\"1-List接口特点\"><a href=\"#1-List接口特点\" class=\"headerlink\" title=\"1. List接口特点\"></a>1. List接口特点</h3><ul>\n<li>它是一个元素存取有序的集合。</li>\n<li>它是一个带有索引的集合，通过索引就可以精确操作集合中的元素</li>\n<li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素</li>\n</ul>\n<h3 id=\"2-List接口中常用方法\"><a href=\"#2-List接口中常用方法\" class=\"headerlink\" title=\"2. List接口中常用方法\"></a>2. List接口中常用方法</h3><ul>\n<li><code>public void add(int index, E element)</code>： 将指定的元素，添加到该集合中的指定位置上。</li>\n<li><code>public E get(int index)</code>：返回集合中指定位置的元素。</li>\n<li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li>\n<li><code>public E set(int index, E element)</code>：用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li>\n</ul>\n<h3 id=\"3-ArrayList集合（List子类）\"><a href=\"#3-ArrayList集合（List子类）\" class=\"headerlink\" title=\"3. ArrayList集合（List子类）\"></a>3. ArrayList集合（List子类）</h3><ul>\n<li>数据存储的格式是数组结构。元素增删慢，查找快。</li>\n</ul>\n<h3 id=\"4-LinkedList集合（List子类）\"><a href=\"#4-LinkedList集合（List子类）\" class=\"headerlink\" title=\"4. LinkedList集合（List子类）\"></a>4. LinkedList集合（List子类）</h3><ul>\n<li>数据存储的结构是链表结构。元素增删快，查询慢。</li>\n<li>里边包含了大量操作首尾元素的方法。</li>\n</ul>\n<ul>\n<li><code>public void addFirst(E e)</code>：将指定元素插入此列表的开头。</li>\n<li><code>public void addLast(E e)</code>：将指定元素添加到此列表的结尾。</li>\n<li><code>public void push(E e)</code>：将元素推入此列表所表示的堆栈。</li>\n<li><code>public E getFirst()</code>：返回此列表的第一个元素。</li>\n<li><code>public E getLast()</code>：返回此列表的最后一个元素。</li>\n<li><code>public E removeFirst()</code>：移除并返回此列表的第一个元素。</li>\n<li><code>public E removeLast()</code>：移除并返回此列表的最后一个元素。</li>\n<li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li>\n<li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li>\n</ul>\n<blockquote>\n<p>tips：使用LinkedList集合特有的方法,不能使用多态。</p>\n</blockquote>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>同样继承自Collection接口，与Collection接口中的方法基本一致。</p>\n<h3 id=\"1-Set接口特点\"><a href=\"#1-Set接口特点\" class=\"headerlink\" title=\"1. Set接口特点\"></a>1. Set接口特点</h3><ul>\n<li>不允许存储重复的元素。</li>\n<li>没有索引，没有带索引的方法，也不能用普通的for循环遍历。</li>\n</ul>\n<h3 id=\"2-HashSet（Set实现）\"><a href=\"#2-HashSet（Set实现）\" class=\"headerlink\" title=\"2. HashSet（Set实现）\"></a>2. HashSet（Set实现）</h3><ul>\n<li>根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于hashCode与equals方法。</li>\n</ul>\n<blockquote>\n<p>tips：必须重写hashCode和equals方法。</p>\n</blockquote>\n<h3 id=\"3-LinkedHashSet（Set实现）\"><a href=\"#3-LinkedHashSet（Set实现）\" class=\"headerlink\" title=\"3. LinkedHashSet（Set实现）\"></a>3. LinkedHashSet（Set实现）</h3><ul>\n<li>数据为链表+哈希表组合的存储结构。</li>\n<li>元素放入取出是有顺序的。</li>\n</ul>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>当方法参数列表已经确定，但是参数个数不确定时，可以用可变参数。格式为：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">修饰符 返回值类型 <span class=\"token function\">method_name</span><span class=\"token punctuation\">(</span>type <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    方法体\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<ul>\n<li>一个方法的参数列表，只能有一个参数变量。</li>\n<li>如果方法的参数有多个，那么可变参数必须写在参数列表末尾。</li>\n</ul>\n</blockquote>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"1-Map集合特点\"><a href=\"#1-Map集合特点\" class=\"headerlink\" title=\"1. Map集合特点\"></a>1. Map集合特点</h3><ul>\n<li>Map集合是一个双列集合,一个元素包含两个值(一个key,一个value)。</li>\n<li>Map集合中的元素,key和value的数据类型可以相同,也可以不同。</li>\n<li>Map集合中的元素,key是不允许重复的,value是可以重复的。</li>\n<li>Map集合中的元素,key和value是一一对应。</li>\n</ul>\n<h3 id=\"2-HsahMap（Map实现）\"><a href=\"#2-HsahMap（Map实现）\" class=\"headerlink\" title=\"2. HsahMap（Map实现）\"></a>2. HsahMap（Map实现）</h3><ul>\n<li>HashMap集合底层是哈希表:查询的速度特别的快。</li>\n<li>hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致。</li>\n</ul>\n<h3 id=\"3-LinkedHashMap（HsahMap实现）\"><a href=\"#3-LinkedHashMap（HsahMap实现）\" class=\"headerlink\" title=\"3. LinkedHashMap（HsahMap实现）\"></a>3. LinkedHashMap（HsahMap实现）</h3><ul>\n<li>LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)。</li>\n<li>LinkedHashMap集合是一个有序的集合,存储元素和取出元素的顺序是一致的。</li>\n</ul>\n<h2 id=\"JDK9新特性\"><a href=\"#JDK9新特性\" class=\"headerlink\" title=\"JDK9新特性\"></a>JDK9新特性</h2><p>List、Set、Map接口:里边增加了一个静态的方法of,可以给集合一次性添加多个元素。</p>\n<ul>\n<li><code>static &lt;E&gt; List&lt;E&gt; of​(E... elements)</code>：一次性添加多个元素。</li>\n</ul>\n<blockquote>\n<ul>\n<li>of方法只适用于List接口，Set接口，Map接口，不适用于接接口的实现类。</li>\n<li>of方法的返回值是一个不能改变的集合，集合不能再使用add，put方法添加元素，否则会抛出异常。</li>\n<li>Set接口和Map接口在调用of方法的时候，不能有重复的元素，否则会抛出异常。</li>\n</ul>\n</blockquote>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=551277612&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要总结Java中集合相关的知识，若有错误，欢迎更正🤣。</p>\n</blockquote>\n<h1 id=\"Java集合\"><a href=\"#Java集合\" class=\"headerlink\" title=\"Java集合\"></a>Java集合</h1><hr>\n<h2 id=\"collection常用功能\"><a href=\"#collection常用功能\" class=\"headerlink\" title=\"collection常用功能\"></a>collection常用功能</h2><p>Collection是所有单列集合的父接口，Collection中定义了单列集合（List和Set）通用的一些方法，这些方法可以操作所有的单列集合。方法如下：</p>\n<ul>\n<li><code>public boolean add(E e)</code>: 把给定的对象添加到当前集合中 。</li>\n<li><code>public void clear()</code>: 清空集合中所有的元素。</li>\n<li><code>public boolean remove(E e)</code>: 把给定的对象在当前集合中删除。</li>\n<li><code>public boolean contains(E e)</code>: 判断当前集合中是否包含给定的对象。</li>\n<li><code>public boolean isEmpty()</code>: 判断当前集合是否为空。</li>\n<li><code>public int size()</code>: 返回集合中元素的个数。</li>\n<li><code>public Object[] toArray()</code>: 把集合中的元素，存储到数组中。</li>\n</ul>\n<h2 id=\"iterator迭代器\"><a href=\"#iterator迭代器\" class=\"headerlink\" title=\"iterator迭代器\"></a>iterator迭代器</h2><h3 id=\"1-迭代的概念\"><a href=\"#1-迭代的概念\" class=\"headerlink\" title=\"1. 迭代的概念\"></a>1. 迭代的概念</h3><ul>\n<li><strong>迭代</strong>：Collection集合元素的通用获取方式。在取出元素之前要先判断集合中有没有元素，如果有，就把这个元素取出来，继续判断，如果还有就再取出来。一直把集合中的所有元素全部取出来。这种取出方式专业术语称为迭代。</li>\n</ul>\n<h3 id=\"2-iterator接口的常用方法\"><a href=\"#2-iterator接口的常用方法\" class=\"headerlink\" title=\"2. iterator接口的常用方法\"></a>2. iterator接口的常用方法</h3><ul>\n<li><code>public E next()</code>: 返回迭代的下一个元素。</li>\n<li><code>public boolean hasNext</code>: 如果仍有元素可以迭代，则返回true。</li>\n</ul>\n<h3 id=\"3-增强for循环\"><a href=\"#3-增强for循环\" class=\"headerlink\" title=\"3. 增强for循环\"></a>3. 增强for循环</h3><ul>\n<li>专门用来遍历数组和集合的，内部原理其实是一个Iterator迭代器，所以在遍历的过程中，不能对集合中的元素进行增删操作。格式为：<pre><code class=\"java\">for(type var : collection集合 or 数组){\n  ...\n}</code></pre>\n</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><p>List是Collection集合的子接口，不但继承了Collection接口中的方法，而且增加一些根据元素索引来操作集合的特有方法</p>\n<h3 id=\"1-List接口特点\"><a href=\"#1-List接口特点\" class=\"headerlink\" title=\"1. List接口特点\"></a>1. List接口特点</h3><ul>\n<li>它是一个元素存取有序的集合。</li>\n<li>它是一个带有索引的集合，通过索引就可以精确操作集合中的元素</li>\n<li>集合中可以有重复的元素，通过元素的equals方法，来比较是否为重复的元素</li>\n</ul>\n<h3 id=\"2-List接口中常用方法\"><a href=\"#2-List接口中常用方法\" class=\"headerlink\" title=\"2. List接口中常用方法\"></a>2. List接口中常用方法</h3><ul>\n<li><code>public void add(int index, E element)</code>： 将指定的元素，添加到该集合中的指定位置上。</li>\n<li><code>public E get(int index)</code>：返回集合中指定位置的元素。</li>\n<li><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</li>\n<li><code>public E set(int index, E element)</code>：用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</li>\n</ul>\n<h3 id=\"3-ArrayList集合（List子类）\"><a href=\"#3-ArrayList集合（List子类）\" class=\"headerlink\" title=\"3. ArrayList集合（List子类）\"></a>3. ArrayList集合（List子类）</h3><ul>\n<li>数据存储的格式是数组结构。元素增删慢，查找快。</li>\n</ul>\n<h3 id=\"4-LinkedList集合（List子类）\"><a href=\"#4-LinkedList集合（List子类）\" class=\"headerlink\" title=\"4. LinkedList集合（List子类）\"></a>4. LinkedList集合（List子类）</h3><ul>\n<li>数据存储的结构是链表结构。元素增删快，查询慢。</li>\n<li>里边包含了大量操作首尾元素的方法。</li>\n</ul>\n<ul>\n<li><code>public void addFirst(E e)</code>：将指定元素插入此列表的开头。</li>\n<li><code>public void addLast(E e)</code>：将指定元素添加到此列表的结尾。</li>\n<li><code>public void push(E e)</code>：将元素推入此列表所表示的堆栈。</li>\n<li><code>public E getFirst()</code>：返回此列表的第一个元素。</li>\n<li><code>public E getLast()</code>：返回此列表的最后一个元素。</li>\n<li><code>public E removeFirst()</code>：移除并返回此列表的第一个元素。</li>\n<li><code>public E removeLast()</code>：移除并返回此列表的最后一个元素。</li>\n<li><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</li>\n<li><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</li>\n</ul>\n<blockquote>\n<p>tips：使用LinkedList集合特有的方法,不能使用多态。</p>\n</blockquote>\n<h2 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h2><p>同样继承自Collection接口，与Collection接口中的方法基本一致。</p>\n<h3 id=\"1-Set接口特点\"><a href=\"#1-Set接口特点\" class=\"headerlink\" title=\"1. Set接口特点\"></a>1. Set接口特点</h3><ul>\n<li>不允许存储重复的元素。</li>\n<li>没有索引，没有带索引的方法，也不能用普通的for循环遍历。</li>\n</ul>\n<h3 id=\"2-HashSet（Set实现）\"><a href=\"#2-HashSet（Set实现）\" class=\"headerlink\" title=\"2. HashSet（Set实现）\"></a>2. HashSet（Set实现）</h3><ul>\n<li>根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于hashCode与equals方法。</li>\n</ul>\n<blockquote>\n<p>tips：必须重写hashCode和equals方法。</p>\n</blockquote>\n<h3 id=\"3-LinkedHashSet（Set实现）\"><a href=\"#3-LinkedHashSet（Set实现）\" class=\"headerlink\" title=\"3. LinkedHashSet（Set实现）\"></a>3. LinkedHashSet（Set实现）</h3><ul>\n<li>数据为链表+哈希表组合的存储结构。</li>\n<li>元素放入取出是有顺序的。</li>\n</ul>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>当方法参数列表已经确定，但是参数个数不确定时，可以用可变参数。格式为：</p>\n<pre><code class=\"java\">修饰符 返回值类型 method_name(type ...var){\n    方法体\n}</code></pre>\n<blockquote>\n<ul>\n<li>一个方法的参数列表，只能有一个参数变量。</li>\n<li>如果方法的参数有多个，那么可变参数必须写在参数列表末尾。</li>\n</ul>\n</blockquote>\n<h2 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h2><h3 id=\"1-Map集合特点\"><a href=\"#1-Map集合特点\" class=\"headerlink\" title=\"1. Map集合特点\"></a>1. Map集合特点</h3><ul>\n<li>Map集合是一个双列集合,一个元素包含两个值(一个key,一个value)。</li>\n<li>Map集合中的元素,key和value的数据类型可以相同,也可以不同。</li>\n<li>Map集合中的元素,key是不允许重复的,value是可以重复的。</li>\n<li>Map集合中的元素,key和value是一一对应。</li>\n</ul>\n<h3 id=\"2-HsahMap（Map实现）\"><a href=\"#2-HsahMap（Map实现）\" class=\"headerlink\" title=\"2. HsahMap（Map实现）\"></a>2. HsahMap（Map实现）</h3><ul>\n<li>HashMap集合底层是哈希表:查询的速度特别的快。</li>\n<li>hashMap集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致。</li>\n</ul>\n<h3 id=\"3-LinkedHashMap（HsahMap实现）\"><a href=\"#3-LinkedHashMap（HsahMap实现）\" class=\"headerlink\" title=\"3. LinkedHashMap（HsahMap实现）\"></a>3. LinkedHashMap（HsahMap实现）</h3><ul>\n<li>LinkedHashMap集合底层是哈希表+链表(保证迭代的顺序)。</li>\n<li>LinkedHashMap集合是一个有序的集合,存储元素和取出元素的顺序是一致的。</li>\n</ul>\n<h2 id=\"JDK9新特性\"><a href=\"#JDK9新特性\" class=\"headerlink\" title=\"JDK9新特性\"></a>JDK9新特性</h2><p>List、Set、Map接口:里边增加了一个静态的方法of,可以给集合一次性添加多个元素。</p>\n<ul>\n<li><code>static &lt;E&gt; List&lt;E&gt; of​(E... elements)</code>：一次性添加多个元素。</li>\n</ul>\n<blockquote>\n<ul>\n<li>of方法只适用于List接口，Set接口，Map接口，不适用于接接口的实现类。</li>\n<li>of方法的返回值是一个不能改变的集合，集合不能再使用add，put方法添加元素，否则会抛出异常。</li>\n<li>Set接口和Map接口在调用of方法的时候，不能有重复的元素，否则会抛出异常。</li>\n</ul>\n</blockquote>\n"},{"title":"Java基础③","img":"/medias/featureimages/6.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-01T11:50:44.000Z","password":null,"summary":"总结IO流等相关的知识🤪","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=555142&auto=1&height=66\"></iframe></div>\n\n>主要总结IO流等相关的知识🤪\n\n# 主要内容\n* IO流\n* 字节流\n* 字符流\n* 缓冲流\n* 转换流\n* 序列化流\n* 打印流\n\n# 第一章 IO概述\n\n## 1.1 什么是IO\n\n生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了`ctrl+s` ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。\n\n我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为`输入input` 和`输出output` ，即流向内存是输入流，流出内存的输出流。\n\nJava中I/O操作主要是指使用`java.io`包下的内容，进行输入、输出操作。**输入**也叫做**读取**数据，**输出**也叫做作**写出**数据。\n\n## 1.2 IO的分类\n\n根据数据的流向分为：**输入流**和**输出流**。\n\n* **输入流** ：把数据从`其他设备`上读取到`内存`中的流。 \n* **输出流** ：把数据从`内存` 中写出到`其他设备`上的流。\n\n格局数据的类型分为：**字节流**和**字符流**。\n\n* **字节流** ：以字节为单位，读写数据的流。\n* **字符流** ：以字符为单位，读写数据的流。\n\n## 1.3 IO的流向说明图解\n\n![](1_io.jpg)\n\n## 1.4 顶级父类们\n\n|         |          **输入流**           |             输出流             |\n| :-----: | :------------------------: | :-------------------------: |\n| **字节流** | 字节输入流<br />**InputStream** | 字节输出流<br />**OutputStream** |\n| **字符流** |   字符输入流<br />**Reader**    |    字符输出流<br />**Writer**    |\n\n# 第二章 字节流\n\n## 2.1 一切皆为字节\n\n一切文件数据（文本、图片、视频等）在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。\n\n## 2.2 字节输出流【OutputStream】\n\n`java.io.OutputStream `抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n* `public void close()` ：关闭此输出流并释放与此流相关联的任何系统资源。  \n* `public void flush() ` ：刷新此输出流并强制任何缓冲的输出字节被写出。  \n* `public void write(byte[] b)`：将 b.length字节从指定的字节数组写入此输出流。  \n* `public void write(byte[] b, int off, int len)` ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  \n* `public abstract void write(int b)` ：将指定的字节输出流。\n\n> 小贴士：\n>\n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n## 2.3 FileOutputStream类\n\n`OutputStream`有很多子类，我们从最简单的一个子类开始。\n\n`java.io.FileOutputStream `类是文件输出流，用于将数据写出到文件。\n\n### 构造方法\n\n* `public FileOutputStream(File file)`：创建文件输出流以写入由指定的 File对象表示的文件。 \n* `public FileOutputStream(String name)`： 创建文件输出流以指定的名称写入文件。  \n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。\n\n* 构造举例，代码如下：\n\n```java\npublic class FileOutputStreamConstructor throws IOException {\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileOutputStream fos = new FileOutputStream(file);\n      \n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"b.txt\");\n    }\n}\n```\n\n### 写出字节数据\n\n1. **写出字节**：`write(int b)` 方法，每次可以写出一个字节数据，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");     \n      \t// 写出数据\n      \tfos.write(97); // 写出第1个字节\n      \tfos.write(98); // 写出第2个字节\n      \tfos.write(99); // 写出第3个字节\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\nabc\n```\n\n> 小贴士：\n>\n> 1. 虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。\n> 2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n2. **写出字节数组**：`write(byte[] b)`，每次可以写出数组中的数据，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = \"程序员\".getBytes();\n      \t// 写出字节数组数据\n      \tfos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\n程序员\n```\n\n3. **写出指定长度字节数组**：`write(byte[] b, int off, int len)` ,每次写出从off索引开始，len个字节，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = \"abcde\".getBytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b,2,2);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\ncd\n```\n\n### 数据追加续写\n\n经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？\n\n- `public FileOutputStream(File file, boolean append)`： 创建文件输出流以写入由指定的 File对象表示的文件。  \n- `public FileOutputStream(String name, boolean append)`： 创建文件输出流以指定的名称写入文件。  \n\n这两个构造方法，参数中都需要传入一个boolean类型的值，`true` 表示追加数据，`false` 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\"，true);     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = \"abcde\".getBytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n文件操作前：cd\n文件操作后：cdabcde\n```\n\n### 写出换行\n\nWindows系统里，换行符号是`\\r\\n` 。代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");  \n      \t// 定义字节数组\n      \tbyte[] words = {97,98,99,100,101};\n      \t// 遍历数组\n        for (int i = 0; i < words.length; i++) {\n          \t// 写出一个字节\n            fos.write(words[i]);\n          \t// 写出一个换行, 换行符号转成数组写出\n            fos.write(\"\\r\\n\".getBytes());\n        }\n      \t// 关闭资源\n        fos.close();\n    }\n}\n\n输出结果：\na\nb\nc\nd\ne\n```\n\n> * 回车符`\\r`和换行符`\\n` ：\n>   * 回车符：回到一行的开头（return）。\n>   * 换行符：下一行（newline）。\n> * 系统中的换行：\n>   * Windows系统里，每行结尾是 `回车+换行` ，即`\\r\\n`；\n>   * Unix系统里，每行结尾只有 `换行` ，即`\\n`；\n>   * Mac系统里，每行结尾是 `回车` ，即`\\r`。从 Mac OS X开始与Linux统一。\n## 2.4 字节输入流【InputStream】\n\n`java.io.InputStream `抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。\n\n- `public void close()` ：关闭此输入流并释放与此流相关联的任何系统资源。    \n- `public abstract int read()`： 从输入流读取数据的下一个字节。 \n- `public int read(byte[] b)`： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。\n\n> 小贴士：\n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n## 2.5 FileInputStream类\n\n`java.io.FileInputStream `类是文件输入流，从文件中读取字节。\n\n### 构造方法\n\n* `FileInputStream(File file)`： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 \n* `FileInputStream(String name)`： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  \n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出`FileNotFoundException` 。\n\n- 构造举例，代码如下：\n\n```java\npublic class FileInputStreamConstructor throws IOException{\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileInputStream fos = new FileInputStream(file);\n      \n        // 使用文件名称创建流对象\n        FileInputStream fos = new FileInputStream(\"b.txt\");\n    }\n}\n```\n\n### 读取字节数据\n\n1. **读取字节**：`read`方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回`-1`，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象\n       \tFileInputStream fis = new FileInputStream(\"read.txt\");\n      \t// 读取数据，返回一个字节\n        int read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n      \t// 读取到末尾,返回-1\n       \tread = fis.read();\n        System.out.println( read);\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n-1\n```\n\n循环改进读取方式，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象\n       \tFileInputStream fis = new FileInputStream(\"read.txt\");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fis.read())!=-1) {\n            System.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n```\n\n> 小贴士：\n>\n> 1. 虽然读取了一个字节，但是会自动提升为int类型。\n> 2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n2. **使用字节数组读取**：`read(byte[] b)`，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回`-1` ，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象.\n       \tFileInputStream fis = new FileInputStream(\"read.txt\"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组变成字符串打印\n            System.out.println(new String(b));\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ned\n```\n\n错误数据`d`，是由于最后一次读取时，只读取一个字节`e`，数组中，上次读取的数据没有被完全替换，所以要通过`len` ，获取有效的字节，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象.\n       \tFileInputStream fis = new FileInputStream(\"read.txt\"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组的有效字节部分，变成字符串打印\n            System.out.println(new String(b，0，len));//  len 每次读取的有效字节个数\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ne\n```\n\n> 小贴士：\n>\n> 使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。\n\n## 2.6 字节流练习：图片复制\n\n### 复制原理图解\n\n![](2_copy.jpg)\n### 案例实现\n\n复制图片文件，代码使用演示：\n\n```java\npublic class Copy {\n    public static void main(String[] args) throws IOException {\n        // 1.创建流对象\n        // 1.1 指定数据源\n        FileInputStream fis = new FileInputStream(\"D:\\\\test.jpg\");\n        // 1.2 指定目的地\n        FileOutputStream fos = new FileOutputStream(\"test_copy.jpg\");\n\n        // 2.读写数据\n        // 2.1 定义数组\n        byte[] b = new byte[1024];\n        // 2.2 定义长度\n        int len;\n        // 2.3 循环读取\n        while ((len = fis.read(b))!=-1) {\n            // 2.4 写出数据\n            fos.write(b, 0 , len);\n        }\n\n        // 3.关闭资源\n        fos.close();\n        fis.close();\n    }\n}\n```\n\n> 小贴士：\n>\n> 流的关闭原则：先开后关，后开先关。\n\n# 第三章 字符流\n\n当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。\n\n## 3.1 字符输入流【Reader】\n\n`java.io.Reader`抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。\n\n- `public void close()` ：关闭此流并释放与此流相关联的任何系统资源。    \n- `public int read()`： 从输入流读取一个字符。 \n- `public int read(char[] cbuf)`： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。\n\n## 3.2 FileReader类  \n\n`java.io.FileReader `类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n> 小贴士：\n>\n> 1. 字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。\n>\n>    idea中UTF-8\n>\n> 2. 字节缓冲区：一个字节数组，用来临时存储字节数据。\n\n### 构造方法\n\n- `FileReader(File file)`： 创建一个新的 FileReader ，给定要读取的File对象。   \n- `FileReader(String fileName)`： 创建一个新的 FileReader ，给定要读取的文件的名称。  \n\n当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。\n\n- 构造举例，代码如下：\n\n```java\npublic class FileReaderConstructor throws IOException{\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileReader fr = new FileReader(file);\n      \n        // 使用文件名称创建流对象\n        FileReader fr = new FileReader(\"b.txt\");\n    }\n}\n```\n\n### 读取字符数据\n\n1. **读取字符**：`read`方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回`-1`，循环读取，代码使用演示：\n```java\npublic class FRRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader(\"read.txt\");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fr.read())!=-1) {\n            System.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n程\n序\n员\n```\n\n> 小贴士：虽然读取了一个字符，但是会自动提升为int类型。\n\n2. **使用字符数组读取**：`read(char[] cbuf)`，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回`-1` ，代码使用演示：\n\n```java\npublic class FRRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader(\"read.txt\");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n         char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf));\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n程序\n员序\n```\n\n获取有效的字符改进，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader(\"read.txt\");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n        char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf,0,len));\n        }\n    \t// 关闭资源\n        fr.close();\n    }\n}\n\n输出结果：\n程序\n员\n```\n## 3.3 字符输出流【Writer】\n\n`java.io.Writer `抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n- `void write(int c)` 写入单个字符。\n- `void write(char[] cbuf) `写入字符数组。 \n- `abstract  void write(char[] cbuf, int off, int len) `写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 \n- `void write(String str) `写入字符串。 \n- `void write(String str, int off, int len)` 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。\n- `void flush() `刷新该流的缓冲。  \n- `void close()` 关闭此流，但要先刷新它。 \n\n## 3.4 FileWriter类\n\n`java.io.FileWriter `类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n### 构造方法\n\n- `FileWriter(File file)`： 创建一个新的 FileWriter，给定要读取的File对象。   \n- `FileWriter(String fileName)`： 创建一个新的 FileWriter，给定要读取的文件的名称。  \n\n当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。\n\n- 构造举例，代码如下：\n\n```java\npublic class FileWriterConstructor {\n    public static void main(String[] args) throws IOException {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileWriter fw = new FileWriter(file);\n      \n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"b.txt\");\n    }\n}\n```\n\n### 基本写出数据\n\n**写出字符**：`write(int b)` 方法，每次可以写出一个字符数据，代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");     \n      \t// 写出数据\n      \tfw.write(97); // 写出第1个字符\n      \tfw.write('b'); // 写出第2个字符\n      \tfw.write('C'); // 写出第3个字符\n      \tfw.write(30000); // 写出第4个字符，中文编码表中30000对应一个汉字。\n      \n      \t/*\n        【注意】关闭资源时,与FileOutputStream不同。\n      \t 如果不关闭,数据只是保存到缓冲区，并未保存到文件。\n        */\n        // fw.close();\n    }\n}\n输出结果：\nabC田\n```\n\n> 小贴士：\n>\n> 1. 虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。\n> 2. 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。\n\n### 关闭和刷新\n\n因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要`flush` 方法了。\n\n* `flush` ：刷新缓冲区，流对象可以继续使用。\n* `close `:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。\n\n代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");\n        // 写出数据，通过flush\n        fw.write('刷'); // 写出第1个字符\n        fw.flush();\n        fw.write('新'); // 继续写出第2个字符，写出成功\n        fw.flush();\n      \n      \t// 写出数据，通过close\n        fw.write('关'); // 写出第1个字符\n        fw.close();\n        fw.write('闭'); // 继续写出第2个字符,【报错】java.io.IOException: Stream closed\n        fw.close();\n    }\n}\n```\n\n> 小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。\n\n### 写出其他数据\n\n1. **写出字符数组** ：`write(char[] cbuf)` 和 `write(char[] cbuf, int off, int len)` ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");     \n      \t// 字符串转换为字节数组\n      \tchar[] chars = \"Java程序员\".toCharArray();\n      \n      \t// 写出字符数组\n      \tfw.write(chars); // Java程序员\n        \n\t\t// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。\n        fw.write(b,2,2); // 程序\n      \n      \t// 关闭资源\n        fos.close();\n    }\n}\n```\n\n2. **写出字符串**：`write(String str)` 和 `write(String str, int off, int len)` ，每次可以写出字符串中的数据，更为方便，代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");     \n      \t// 字符串\n      \tString msg = \"Java程序员\";\n      \n      \t// 写出字符数组\n      \tfw.write(msg); //Java程序员\n      \n\t\t// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。\n        fw.write(msg,2,2);\t// 程序\n      \t\n        // 关闭资源\n        fos.close();\n    }\n}\n```\n\n3. **续写和换行**：操作类似于FileOutputStream。\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象，可以续写数据\n        FileWriter fw = new FileWriter(\"fw.txt\"，true);     \n      \t// 写出字符串\n        fw.write(\"Java\");\n      \t// 写出换行\n      \tfw.write(\"\\r\\n\");\n      \t// 写出字符串\n  \t\tfw.write(\"程序员\");\n      \t// 关闭资源\n        fw.close();\n    }\n}\n输出结果:\nJava\n程序员\n```\n\n> 小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。\n>\n> 当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流\n\n# 第四章 缓冲流\n\n学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。\n\n## 4.1 概述\n\n缓冲流,也叫高效流，是对4个基本的`FileXxx` 流的增强，所以也是4个流，按照数据类型分类：\n\n* **字节缓冲流**：`BufferedInputStream`，`BufferedOutputStream` \n* **字符缓冲流**：`BufferedReader`，`BufferedWriter`\n\n缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。\n\n## 4.2 字节缓冲流\n\n### 构造方法\n\n* `public BufferedInputStream(InputStream in)` ：创建一个 新的缓冲输入流。 \n* `public BufferedOutputStream(OutputStream out)`： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n```java\n// 创建字节缓冲输入流\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"bis.txt\"));\n// 创建字节缓冲输出流\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"bos.txt\"));\n```\n\n### 效率测试\n\n查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。\n\n1. 基本流，代码如下：\n\n```java\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n      \tlong start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n        \tFileInputStream fis = new FileInputStream(\"jdk9.exe\");\n        \tFileOutputStream fos = new FileOutputStream(\"copy.exe\")\n        ){\n        \t// 读写数据\n            int b;\n            while ((b = fis.read()) != -1) {\n                fos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(\"普通流复制时间:\"+(end - start)+\" 毫秒\");\n    }\n}\n\n十几分钟过去了...\n```\n\n2. 缓冲流，代码如下：\n\n```java\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n      \tlong start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n        \tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"jdk9.exe\"));\n\t     BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"copy.exe\"));\n        ){\n        // 读写数据\n            int b;\n            while ((b = bis.read()) != -1) {\n                bos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(\"缓冲流复制时间:\"+(end - start)+\" 毫秒\");\n    }\n}\n\n缓冲流复制时间:8016 毫秒\n```\n如何更快呢？\n\n使用数组的方式，代码如下：\n\n```java\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n      \t// 记录开始时间\n        long start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n\t\t\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"jdk9.exe\"));\n\t\t BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"copy.exe\"));\n        ){\n          \t// 读写数据\n            int len;\n            byte[] bytes = new byte[8*1024];\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0 , len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(\"缓冲流使用数组复制时间:\"+(end - start)+\" 毫秒\");\n    }\n}\n缓冲流使用数组复制时间:666 毫秒\n```\n\n## 4.3 字符缓冲流\n\n### 构造方法\n\n* `public BufferedReader(Reader in)` ：创建一个 新的缓冲输入流。 \n* `public BufferedWriter(Writer out)`： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n```java\n// 创建字符缓冲输入流\nBufferedReader br = new BufferedReader(new FileReader(\"br.txt\"));\n// 创建字符缓冲输出流\nBufferedWriter bw = new BufferedWriter(new FileWriter(\"bw.txt\"));\n```\n\n### 特有方法\n\n字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。\n\n* BufferedReader：`public String readLine()`: 读一行文字。 \n* BufferedWriter：`public void newLine()`: 写一行行分隔符,由系统属性定义符号。 \n\n`readLine`方法演示，代码如下：\n\n```java\npublic class BufferedReaderDemo {\n    public static void main(String[] args) throws IOException {\n      \t // 创建流对象\n        BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n\t\t// 定义字符串,保存读取的一行文字\n        String line  = null;\n      \t// 循环读取,读取到最后返回null\n        while ((line = br.readLine())!=null) {\n            System.out.print(line);\n            System.out.println(\"------\");\n        }\n\t\t// 释放资源\n        br.close();\n    }\n}\n```\n\n`newLine`方法演示，代码如下：\n\n```java\npublic class BufferedWriterDemo throws IOException {\n    public static void main(String[] args) throws IOException  {\n      \t// 创建流对象\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\"));\n      \t// 写出数据\n        bw.write(\"Java\");\n      \t// 写出换行\n        bw.newLine();\n        bw.write(\"程序\");\n        bw.newLine();\n        bw.write(\"员\");\n        bw.newLine();\n\t\t// 释放资源\n        bw.close();\n    }\n}\n输出效果:\nJava\n程序\n员\n```\n\n# 第五章 转换流\n\n## 5.1 字符编码和字符集\n\n### 字符编码\n\n计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为**编码** 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为**解码** 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。\n\n编码:字符（能看懂的）-->字节（看不懂的）\n\n解码:字节（看不懂的）-->字符（能看懂的）\n\n* **字符编码`Character Encoding`** : 就是一套自然语言的字符与二进制数之间的对应规则。\n\n* **编码表**:生活中文字和计算机中二进制的对应规则\n\n### 字符集\n\n* **字符集 `Charset`**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。\n\n计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。![](1_charset.jpg)\n\n可见，当指定了**编码**，它所对应的**字符集**自然就指定了，所以**编码**才是我们最终要关心的。\n\n* **ASCII字符集** ：\n  * ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。\n  * 基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。\n* **ISO-8859-1字符集**：\n  * 拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。\n  * ISO-8859-1使用单字节编码，兼容ASCII编码。\n* **GBxxx字符集**：\n  * GB就是国标的意思，是为了显示中文而设计的一套字符集。\n  * **GB2312**：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了。\n  * **GBK**：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。\n  * **GB18030**：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。\n* **Unicode字符集** ：\n  * Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。\n  * 它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。\n  * UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：\n    1. 128个US-ASCII字符，只需一个字节编码。\n    2. 拉丁文等字符，需要二个字节编码。 \n    3. 大部分常用字（含中文），使用三个字节编码。\n    4. 其他极少使用的Unicode辅助字符，使用四字节编码。\n\n## 5.2 编码引出的问题\n\n在IDEA中，使用`FileReader` 读取项目中的文本文件。由于IDEA的设置，都是默认的`UTF-8`编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。\n\n```java\npublic class ReaderDemo {\n    public static void main(String[] args) throws IOException {\n        FileReader fileReader = new FileReader(\"E:\\\\File_GBK.txt\");\n        int read;\n        while ((read = fileReader.read()) != -1) {\n            System.out.print((char)read);\n        }\n        fileReader.close();\n    }\n}\n输出结果：\n���\n```\n\n那么如何读取GBK编码的文件呢？ \n\n## 5.3 InputStreamReader类  \n\n转换流`java.io.InputStreamReader`，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 \n\n### 构造方法\n\n* `InputStreamReader(InputStream in)`: 创建一个使用默认字符集的字符流。 \n* `InputStreamReader(InputStream in, String charsetName)`: 创建一个指定字符集的字符流。\n\n构造举例，代码如下： \n\n```java\nInputStreamReader isr = new InputStreamReader(new FileInputStream(\"in.txt\"));\nInputStreamReader isr2 = new InputStreamReader(new FileInputStream(\"in.txt\") , \"GBK\");\n```\n\n### 指定编码读取\n\n```java\npublic class ReaderDemo2 {\n    public static void main(String[] args) throws IOException {\n      \t// 定义文件路径,文件为gbk编码\n        String FileName = \"E:\\\\file_gbk.txt\";\n      \t// 创建流对象,默认UTF8编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(FileName));\n      \t// 创建流对象,指定GBK编码\n        InputStreamReader isr2 = new InputStreamReader(new FileInputStream(FileName) , \"GBK\");\n\t\t// 定义变量,保存字符\n        int read;\n      \t// 使用默认编码字符流读取,乱码\n        while ((read = isr.read()) != -1) {\n            System.out.print((char)read); // ��Һ�\n        }\n        isr.close();\n      \n      \t// 使用指定编码字符流读取,正常解析\n        while ((read = isr2.read()) != -1) {\n            System.out.print((char)read);// 大家好\n        }\n        isr2.close();\n    }\n}\n```\n\n## 5.4 OutputStreamWriter类\n\n转换流`java.io.OutputStreamWriter` ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 \n\n### 构造方法\n\n- `OutputStreamWriter(OutputStream in)`: 创建一个使用默认字符集的字符流。 \n- `OutputStreamWriter(OutputStream in, String charsetName)`: 创建一个指定字符集的字符流。\n\n构造举例，代码如下： \n\n```java\nOutputStreamWriter isr = new OutputStreamWriter(new FileOutputStream(\"out.txt\"));\nOutputStreamWriter isr2 = new OutputStreamWriter(new FileOutputStream(\"out.txt\") , \"GBK\");\n```\n\n### 指定编码写出\n\n```java\npublic class OutputDemo {\n    public static void main(String[] args) throws IOException {\n      \t// 定义文件路径\n        String FileName = \"E:\\\\out.txt\";\n      \t// 创建流对象,默认UTF8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(FileName));\n        // 写出数据\n      \tosw.write(\"你好\"); // 保存为6个字节\n        osw.close();\n      \t\n\t\t// 定义文件路径\n\t\tString FileName2 = \"E:\\\\out2.txt\";\n     \t// 创建流对象,指定GBK编码\n        OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream(FileName2),\"GBK\");\n        // 写出数据\n      \tosw2.write(\"你好\");// 保存为4个字节\n        osw2.close();\n    }\n}\n```\n\n### 转换流理解图解\n\n**转换流是字节与字符间的桥梁！**![](2_zhuanhuan.jpg)\n## 5.5 练习：转换文件编码\n\n将GBK编码的文本文件，转换为UTF-8编码的文本文件。\n\n### 案例分析\n\n1. 指定GBK编码的转换流，读取文本文件。\n2. 使用UTF-8编码的转换流，写出文本文件。\n\n### 案例实现\n\n```java\npublic class TransDemo {\n   public static void main(String[] args) {      \n    \t// 1.定义文件路径\n     \tString srcFile = \"file_gbk.txt\";\n        String destFile = \"file_utf8.txt\";\n\t\t// 2.创建流对象\n    \t// 2.1 转换输入流,指定GBK编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(srcFile) , \"GBK\");\n    \t// 2.2 转换输出流,默认utf8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile));\n\t\t// 3.读写数据\n    \t// 3.1 定义数组\n        char[] cbuf = new char[1024];\n    \t// 3.2 定义长度\n        int len;\n    \t// 3.3 循环读取\n        while ((len = isr.read(cbuf))!=-1) {\n            // 循环写出\n          \tosw.write(cbuf,0,len);\n        }\n    \t// 4.释放资源\n        osw.close();\n        isr.close();\n  \t}\n}\n```\n\n# 第六章 序列化\n\n## 6.1 概述\n\nJava 提供了一种对象**序列化**的机制。用一个字节序列可以表示一个对象，该字节序列包含该`对象的数据`、`对象的类型`和`对象中存储的属性`等信息。字节序列写出到文件之后，相当于文件中**持久保存**了一个对象的信息。 \n\n反之，该字节序列还可以从文件中读取回来，重构对象，对它进行**反序列化**。`对象的数据`、`对象的类型`和`对象中存储的数据`信息，都可以用来在内存中创建对象。看图理解序列化： ![](3_xuliehua.jpg)\n\n## 6.2 ObjectOutputStream类\n\n`java.io.ObjectOutputStream ` 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。\n\n### 构造方法\n\n* `public ObjectOutputStream(OutputStream out) `： 创建一个指定OutputStream的ObjectOutputStream。\n\n构造举例，代码如下：  \n\n```java\nFileOutputStream fileOut = new FileOutputStream(\"employee.txt\");\nObjectOutputStream out = new ObjectOutputStream(fileOut);\n```\n\n### 序列化操作\n\n1. 一个对象要想序列化，必须满足两个条件:\n\n* 该类必须实现`java.io.Serializable ` 接口，`Serializable` 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出`NotSerializableException` 。\n* 该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用`transient` 关键字修饰。\n\n```java\npublic class Employee implements java.io.Serializable {\n    public String name;\n    public String address;\n    public transient int age; // transient瞬态修饰成员,不会被序列化\n    public void addressCheck() {\n      \tSystem.out.println(\"Address  check : \" + name + \" -- \" + address);\n    }\n}\n```\n\n2.写出对象方法\n\n* `public final void writeObject (Object obj)` : 将指定的对象写出。\n\n```java\npublic class SerializeDemo{\n   \tpublic static void main(String [] args)   {\n    \tEmployee e = new Employee();\n    \te.name = \"zhangsan\";\n    \te.address = \"beiqinglu\";\n    \te.age = 20; \n    \ttry {\n      \t\t// 创建序列化流对象\n          ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"employee.txt\"));\n        \t// 写出对象\n        \tout.writeObject(e);\n        \t// 释放资源\n        \tout.close();\n        \tfileOut.close();\n        \tSystem.out.println(\"Serialized data is saved\"); // 姓名，地址被序列化，年龄没有被序列化。\n        } catch(IOException i)   {\n            i.printStackTrace();\n        }\n   \t}\n}\n输出结果：\nSerialized data is saved\n```\n\n## 6.3 ObjectInputStream类\n\nObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 \n\n### 构造方法\n\n* `public ObjectInputStream(InputStream in) `： 创建一个指定InputStream的ObjectInputStream。\n\n### 反序列化操作1\n\n如果能找到一个对象的class文件，我们可以进行反序列化操作，调用`ObjectInputStream`读取对象的方法：\n\n- `public final Object readObject ()` : 读取一个对象。\n\n```java\npublic class DeserializeDemo {\n   public static void main(String [] args)   {\n        Employee e = null;\n        try {\t\t\n             // 创建反序列化流\n             FileInputStream fileIn = new FileInputStream(\"employee.txt\");\n             ObjectInputStream in = new ObjectInputStream(fileIn);\n             // 读取一个对象\n             e = (Employee) in.readObject();\n             // 释放资源\n             in.close();\n             fileIn.close();\n        }catch(IOException i) {\n             // 捕获其他异常\n             i.printStackTrace();\n             return;\n        }catch(ClassNotFoundException c)  {\n        \t// 捕获类找不到异常\n             System.out.println(\"Employee class not found\");\n             c.printStackTrace();\n             return;\n        }\n        // 无异常,直接打印输出\n        System.out.println(\"Name: \" + e.name);\t// zhangsan\n        System.out.println(\"Address: \" + e.address); // beiqinglu\n        System.out.println(\"age: \" + e.age); // 0\n    }\n}\n```\n\n**对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 `ClassNotFoundException` 异常。**  \n\n### **反序列化操作2**\n\n**另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个`InvalidClassException`异常。**发生这个异常的原因如下：\n\n* 该类的序列版本号与从流中读取的类描述符的版本号不匹配 \n* 该类包含未知数据类型 \n* 该类没有可访问的无参数构造方法 \n\n`Serializable` 接口给需要序列化的类，提供了一个序列版本号。`serialVersionUID` 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。\n\n```java\npublic class Employee implements java.io.Serializable {\n     // 加入序列版本号\n     private static final long serialVersionUID = 1L;\n     public String name;\n     public String address;\n     // 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.\n     public int eid; \n\n     public void addressCheck() {\n         System.out.println(\"Address  check : \" + name + \" -- \" + address);\n     }\n}\n```\n\n\n\n## 6.4 练习：序列化集合\n\n1. 将存有多个自定义对象的集合序列化操作，保存到`list.txt`文件中。\n2. 反序列化`list.txt` ，并遍历集合，打印对象信息。\n\n### 案例分析\n\n1. 把若干学生对象 ，保存到集合中。\n2. 把集合序列化。\n3. 反序列化读取时，只需要读取一次，转换为集合类型。\n4. 遍历集合，可以打印所有的学生信息\n\n### 案例实现\n\n```java\npublic class SerTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 创建 学生对象\n\t\tStudent student = new Student(\"老王\", \"laow\");\n\t\tStudent student2 = new Student(\"老张\", \"laoz\");\n\t\tStudent student3 = new Student(\"老李\", \"laol\");\n\n\t\tArrayList<Student> arrayList = new ArrayList<>();\n\t\tarrayList.add(student);\n\t\tarrayList.add(student2);\n\t\tarrayList.add(student3);\n\t\t// 序列化操作\n\t\t// serializ(arrayList);\n\t\t\n\t\t// 反序列化  \n\t\tObjectInputStream ois  = new ObjectInputStream(new FileInputStream(\"list.txt\"));\n\t\t// 读取对象,强转为ArrayList类型\n\t\tArrayList<Student> list  = (ArrayList<Student>)ois.readObject();\n\t\t\n      \tfor (int i = 0; i < list.size(); i++ ){\n          \tStudent s = list.get(i);\n        \tSystem.out.println(s.getName()+\"--\"+ s.getPwd());\n      \t}\n\t}\n\n\tprivate static void serializ(ArrayList<Student> arrayList) throws Exception {\n\t\t// 创建 序列化流 \n\t\tObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"list.txt\"));\n\t\t// 写出对象\n\t\toos.writeObject(arrayList);\n\t\t// 释放资源\n\t\toos.close();\n\t}\n}\n```\n\n#  第七章 打印流\n\n## 7.1 概述\n\n平时我们在控制台打印输出，是调用`print`方法和`println`方法完成的，这两个方法都来自于`java.io.PrintStream`类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。\n\n## 7.2 PrintStream类\n\n### 构造方法\n\n* `public PrintStream(String fileName)  `： 使用指定的文件名创建一个新的打印流。\n\n构造举例，代码如下：  \n\n```java\nPrintStream ps = new PrintStream(\"ps.txt\")；\n```\n\n### 改变打印流向\n\n`System.out`就是`PrintStream`类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个\"小把戏\"，改变它的流向。\n\n```java\npublic class PrintDemo {\n    public static void main(String[] args) throws IOException {\n\t\t// 调用系统的打印流,控制台直接输出97\n        System.out.println(97);\n      \n\t\t// 创建打印流,指定文件的名称\n        PrintStream ps = new PrintStream(\"ps.txt\");\n      \t\n      \t// 设置系统的打印流流向,输出到ps.txt\n        System.setOut(ps);\n      \t// 调用系统的打印流,ps.txt中输出97\n        System.out.println(97);\n    }\n}\n```","source":"_posts/Java3.md","raw":"---\ntitle: Java基础③\nimg: /medias/featureimages/6.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-01 19:50:44\npassword:\nsummary: 总结IO流等相关的知识🤪\ntags:\n- Java\n- 语言\ncategories:\n- Java\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=555142&auto=1&height=66\"></iframe></div>\n\n>主要总结IO流等相关的知识🤪\n\n# 主要内容\n* IO流\n* 字节流\n* 字符流\n* 缓冲流\n* 转换流\n* 序列化流\n* 打印流\n\n# 第一章 IO概述\n\n## 1.1 什么是IO\n\n生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了`ctrl+s` ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。\n\n我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为`输入input` 和`输出output` ，即流向内存是输入流，流出内存的输出流。\n\nJava中I/O操作主要是指使用`java.io`包下的内容，进行输入、输出操作。**输入**也叫做**读取**数据，**输出**也叫做作**写出**数据。\n\n## 1.2 IO的分类\n\n根据数据的流向分为：**输入流**和**输出流**。\n\n* **输入流** ：把数据从`其他设备`上读取到`内存`中的流。 \n* **输出流** ：把数据从`内存` 中写出到`其他设备`上的流。\n\n格局数据的类型分为：**字节流**和**字符流**。\n\n* **字节流** ：以字节为单位，读写数据的流。\n* **字符流** ：以字符为单位，读写数据的流。\n\n## 1.3 IO的流向说明图解\n\n![](1_io.jpg)\n\n## 1.4 顶级父类们\n\n|         |          **输入流**           |             输出流             |\n| :-----: | :------------------------: | :-------------------------: |\n| **字节流** | 字节输入流<br />**InputStream** | 字节输出流<br />**OutputStream** |\n| **字符流** |   字符输入流<br />**Reader**    |    字符输出流<br />**Writer**    |\n\n# 第二章 字节流\n\n## 2.1 一切皆为字节\n\n一切文件数据（文本、图片、视频等）在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。\n\n## 2.2 字节输出流【OutputStream】\n\n`java.io.OutputStream `抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n* `public void close()` ：关闭此输出流并释放与此流相关联的任何系统资源。  \n* `public void flush() ` ：刷新此输出流并强制任何缓冲的输出字节被写出。  \n* `public void write(byte[] b)`：将 b.length字节从指定的字节数组写入此输出流。  \n* `public void write(byte[] b, int off, int len)` ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  \n* `public abstract void write(int b)` ：将指定的字节输出流。\n\n> 小贴士：\n>\n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n## 2.3 FileOutputStream类\n\n`OutputStream`有很多子类，我们从最简单的一个子类开始。\n\n`java.io.FileOutputStream `类是文件输出流，用于将数据写出到文件。\n\n### 构造方法\n\n* `public FileOutputStream(File file)`：创建文件输出流以写入由指定的 File对象表示的文件。 \n* `public FileOutputStream(String name)`： 创建文件输出流以指定的名称写入文件。  \n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。\n\n* 构造举例，代码如下：\n\n```java\npublic class FileOutputStreamConstructor throws IOException {\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileOutputStream fos = new FileOutputStream(file);\n      \n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"b.txt\");\n    }\n}\n```\n\n### 写出字节数据\n\n1. **写出字节**：`write(int b)` 方法，每次可以写出一个字节数据，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");     \n      \t// 写出数据\n      \tfos.write(97); // 写出第1个字节\n      \tfos.write(98); // 写出第2个字节\n      \tfos.write(99); // 写出第3个字节\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\nabc\n```\n\n> 小贴士：\n>\n> 1. 虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。\n> 2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n2. **写出字节数组**：`write(byte[] b)`，每次可以写出数组中的数据，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = \"程序员\".getBytes();\n      \t// 写出字节数组数据\n      \tfos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\n程序员\n```\n\n3. **写出指定长度字节数组**：`write(byte[] b, int off, int len)` ,每次写出从off索引开始，len个字节，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = \"abcde\".getBytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b,2,2);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n输出结果：\ncd\n```\n\n### 数据追加续写\n\n经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？\n\n- `public FileOutputStream(File file, boolean append)`： 创建文件输出流以写入由指定的 File对象表示的文件。  \n- `public FileOutputStream(String name, boolean append)`： 创建文件输出流以指定的名称写入文件。  \n\n这两个构造方法，参数中都需要传入一个boolean类型的值，`true` 表示追加数据，`false` 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\"，true);     \n      \t// 字符串转换为字节数组\n      \tbyte[] b = \"abcde\".getBytes();\n\t\t// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b);\n      \t// 关闭资源\n        fos.close();\n    }\n}\n文件操作前：cd\n文件操作后：cdabcde\n```\n\n### 写出换行\n\nWindows系统里，换行符号是`\\r\\n` 。代码使用演示：\n\n```java\npublic class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(\"fos.txt\");  \n      \t// 定义字节数组\n      \tbyte[] words = {97,98,99,100,101};\n      \t// 遍历数组\n        for (int i = 0; i < words.length; i++) {\n          \t// 写出一个字节\n            fos.write(words[i]);\n          \t// 写出一个换行, 换行符号转成数组写出\n            fos.write(\"\\r\\n\".getBytes());\n        }\n      \t// 关闭资源\n        fos.close();\n    }\n}\n\n输出结果：\na\nb\nc\nd\ne\n```\n\n> * 回车符`\\r`和换行符`\\n` ：\n>   * 回车符：回到一行的开头（return）。\n>   * 换行符：下一行（newline）。\n> * 系统中的换行：\n>   * Windows系统里，每行结尾是 `回车+换行` ，即`\\r\\n`；\n>   * Unix系统里，每行结尾只有 `换行` ，即`\\n`；\n>   * Mac系统里，每行结尾是 `回车` ，即`\\r`。从 Mac OS X开始与Linux统一。\n## 2.4 字节输入流【InputStream】\n\n`java.io.InputStream `抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。\n\n- `public void close()` ：关闭此输入流并释放与此流相关联的任何系统资源。    \n- `public abstract int read()`： 从输入流读取数据的下一个字节。 \n- `public int read(byte[] b)`： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。\n\n> 小贴士：\n> close方法，当完成流的操作时，必须调用此方法，释放系统资源。\n\n## 2.5 FileInputStream类\n\n`java.io.FileInputStream `类是文件输入流，从文件中读取字节。\n\n### 构造方法\n\n* `FileInputStream(File file)`： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 \n* `FileInputStream(String name)`： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  \n\n当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出`FileNotFoundException` 。\n\n- 构造举例，代码如下：\n\n```java\npublic class FileInputStreamConstructor throws IOException{\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileInputStream fos = new FileInputStream(file);\n      \n        // 使用文件名称创建流对象\n        FileInputStream fos = new FileInputStream(\"b.txt\");\n    }\n}\n```\n\n### 读取字节数据\n\n1. **读取字节**：`read`方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回`-1`，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象\n       \tFileInputStream fis = new FileInputStream(\"read.txt\");\n      \t// 读取数据，返回一个字节\n        int read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n      \t// 读取到末尾,返回-1\n       \tread = fis.read();\n        System.out.println( read);\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n-1\n```\n\n循环改进读取方式，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象\n       \tFileInputStream fis = new FileInputStream(\"read.txt\");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fis.read())!=-1) {\n            System.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n```\n\n> 小贴士：\n>\n> 1. 虽然读取了一个字节，但是会自动提升为int类型。\n> 2. 流操作完毕后，必须释放系统资源，调用close方法，千万记得。\n\n2. **使用字节数组读取**：`read(byte[] b)`，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回`-1` ，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象.\n       \tFileInputStream fis = new FileInputStream(\"read.txt\"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组变成字符串打印\n            System.out.println(new String(b));\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ned\n```\n\n错误数据`d`，是由于最后一次读取时，只读取一个字节`e`，数组中，上次读取的数据没有被完全替换，所以要通过`len` ，获取有效的字节，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException{\n      \t// 使用文件名称创建流对象.\n       \tFileInputStream fis = new FileInputStream(\"read.txt\"); // 文件中为abcde\n      \t// 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n           \t// 每次读取后,把数组的有效字节部分，变成字符串打印\n            System.out.println(new String(b，0，len));//  len 每次读取的有效字节个数\n        }\n\t\t// 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ne\n```\n\n> 小贴士：\n>\n> 使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。\n\n## 2.6 字节流练习：图片复制\n\n### 复制原理图解\n\n![](2_copy.jpg)\n### 案例实现\n\n复制图片文件，代码使用演示：\n\n```java\npublic class Copy {\n    public static void main(String[] args) throws IOException {\n        // 1.创建流对象\n        // 1.1 指定数据源\n        FileInputStream fis = new FileInputStream(\"D:\\\\test.jpg\");\n        // 1.2 指定目的地\n        FileOutputStream fos = new FileOutputStream(\"test_copy.jpg\");\n\n        // 2.读写数据\n        // 2.1 定义数组\n        byte[] b = new byte[1024];\n        // 2.2 定义长度\n        int len;\n        // 2.3 循环读取\n        while ((len = fis.read(b))!=-1) {\n            // 2.4 写出数据\n            fos.write(b, 0 , len);\n        }\n\n        // 3.关闭资源\n        fos.close();\n        fis.close();\n    }\n}\n```\n\n> 小贴士：\n>\n> 流的关闭原则：先开后关，后开先关。\n\n# 第三章 字符流\n\n当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。\n\n## 3.1 字符输入流【Reader】\n\n`java.io.Reader`抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。\n\n- `public void close()` ：关闭此流并释放与此流相关联的任何系统资源。    \n- `public int read()`： 从输入流读取一个字符。 \n- `public int read(char[] cbuf)`： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。\n\n## 3.2 FileReader类  \n\n`java.io.FileReader `类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n> 小贴士：\n>\n> 1. 字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。\n>\n>    idea中UTF-8\n>\n> 2. 字节缓冲区：一个字节数组，用来临时存储字节数据。\n\n### 构造方法\n\n- `FileReader(File file)`： 创建一个新的 FileReader ，给定要读取的File对象。   \n- `FileReader(String fileName)`： 创建一个新的 FileReader ，给定要读取的文件的名称。  \n\n当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。\n\n- 构造举例，代码如下：\n\n```java\npublic class FileReaderConstructor throws IOException{\n    public static void main(String[] args) {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileReader fr = new FileReader(file);\n      \n        // 使用文件名称创建流对象\n        FileReader fr = new FileReader(\"b.txt\");\n    }\n}\n```\n\n### 读取字符数据\n\n1. **读取字符**：`read`方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回`-1`，循环读取，代码使用演示：\n```java\npublic class FRRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader(\"read.txt\");\n      \t// 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fr.read())!=-1) {\n            System.out.println((char)b);\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n程\n序\n员\n```\n\n> 小贴士：虽然读取了一个字符，但是会自动提升为int类型。\n\n2. **使用字符数组读取**：`read(char[] cbuf)`，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回`-1` ，代码使用演示：\n\n```java\npublic class FRRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader(\"read.txt\");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n         char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf));\n        }\n\t\t// 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n程序\n员序\n```\n\n获取有效的字符改进，代码使用演示：\n\n```java\npublic class FISRead {\n    public static void main(String[] args) throws IOException {\n      \t// 使用文件名称创建流对象\n       \tFileReader fr = new FileReader(\"read.txt\");\n      \t// 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n        char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf,0,len));\n        }\n    \t// 关闭资源\n        fr.close();\n    }\n}\n\n输出结果：\n程序\n员\n```\n## 3.3 字符输出流【Writer】\n\n`java.io.Writer `抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。\n\n- `void write(int c)` 写入单个字符。\n- `void write(char[] cbuf) `写入字符数组。 \n- `abstract  void write(char[] cbuf, int off, int len) `写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 \n- `void write(String str) `写入字符串。 \n- `void write(String str, int off, int len)` 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。\n- `void flush() `刷新该流的缓冲。  \n- `void close()` 关闭此流，但要先刷新它。 \n\n## 3.4 FileWriter类\n\n`java.io.FileWriter `类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。\n\n### 构造方法\n\n- `FileWriter(File file)`： 创建一个新的 FileWriter，给定要读取的File对象。   \n- `FileWriter(String fileName)`： 创建一个新的 FileWriter，给定要读取的文件的名称。  \n\n当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。\n\n- 构造举例，代码如下：\n\n```java\npublic class FileWriterConstructor {\n    public static void main(String[] args) throws IOException {\n   \t \t// 使用File对象创建流对象\n        File file = new File(\"a.txt\");\n        FileWriter fw = new FileWriter(file);\n      \n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"b.txt\");\n    }\n}\n```\n\n### 基本写出数据\n\n**写出字符**：`write(int b)` 方法，每次可以写出一个字符数据，代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");     \n      \t// 写出数据\n      \tfw.write(97); // 写出第1个字符\n      \tfw.write('b'); // 写出第2个字符\n      \tfw.write('C'); // 写出第3个字符\n      \tfw.write(30000); // 写出第4个字符，中文编码表中30000对应一个汉字。\n      \n      \t/*\n        【注意】关闭资源时,与FileOutputStream不同。\n      \t 如果不关闭,数据只是保存到缓冲区，并未保存到文件。\n        */\n        // fw.close();\n    }\n}\n输出结果：\nabC田\n```\n\n> 小贴士：\n>\n> 1. 虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。\n> 2. 未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。\n\n### 关闭和刷新\n\n因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要`flush` 方法了。\n\n* `flush` ：刷新缓冲区，流对象可以继续使用。\n* `close `:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。\n\n代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");\n        // 写出数据，通过flush\n        fw.write('刷'); // 写出第1个字符\n        fw.flush();\n        fw.write('新'); // 继续写出第2个字符，写出成功\n        fw.flush();\n      \n      \t// 写出数据，通过close\n        fw.write('关'); // 写出第1个字符\n        fw.close();\n        fw.write('闭'); // 继续写出第2个字符,【报错】java.io.IOException: Stream closed\n        fw.close();\n    }\n}\n```\n\n> 小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。\n\n### 写出其他数据\n\n1. **写出字符数组** ：`write(char[] cbuf)` 和 `write(char[] cbuf, int off, int len)` ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");     \n      \t// 字符串转换为字节数组\n      \tchar[] chars = \"Java程序员\".toCharArray();\n      \n      \t// 写出字符数组\n      \tfw.write(chars); // Java程序员\n        \n\t\t// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。\n        fw.write(b,2,2); // 程序\n      \n      \t// 关闭资源\n        fos.close();\n    }\n}\n```\n\n2. **写出字符串**：`write(String str)` 和 `write(String str, int off, int len)` ，每次可以写出字符串中的数据，更为方便，代码使用演示：\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(\"fw.txt\");     \n      \t// 字符串\n      \tString msg = \"Java程序员\";\n      \n      \t// 写出字符数组\n      \tfw.write(msg); //Java程序员\n      \n\t\t// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。\n        fw.write(msg,2,2);\t// 程序\n      \t\n        // 关闭资源\n        fos.close();\n    }\n}\n```\n\n3. **续写和换行**：操作类似于FileOutputStream。\n\n```java\npublic class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象，可以续写数据\n        FileWriter fw = new FileWriter(\"fw.txt\"，true);     \n      \t// 写出字符串\n        fw.write(\"Java\");\n      \t// 写出换行\n      \tfw.write(\"\\r\\n\");\n      \t// 写出字符串\n  \t\tfw.write(\"程序员\");\n      \t// 关闭资源\n        fw.close();\n    }\n}\n输出结果:\nJava\n程序员\n```\n\n> 小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。\n>\n> 当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流\n\n# 第四章 缓冲流\n\n学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。\n\n## 4.1 概述\n\n缓冲流,也叫高效流，是对4个基本的`FileXxx` 流的增强，所以也是4个流，按照数据类型分类：\n\n* **字节缓冲流**：`BufferedInputStream`，`BufferedOutputStream` \n* **字符缓冲流**：`BufferedReader`，`BufferedWriter`\n\n缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。\n\n## 4.2 字节缓冲流\n\n### 构造方法\n\n* `public BufferedInputStream(InputStream in)` ：创建一个 新的缓冲输入流。 \n* `public BufferedOutputStream(OutputStream out)`： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n```java\n// 创建字节缓冲输入流\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"bis.txt\"));\n// 创建字节缓冲输出流\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"bos.txt\"));\n```\n\n### 效率测试\n\n查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。\n\n1. 基本流，代码如下：\n\n```java\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n      \tlong start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n        \tFileInputStream fis = new FileInputStream(\"jdk9.exe\");\n        \tFileOutputStream fos = new FileOutputStream(\"copy.exe\")\n        ){\n        \t// 读写数据\n            int b;\n            while ((b = fis.read()) != -1) {\n                fos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(\"普通流复制时间:\"+(end - start)+\" 毫秒\");\n    }\n}\n\n十几分钟过去了...\n```\n\n2. 缓冲流，代码如下：\n\n```java\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n      \tlong start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n        \tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"jdk9.exe\"));\n\t     BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"copy.exe\"));\n        ){\n        // 读写数据\n            int b;\n            while ((b = bis.read()) != -1) {\n                bos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(\"缓冲流复制时间:\"+(end - start)+\" 毫秒\");\n    }\n}\n\n缓冲流复制时间:8016 毫秒\n```\n如何更快呢？\n\n使用数组的方式，代码如下：\n\n```java\npublic class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n      \t// 记录开始时间\n        long start = System.currentTimeMillis();\n\t\t// 创建流对象\n        try (\n\t\t\tBufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"jdk9.exe\"));\n\t\t BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(\"copy.exe\"));\n        ){\n          \t// 读写数据\n            int len;\n            byte[] bytes = new byte[8*1024];\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0 , len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\t\t// 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(\"缓冲流使用数组复制时间:\"+(end - start)+\" 毫秒\");\n    }\n}\n缓冲流使用数组复制时间:666 毫秒\n```\n\n## 4.3 字符缓冲流\n\n### 构造方法\n\n* `public BufferedReader(Reader in)` ：创建一个 新的缓冲输入流。 \n* `public BufferedWriter(Writer out)`： 创建一个新的缓冲输出流。\n\n构造举例，代码如下：\n\n```java\n// 创建字符缓冲输入流\nBufferedReader br = new BufferedReader(new FileReader(\"br.txt\"));\n// 创建字符缓冲输出流\nBufferedWriter bw = new BufferedWriter(new FileWriter(\"bw.txt\"));\n```\n\n### 特有方法\n\n字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。\n\n* BufferedReader：`public String readLine()`: 读一行文字。 \n* BufferedWriter：`public void newLine()`: 写一行行分隔符,由系统属性定义符号。 \n\n`readLine`方法演示，代码如下：\n\n```java\npublic class BufferedReaderDemo {\n    public static void main(String[] args) throws IOException {\n      \t // 创建流对象\n        BufferedReader br = new BufferedReader(new FileReader(\"in.txt\"));\n\t\t// 定义字符串,保存读取的一行文字\n        String line  = null;\n      \t// 循环读取,读取到最后返回null\n        while ((line = br.readLine())!=null) {\n            System.out.print(line);\n            System.out.println(\"------\");\n        }\n\t\t// 释放资源\n        br.close();\n    }\n}\n```\n\n`newLine`方法演示，代码如下：\n\n```java\npublic class BufferedWriterDemo throws IOException {\n    public static void main(String[] args) throws IOException  {\n      \t// 创建流对象\n\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(\"out.txt\"));\n      \t// 写出数据\n        bw.write(\"Java\");\n      \t// 写出换行\n        bw.newLine();\n        bw.write(\"程序\");\n        bw.newLine();\n        bw.write(\"员\");\n        bw.newLine();\n\t\t// 释放资源\n        bw.close();\n    }\n}\n输出效果:\nJava\n程序\n员\n```\n\n# 第五章 转换流\n\n## 5.1 字符编码和字符集\n\n### 字符编码\n\n计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为**编码** 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为**解码** 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。\n\n编码:字符（能看懂的）-->字节（看不懂的）\n\n解码:字节（看不懂的）-->字符（能看懂的）\n\n* **字符编码`Character Encoding`** : 就是一套自然语言的字符与二进制数之间的对应规则。\n\n* **编码表**:生活中文字和计算机中二进制的对应规则\n\n### 字符集\n\n* **字符集 `Charset`**：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。\n\n计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。![](1_charset.jpg)\n\n可见，当指定了**编码**，它所对应的**字符集**自然就指定了，所以**编码**才是我们最终要关心的。\n\n* **ASCII字符集** ：\n  * ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。\n  * 基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。\n* **ISO-8859-1字符集**：\n  * 拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。\n  * ISO-8859-1使用单字节编码，兼容ASCII编码。\n* **GBxxx字符集**：\n  * GB就是国标的意思，是为了显示中文而设计的一套字符集。\n  * **GB2312**：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的\"全角\"字符，而原来在127号以下的那些就叫\"半角\"字符了。\n  * **GBK**：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。\n  * **GB18030**：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。\n* **Unicode字符集** ：\n  * Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。\n  * 它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。\n  * UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：\n    1. 128个US-ASCII字符，只需一个字节编码。\n    2. 拉丁文等字符，需要二个字节编码。 \n    3. 大部分常用字（含中文），使用三个字节编码。\n    4. 其他极少使用的Unicode辅助字符，使用四字节编码。\n\n## 5.2 编码引出的问题\n\n在IDEA中，使用`FileReader` 读取项目中的文本文件。由于IDEA的设置，都是默认的`UTF-8`编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。\n\n```java\npublic class ReaderDemo {\n    public static void main(String[] args) throws IOException {\n        FileReader fileReader = new FileReader(\"E:\\\\File_GBK.txt\");\n        int read;\n        while ((read = fileReader.read()) != -1) {\n            System.out.print((char)read);\n        }\n        fileReader.close();\n    }\n}\n输出结果：\n���\n```\n\n那么如何读取GBK编码的文件呢？ \n\n## 5.3 InputStreamReader类  \n\n转换流`java.io.InputStreamReader`，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 \n\n### 构造方法\n\n* `InputStreamReader(InputStream in)`: 创建一个使用默认字符集的字符流。 \n* `InputStreamReader(InputStream in, String charsetName)`: 创建一个指定字符集的字符流。\n\n构造举例，代码如下： \n\n```java\nInputStreamReader isr = new InputStreamReader(new FileInputStream(\"in.txt\"));\nInputStreamReader isr2 = new InputStreamReader(new FileInputStream(\"in.txt\") , \"GBK\");\n```\n\n### 指定编码读取\n\n```java\npublic class ReaderDemo2 {\n    public static void main(String[] args) throws IOException {\n      \t// 定义文件路径,文件为gbk编码\n        String FileName = \"E:\\\\file_gbk.txt\";\n      \t// 创建流对象,默认UTF8编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(FileName));\n      \t// 创建流对象,指定GBK编码\n        InputStreamReader isr2 = new InputStreamReader(new FileInputStream(FileName) , \"GBK\");\n\t\t// 定义变量,保存字符\n        int read;\n      \t// 使用默认编码字符流读取,乱码\n        while ((read = isr.read()) != -1) {\n            System.out.print((char)read); // ��Һ�\n        }\n        isr.close();\n      \n      \t// 使用指定编码字符流读取,正常解析\n        while ((read = isr2.read()) != -1) {\n            System.out.print((char)read);// 大家好\n        }\n        isr2.close();\n    }\n}\n```\n\n## 5.4 OutputStreamWriter类\n\n转换流`java.io.OutputStreamWriter` ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 \n\n### 构造方法\n\n- `OutputStreamWriter(OutputStream in)`: 创建一个使用默认字符集的字符流。 \n- `OutputStreamWriter(OutputStream in, String charsetName)`: 创建一个指定字符集的字符流。\n\n构造举例，代码如下： \n\n```java\nOutputStreamWriter isr = new OutputStreamWriter(new FileOutputStream(\"out.txt\"));\nOutputStreamWriter isr2 = new OutputStreamWriter(new FileOutputStream(\"out.txt\") , \"GBK\");\n```\n\n### 指定编码写出\n\n```java\npublic class OutputDemo {\n    public static void main(String[] args) throws IOException {\n      \t// 定义文件路径\n        String FileName = \"E:\\\\out.txt\";\n      \t// 创建流对象,默认UTF8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(FileName));\n        // 写出数据\n      \tosw.write(\"你好\"); // 保存为6个字节\n        osw.close();\n      \t\n\t\t// 定义文件路径\n\t\tString FileName2 = \"E:\\\\out2.txt\";\n     \t// 创建流对象,指定GBK编码\n        OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream(FileName2),\"GBK\");\n        // 写出数据\n      \tosw2.write(\"你好\");// 保存为4个字节\n        osw2.close();\n    }\n}\n```\n\n### 转换流理解图解\n\n**转换流是字节与字符间的桥梁！**![](2_zhuanhuan.jpg)\n## 5.5 练习：转换文件编码\n\n将GBK编码的文本文件，转换为UTF-8编码的文本文件。\n\n### 案例分析\n\n1. 指定GBK编码的转换流，读取文本文件。\n2. 使用UTF-8编码的转换流，写出文本文件。\n\n### 案例实现\n\n```java\npublic class TransDemo {\n   public static void main(String[] args) {      \n    \t// 1.定义文件路径\n     \tString srcFile = \"file_gbk.txt\";\n        String destFile = \"file_utf8.txt\";\n\t\t// 2.创建流对象\n    \t// 2.1 转换输入流,指定GBK编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(srcFile) , \"GBK\");\n    \t// 2.2 转换输出流,默认utf8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile));\n\t\t// 3.读写数据\n    \t// 3.1 定义数组\n        char[] cbuf = new char[1024];\n    \t// 3.2 定义长度\n        int len;\n    \t// 3.3 循环读取\n        while ((len = isr.read(cbuf))!=-1) {\n            // 循环写出\n          \tosw.write(cbuf,0,len);\n        }\n    \t// 4.释放资源\n        osw.close();\n        isr.close();\n  \t}\n}\n```\n\n# 第六章 序列化\n\n## 6.1 概述\n\nJava 提供了一种对象**序列化**的机制。用一个字节序列可以表示一个对象，该字节序列包含该`对象的数据`、`对象的类型`和`对象中存储的属性`等信息。字节序列写出到文件之后，相当于文件中**持久保存**了一个对象的信息。 \n\n反之，该字节序列还可以从文件中读取回来，重构对象，对它进行**反序列化**。`对象的数据`、`对象的类型`和`对象中存储的数据`信息，都可以用来在内存中创建对象。看图理解序列化： ![](3_xuliehua.jpg)\n\n## 6.2 ObjectOutputStream类\n\n`java.io.ObjectOutputStream ` 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。\n\n### 构造方法\n\n* `public ObjectOutputStream(OutputStream out) `： 创建一个指定OutputStream的ObjectOutputStream。\n\n构造举例，代码如下：  \n\n```java\nFileOutputStream fileOut = new FileOutputStream(\"employee.txt\");\nObjectOutputStream out = new ObjectOutputStream(fileOut);\n```\n\n### 序列化操作\n\n1. 一个对象要想序列化，必须满足两个条件:\n\n* 该类必须实现`java.io.Serializable ` 接口，`Serializable` 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出`NotSerializableException` 。\n* 该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用`transient` 关键字修饰。\n\n```java\npublic class Employee implements java.io.Serializable {\n    public String name;\n    public String address;\n    public transient int age; // transient瞬态修饰成员,不会被序列化\n    public void addressCheck() {\n      \tSystem.out.println(\"Address  check : \" + name + \" -- \" + address);\n    }\n}\n```\n\n2.写出对象方法\n\n* `public final void writeObject (Object obj)` : 将指定的对象写出。\n\n```java\npublic class SerializeDemo{\n   \tpublic static void main(String [] args)   {\n    \tEmployee e = new Employee();\n    \te.name = \"zhangsan\";\n    \te.address = \"beiqinglu\";\n    \te.age = 20; \n    \ttry {\n      \t\t// 创建序列化流对象\n          ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\"employee.txt\"));\n        \t// 写出对象\n        \tout.writeObject(e);\n        \t// 释放资源\n        \tout.close();\n        \tfileOut.close();\n        \tSystem.out.println(\"Serialized data is saved\"); // 姓名，地址被序列化，年龄没有被序列化。\n        } catch(IOException i)   {\n            i.printStackTrace();\n        }\n   \t}\n}\n输出结果：\nSerialized data is saved\n```\n\n## 6.3 ObjectInputStream类\n\nObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 \n\n### 构造方法\n\n* `public ObjectInputStream(InputStream in) `： 创建一个指定InputStream的ObjectInputStream。\n\n### 反序列化操作1\n\n如果能找到一个对象的class文件，我们可以进行反序列化操作，调用`ObjectInputStream`读取对象的方法：\n\n- `public final Object readObject ()` : 读取一个对象。\n\n```java\npublic class DeserializeDemo {\n   public static void main(String [] args)   {\n        Employee e = null;\n        try {\t\t\n             // 创建反序列化流\n             FileInputStream fileIn = new FileInputStream(\"employee.txt\");\n             ObjectInputStream in = new ObjectInputStream(fileIn);\n             // 读取一个对象\n             e = (Employee) in.readObject();\n             // 释放资源\n             in.close();\n             fileIn.close();\n        }catch(IOException i) {\n             // 捕获其他异常\n             i.printStackTrace();\n             return;\n        }catch(ClassNotFoundException c)  {\n        \t// 捕获类找不到异常\n             System.out.println(\"Employee class not found\");\n             c.printStackTrace();\n             return;\n        }\n        // 无异常,直接打印输出\n        System.out.println(\"Name: \" + e.name);\t// zhangsan\n        System.out.println(\"Address: \" + e.address); // beiqinglu\n        System.out.println(\"age: \" + e.age); // 0\n    }\n}\n```\n\n**对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 `ClassNotFoundException` 异常。**  \n\n### **反序列化操作2**\n\n**另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个`InvalidClassException`异常。**发生这个异常的原因如下：\n\n* 该类的序列版本号与从流中读取的类描述符的版本号不匹配 \n* 该类包含未知数据类型 \n* 该类没有可访问的无参数构造方法 \n\n`Serializable` 接口给需要序列化的类，提供了一个序列版本号。`serialVersionUID` 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。\n\n```java\npublic class Employee implements java.io.Serializable {\n     // 加入序列版本号\n     private static final long serialVersionUID = 1L;\n     public String name;\n     public String address;\n     // 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.\n     public int eid; \n\n     public void addressCheck() {\n         System.out.println(\"Address  check : \" + name + \" -- \" + address);\n     }\n}\n```\n\n\n\n## 6.4 练习：序列化集合\n\n1. 将存有多个自定义对象的集合序列化操作，保存到`list.txt`文件中。\n2. 反序列化`list.txt` ，并遍历集合，打印对象信息。\n\n### 案例分析\n\n1. 把若干学生对象 ，保存到集合中。\n2. 把集合序列化。\n3. 反序列化读取时，只需要读取一次，转换为集合类型。\n4. 遍历集合，可以打印所有的学生信息\n\n### 案例实现\n\n```java\npublic class SerTest {\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 创建 学生对象\n\t\tStudent student = new Student(\"老王\", \"laow\");\n\t\tStudent student2 = new Student(\"老张\", \"laoz\");\n\t\tStudent student3 = new Student(\"老李\", \"laol\");\n\n\t\tArrayList<Student> arrayList = new ArrayList<>();\n\t\tarrayList.add(student);\n\t\tarrayList.add(student2);\n\t\tarrayList.add(student3);\n\t\t// 序列化操作\n\t\t// serializ(arrayList);\n\t\t\n\t\t// 反序列化  \n\t\tObjectInputStream ois  = new ObjectInputStream(new FileInputStream(\"list.txt\"));\n\t\t// 读取对象,强转为ArrayList类型\n\t\tArrayList<Student> list  = (ArrayList<Student>)ois.readObject();\n\t\t\n      \tfor (int i = 0; i < list.size(); i++ ){\n          \tStudent s = list.get(i);\n        \tSystem.out.println(s.getName()+\"--\"+ s.getPwd());\n      \t}\n\t}\n\n\tprivate static void serializ(ArrayList<Student> arrayList) throws Exception {\n\t\t// 创建 序列化流 \n\t\tObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"list.txt\"));\n\t\t// 写出对象\n\t\toos.writeObject(arrayList);\n\t\t// 释放资源\n\t\toos.close();\n\t}\n}\n```\n\n#  第七章 打印流\n\n## 7.1 概述\n\n平时我们在控制台打印输出，是调用`print`方法和`println`方法完成的，这两个方法都来自于`java.io.PrintStream`类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。\n\n## 7.2 PrintStream类\n\n### 构造方法\n\n* `public PrintStream(String fileName)  `： 使用指定的文件名创建一个新的打印流。\n\n构造举例，代码如下：  \n\n```java\nPrintStream ps = new PrintStream(\"ps.txt\")；\n```\n\n### 改变打印流向\n\n`System.out`就是`PrintStream`类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个\"小把戏\"，改变它的流向。\n\n```java\npublic class PrintDemo {\n    public static void main(String[] args) throws IOException {\n\t\t// 调用系统的打印流,控制台直接输出97\n        System.out.println(97);\n      \n\t\t// 创建打印流,指定文件的名称\n        PrintStream ps = new PrintStream(\"ps.txt\");\n      \t\n      \t// 设置系统的打印流流向,输出到ps.txt\n        System.setOut(ps);\n      \t// 调用系统的打印流,ps.txt中输出97\n        System.out.println(97);\n    }\n}\n```","slug":"Java3","published":1,"updated":"2020-10-16T11:25:51.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogwd0010rouxv3th5ifg","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=555142&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要总结IO流等相关的知识🤪</p>\n</blockquote>\n<h1 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h1><ul>\n<li>IO流</li>\n<li>字节流</li>\n<li>字符流</li>\n<li>缓冲流</li>\n<li>转换流</li>\n<li>序列化流</li>\n<li>打印流</li>\n</ul>\n<h1 id=\"第一章-IO概述\"><a href=\"#第一章-IO概述\" class=\"headerlink\" title=\"第一章 IO概述\"></a>第一章 IO概述</h1><h2 id=\"1-1-什么是IO\"><a href=\"#1-1-什么是IO\" class=\"headerlink\" title=\"1.1 什么是IO\"></a>1.1 什么是IO</h2><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p>\n<p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p>\n<p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p>\n<h2 id=\"1-2-IO的分类\"><a href=\"#1-2-IO的分类\" class=\"headerlink\" title=\"1.2 IO的分类\"></a>1.2 IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p>\n<ul>\n<li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li>\n<li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li>\n</ul>\n<p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p>\n<ul>\n<li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li>\n<li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li>\n</ul>\n<h2 id=\"1-3-IO的流向说明图解\"><a href=\"#1-3-IO的流向说明图解\" class=\"headerlink\" title=\"1.3 IO的流向说明图解\"></a>1.3 IO的流向说明图解</h2><p><img src=\"1_io.jpg\" alt></p>\n<h2 id=\"1-4-顶级父类们\"><a href=\"#1-4-顶级父类们\" class=\"headerlink\" title=\"1.4 顶级父类们\"></a>1.4 顶级父类们</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><strong>输入流</strong></th>\n<th align=\"center\">输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>字节流</strong></td>\n<td align=\"center\">字节输入流<br><strong>InputStream</strong></td>\n<td align=\"center\">字节输出流<br><strong>OutputStream</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>字符流</strong></td>\n<td align=\"center\">字符输入流<br><strong>Reader</strong></td>\n<td align=\"center\">字符输出流<br><strong>Writer</strong></td>\n</tr>\n</tbody></table>\n<h1 id=\"第二章-字节流\"><a href=\"#第二章-字节流\" class=\"headerlink\" title=\"第二章 字节流\"></a>第二章 字节流</h1><h2 id=\"2-1-一切皆为字节\"><a href=\"#2-1-一切皆为字节\" class=\"headerlink\" title=\"2.1 一切皆为字节\"></a>2.1 一切皆为字节</h2><p>一切文件数据（文本、图片、视频等）在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p>\n<h2 id=\"2-2-字节输出流【OutputStream】\"><a href=\"#2-2-字节输出流【OutputStream】\" class=\"headerlink\" title=\"2.2 字节输出流【OutputStream】\"></a>2.2 字节输出流【OutputStream】</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li>\n<li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li>\n<li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li>\n<li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li>\n<li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li>\n</ul>\n<blockquote>\n<p>小贴士：</p>\n<p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p>\n</blockquote>\n<h2 id=\"2-3-FileOutputStream类\"><a href=\"#2-3-FileOutputStream类\" class=\"headerlink\" title=\"2.3 FileOutputStream类\"></a>2.3 FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p>\n<p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li>\n<li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileOutputStreamConstructor</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 使用File对象创建流对象</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"写出字节数据\"><a href=\"#写出字节数据\" class=\"headerlink\" title=\"写出字节数据\"></a>写出字节数据</h3><ol>\n<li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FOSWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fos.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 写出数据</span>\n          fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第1个字节</span>\n          fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第2个字节</span>\n          fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第3个字节</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\nabc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li>\n<li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FOSWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fos.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 字符串转换为字节数组</span>\n          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 写出字节数组数据</span>\n          fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\n程序员<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FOSWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fos.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 字符串转换为字节数组</span>\n          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\ncd<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"数据追加续写\"><a href=\"#数据追加续写\" class=\"headerlink\" title=\"数据追加续写\"></a>数据追加续写</h3><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p>\n<ul>\n<li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li>\n<li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li>\n</ul>\n<p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FOSWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fos.txt\"</span>，<span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 字符串转换为字节数组</span>\n          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token string\">\"abcde\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n文件操作前：cd\n文件操作后：cdabcde<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"写出换行\"><a href=\"#写出换行\" class=\"headerlink\" title=\"写出换行\"></a>写出换行</h3><p>Windows系统里，换行符号是<code>\\r\\n</code> 。代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FOSWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fos.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token comment\" spellcheck=\"true\">// 定义字节数组</span>\n          <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 遍历数组</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 写出一个字节</span>\n            fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>words<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 写出一个换行, 换行符号转成数组写出</span>\n            fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n输出结果：\na\nb\nc\nd\ne<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<ul>\n<li>回车符<code>\\r</code>和换行符<code>\\n</code> ：<ul>\n<li>回车符：回到一行的开头（return）。</li>\n<li>换行符：下一行（newline）。</li>\n</ul>\n</li>\n<li>系统中的换行：<ul>\n<li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\\r\\n</code>；</li>\n<li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\\n</code>；</li>\n<li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\\r</code>。从 Mac OS X开始与Linux统一。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"2-4-字节输入流【InputStream】\"><a href=\"#2-4-字节输入流【InputStream】\" class=\"headerlink\" title=\"2.4 字节输入流【InputStream】\"></a>2.4 字节输入流【InputStream】</h2><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li>\n<li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li>\n<li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li>\n</ul>\n<blockquote>\n<p>小贴士：<br>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p>\n</blockquote>\n<h2 id=\"2-5-FileInputStream类\"><a href=\"#2-5-FileInputStream类\" class=\"headerlink\" title=\"2.5 FileInputStream类\"></a>2.5 FileInputStream类</h2><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p>\n<h3 id=\"构造方法-1\"><a href=\"#构造方法-1\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li>\n<li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileInputStreamConstructor</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 使用File对象创建流对象</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileInputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileInputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"读取字节数据\"><a href=\"#读取字节数据\" class=\"headerlink\" title=\"读取字节数据\"></a>读取字节数据</h3><ol>\n<li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FISRead</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n           FileInputStream fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 读取数据，返回一个字节</span>\n        <span class=\"token keyword\">int</span> read <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        read <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        read <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        read <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        read <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 读取到末尾,返回-1</span>\n           read <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\na\nb\nc\nd\ne\n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>循环改进读取方式，代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FISRead</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n           FileInputStream fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义变量，保存数据</span>\n        <span class=\"token keyword\">int</span> b ；\n        <span class=\"token comment\" spellcheck=\"true\">// 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\na\nb\nc\nd\ne<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li>虽然读取了一个字节，但是会自动提升为int类型。</li>\n<li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FISRead</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象.</span>\n           FileInputStream fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 文件中为abcde</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义变量，作为有效个数</span>\n        <span class=\"token keyword\">int</span> len ；\n        <span class=\"token comment\" spellcheck=\"true\">// 定义字节数组，作为装字节数据的容器   </span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> len<span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token comment\" spellcheck=\"true\">// 每次读取后,把数组变成字符串打印</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n输出结果：\nab\ncd\ned<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FISRead</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象.</span>\n           FileInputStream fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 文件中为abcde</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义变量，作为有效个数</span>\n        <span class=\"token keyword\">int</span> len ；\n        <span class=\"token comment\" spellcheck=\"true\">// 定义字节数组，作为装字节数据的容器   </span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span> len<span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token comment\" spellcheck=\"true\">// 每次读取后,把数组的有效字节部分，变成字符串打印</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>b，<span class=\"token number\">0</span>，len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//  len 每次读取的有效字节个数</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n输出结果：\nab\ncd\ne<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：</p>\n<p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p>\n</blockquote>\n<h2 id=\"2-6-字节流练习：图片复制\"><a href=\"#2-6-字节流练习：图片复制\" class=\"headerlink\" title=\"2.6 字节流练习：图片复制\"></a>2.6 字节流练习：图片复制</h2><h3 id=\"复制原理图解\"><a href=\"#复制原理图解\" class=\"headerlink\" title=\"复制原理图解\"></a>复制原理图解</h3><p><img src=\"2_copy.jpg\" alt></p>\n<h3 id=\"案例实现\"><a href=\"#案例实现\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h3><p>复制图片文件，代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Copy</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 1.创建流对象</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 1.1 指定数据源</span>\n        FileInputStream fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\test.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 1.2 指定目的地</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test_copy.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 2.读写数据</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2.1 定义数组</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2.2 定义长度</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2.3 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 2.4 写出数据</span>\n            fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 3.关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：</p>\n<p>流的关闭原则：先开后关，后开先关。</p>\n</blockquote>\n<h1 id=\"第三章-字符流\"><a href=\"#第三章-字符流\" class=\"headerlink\" title=\"第三章 字符流\"></a>第三章 字符流</h1><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p>\n<h2 id=\"3-1-字符输入流【Reader】\"><a href=\"#3-1-字符输入流【Reader】\" class=\"headerlink\" title=\"3.1 字符输入流【Reader】\"></a>3.1 字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li>\n<li><code>public int read()</code>： 从输入流读取一个字符。 </li>\n<li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li>\n</ul>\n<h2 id=\"3-2-FileReader类\"><a href=\"#3-2-FileReader类\" class=\"headerlink\" title=\"3.2 FileReader类\"></a>3.2 FileReader类</h2><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li><p>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</p>\n<p>idea中UTF-8</p>\n</li>\n<li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"构造方法-2\"><a href=\"#构造方法-2\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li>\n<li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileReaderConstructor</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 使用File对象创建流对象</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"读取字符数据\"><a href=\"#读取字符数据\" class=\"headerlink\" title=\"读取字符数据\"></a>读取字符数据</h3><ol>\n<li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FRRead</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n       <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\" spellcheck=\"true\">// 定义变量，保存数据</span>\n     <span class=\"token keyword\">int</span> b ；\n     <span class=\"token comment\" spellcheck=\"true\">// 循环读取</span>\n     <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n     fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\n程\n序\n员<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ol>\n<blockquote>\n<p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FRRead</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n           FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义变量，保存有效字符个数</span>\n        <span class=\"token keyword\">int</span> len ；\n        <span class=\"token comment\" spellcheck=\"true\">// 定义字符数组，作为装字符数据的容器</span>\n         <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cbuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>cbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\n程序\n员序<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>获取有效的字符改进，代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FISRead</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n           FileReader fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义变量，保存有效字符个数</span>\n        <span class=\"token keyword\">int</span> len ；\n        <span class=\"token comment\" spellcheck=\"true\">// 定义字符数组，作为装字符数据的容器</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cbuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>cbuf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n输出结果：\n程序\n员<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-3-字符输出流【Writer】\"><a href=\"#3-3-字符输出流【Writer】\" class=\"headerlink\" title=\"3.3 字符输出流【Writer】\"></a>3.3 字符输出流【Writer】</h2><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p>\n<ul>\n<li><code>void write(int c)</code> 写入单个字符。</li>\n<li><code>void write(char[] cbuf)</code>写入字符数组。 </li>\n<li><code>abstract  void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li>\n<li><code>void write(String str)</code>写入字符串。 </li>\n<li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li>\n<li><code>void flush()</code>刷新该流的缓冲。  </li>\n<li><code>void close()</code> 关闭此流，但要先刷新它。 </li>\n</ul>\n<h2 id=\"3-4-FileWriter类\"><a href=\"#3-4-FileWriter类\" class=\"headerlink\" title=\"3.4 FileWriter类\"></a>3.4 FileWriter类</h2><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>\n<h3 id=\"构造方法-3\"><a href=\"#构造方法-3\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li>\n<li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileWriterConstructor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 使用File对象创建流对象</span>\n        File file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"基本写出数据\"><a href=\"#基本写出数据\" class=\"headerlink\" title=\"基本写出数据\"></a>基本写出数据</h3><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FWWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fw.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 写出数据</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第1个字符</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第2个字符</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第3个字符</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第4个字符，中文编码表中30000对应一个汉字。</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">/*\n        【注意】关闭资源时,与FileOutputStream不同。\n           如果不关闭,数据只是保存到缓冲区，并未保存到文件。\n        */</span>\n        <span class=\"token comment\" spellcheck=\"true\">// fw.close();</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\nabC田<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li>\n<li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li>\n</ol>\n</blockquote>\n<h3 id=\"关闭和刷新\"><a href=\"#关闭和刷新\" class=\"headerlink\" title=\"关闭和刷新\"></a>关闭和刷新</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p>\n<ul>\n<li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li>\n<li><code>close</code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li>\n</ul>\n<p>代码使用演示：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FWWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fw.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 写出数据，通过flush</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刷'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第1个字符</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'新'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 继续写出第2个字符，写出成功</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 写出数据，通过close</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'关'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 写出第1个字符</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'闭'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p>\n</blockquote>\n<h3 id=\"写出其他数据\"><a href=\"#写出其他数据\" class=\"headerlink\" title=\"写出其他数据\"></a>写出其他数据</h3><ol>\n<li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FWWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fw.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 字符串转换为字节数组</span>\n          <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> <span class=\"token string\">\"Java程序员\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 写出字符数组</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Java程序员</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 程序</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FWWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fw.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 字符串</span>\n          String msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Java程序员\"</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 写出字符数组</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//Java程序员</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// 程序</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"3\">\n<li><strong>续写和换行</strong>：操作类似于FileOutputStream。</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FWWrite</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 使用文件名称创建流对象，可以续写数据</span>\n        FileWriter fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fw.txt\"</span>，<span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n          <span class=\"token comment\" spellcheck=\"true\">// 写出字符串</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 写出换行</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 写出字符串</span>\n          fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 关闭资源</span>\n        fw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果<span class=\"token operator\">:</span>\nJava\n程序员<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p>\n<p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p>\n</blockquote>\n<h1 id=\"第四章-缓冲流\"><a href=\"#第四章-缓冲流\" class=\"headerlink\" title=\"第四章 缓冲流\"></a>第四章 缓冲流</h1><p>学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p>\n<h2 id=\"4-1-概述\"><a href=\"#4-1-概述\" class=\"headerlink\" title=\"4.1 概述\"></a>4.1 概述</h2><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p>\n<ul>\n<li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li>\n<li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li>\n</ul>\n<p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p>\n<h2 id=\"4-2-字节缓冲流\"><a href=\"#4-2-字节缓冲流\" class=\"headerlink\" title=\"4.2 字节缓冲流\"></a>4.2 字节缓冲流</h2><h3 id=\"构造方法-4\"><a href=\"#构造方法-4\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li>\n<li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li>\n</ul>\n<p>构造举例，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 创建字节缓冲输入流</span>\nBufferedInputStream bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bis.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 创建字节缓冲输出流</span>\nBufferedOutputStream bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bos.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"效率测试\"><a href=\"#效率测试\" class=\"headerlink\" title=\"效率测试\"></a>效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p>\n<ol>\n<li>基本流，代码如下：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> FileNotFoundException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 记录开始时间</span>\n          <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建流对象</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>\n            FileInputStream fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdk9.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy.exe\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 读写数据</span>\n            <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 记录结束时间</span>\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通流复制时间:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n十几分钟过去了<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>缓冲流，代码如下：</li>\n</ol>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> FileNotFoundException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 记录开始时间</span>\n          <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建流对象</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>\n            BufferedInputStream bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdk9.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         BufferedOutputStream bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 读写数据</span>\n            <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 记录结束时间</span>\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缓冲流复制时间:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n缓冲流复制时间<span class=\"token operator\">:</span><span class=\"token number\">8016</span> 毫秒<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如何更快呢？</p>\n<p>使用数组的方式，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> FileNotFoundException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 记录开始时间</span>\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建流对象</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>\n            BufferedInputStream bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdk9.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         BufferedOutputStream bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copy.exe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 读写数据</span>\n            <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> bis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 记录结束时间</span>\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"缓冲流使用数组复制时间:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" 毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n缓冲流使用数组复制时间<span class=\"token operator\">:</span><span class=\"token number\">666</span> 毫秒<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-3-字符缓冲流\"><a href=\"#4-3-字符缓冲流\" class=\"headerlink\" title=\"4.3 字符缓冲流\"></a>4.3 字符缓冲流</h2><h3 id=\"构造方法-5\"><a href=\"#构造方法-5\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li>\n<li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li>\n</ul>\n<p>构造举例，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 创建字符缓冲输入流</span>\nBufferedReader br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"br.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 创建字符缓冲输出流</span>\nBufferedWriter bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bw.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"特有方法\"><a href=\"#特有方法\" class=\"headerlink\" title=\"特有方法\"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p>\n<ul>\n<li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li>\n<li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li>\n</ul>\n<p><code>readLine</code>方法演示，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedReaderDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\" spellcheck=\"true\">// 创建流对象</span>\n        BufferedReader br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 定义字符串,保存读取的一行文字</span>\n        String line  <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 循环读取,读取到最后返回null</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 释放资源</span>\n        br<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>newLine</code>方法演示，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BufferedWriterDemo</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException  <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 创建流对象</span>\n        BufferedWriter bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 写出数据</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 写出换行</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"程序\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"员\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 释放资源</span>\n        bw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出效果<span class=\"token operator\">:</span>\nJava\n程序\n员<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"第五章-转换流\"><a href=\"#第五章-转换流\" class=\"headerlink\" title=\"第五章 转换流\"></a>第五章 转换流</h1><h2 id=\"5-1-字符编码和字符集\"><a href=\"#5-1-字符编码和字符集\" class=\"headerlink\" title=\"5.1 字符编码和字符集\"></a>5.1 字符编码和字符集</h2><h3 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p>\n<p>编码:字符（能看懂的）–&gt;字节（看不懂的）</p>\n<p>解码:字节（看不懂的）–&gt;字符（能看懂的）</p>\n<ul>\n<li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p>\n</li>\n<li><p><strong>编码表</strong>:生活中文字和计算机中二进制的对应规则</p>\n</li>\n</ul>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><ul>\n<li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li>\n</ul>\n<p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img src=\"1_charset.jpg\" alt></p>\n<p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p>\n<ul>\n<li><strong>ASCII字符集</strong> ：<ul>\n<li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li>\n<li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li>\n</ul>\n</li>\n<li><strong>ISO-8859-1字符集</strong>：<ul>\n<li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li>\n<li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li>\n</ul>\n</li>\n<li><strong>GBxxx字符集</strong>：<ul>\n<li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li>\n<li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li>\n<li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li>\n<li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li>\n</ul>\n</li>\n<li><strong>Unicode字符集</strong> ：<ul>\n<li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li>\n<li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li>\n<li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol>\n<li>128个US-ASCII字符，只需一个字节编码。</li>\n<li>拉丁文等字符，需要二个字节编码。 </li>\n<li>大部分常用字（含中文），使用三个字节编码。</li>\n<li>其他极少使用的Unicode辅助字符，使用四字节编码。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-2-编码引出的问题\"><a href=\"#5-2-编码引出的问题\" class=\"headerlink\" title=\"5.2 编码引出的问题\"></a>5.2 编码引出的问题</h2><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReaderDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        FileReader fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E:\\\\File_GBK.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> read<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\n���<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>那么如何读取GBK编码的文件呢？ </p>\n<h2 id=\"5-3-InputStreamReader类\"><a href=\"#5-3-InputStreamReader类\" class=\"headerlink\" title=\"5.3 InputStreamReader类\"></a>5.3 InputStreamReader类</h2><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p>\n<h3 id=\"构造方法-6\"><a href=\"#构造方法-6\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li>\n<li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li>\n</ul>\n<p>构造举例，代码如下： </p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">InputStreamReader isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nInputStreamReader isr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"指定编码读取\"><a href=\"#指定编码读取\" class=\"headerlink\" title=\"指定编码读取\"></a>指定编码读取</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReaderDemo2</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义文件路径,文件为gbk编码</span>\n        String FileName <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\file_gbk.txt\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 创建流对象,默认UTF8编码</span>\n        InputStreamReader isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 创建流对象,指定GBK编码</span>\n        InputStreamReader isr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>FileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 定义变量,保存字符</span>\n        <span class=\"token keyword\">int</span> read<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 使用默认编码字符流读取,乱码</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> isr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ��Һ�</span>\n        <span class=\"token punctuation\">}</span>\n        isr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 使用指定编码字符流读取,正常解析</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> isr2<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 大家好</span>\n        <span class=\"token punctuation\">}</span>\n        isr2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-4-OutputStreamWriter类\"><a href=\"#5-4-OutputStreamWriter类\" class=\"headerlink\" title=\"5.4 OutputStreamWriter类\"></a>5.4 OutputStreamWriter类</h2><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p>\n<h3 id=\"构造方法-7\"><a href=\"#构造方法-7\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li>\n<li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li>\n</ul>\n<p>构造举例，代码如下： </p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">OutputStreamWriter isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nOutputStreamWriter isr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"指定编码写出\"><a href=\"#指定编码写出\" class=\"headerlink\" title=\"指定编码写出\"></a>指定编码写出</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OutputDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 定义文件路径</span>\n        String FileName <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\out.txt\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 创建流对象,默认UTF8编码</span>\n        OutputStreamWriter osw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>FileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 写出数据</span>\n          osw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 保存为6个字节</span>\n        osw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 定义文件路径</span>\n        String FileName2 <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\out2.txt\"</span><span class=\"token punctuation\">;</span>\n         <span class=\"token comment\" spellcheck=\"true\">// 创建流对象,指定GBK编码</span>\n        OutputStreamWriter osw2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>FileName2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 写出数据</span>\n          osw2<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 保存为4个字节</span>\n        osw2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"转换流理解图解\"><a href=\"#转换流理解图解\" class=\"headerlink\" title=\"转换流理解图解\"></a>转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong><img src=\"2_zhuanhuan.jpg\" alt></p>\n<h2 id=\"5-5-练习：转换文件编码\"><a href=\"#5-5-练习：转换文件编码\" class=\"headerlink\" title=\"5.5 练习：转换文件编码\"></a>5.5 练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><ol>\n<li>指定GBK编码的转换流，读取文本文件。</li>\n<li>使用UTF-8编码的转换流，写出文本文件。</li>\n</ol>\n<h3 id=\"案例实现-1\"><a href=\"#案例实现-1\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransDemo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      \n        <span class=\"token comment\" spellcheck=\"true\">// 1.定义文件路径</span>\n         String srcFile <span class=\"token operator\">=</span> <span class=\"token string\">\"file_gbk.txt\"</span><span class=\"token punctuation\">;</span>\n        String destFile <span class=\"token operator\">=</span> <span class=\"token string\">\"file_utf8.txt\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2.创建流对象</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2.1 转换输入流,指定GBK编码</span>\n        InputStreamReader isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>srcFile<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 2.2 转换输出流,默认utf8编码</span>\n        OutputStreamWriter osw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 3.读写数据</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 3.1 定义数组</span>\n        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cbuf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 3.2 定义长度</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 3.3 循环读取</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> isr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 循环写出</span>\n              osw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>cbuf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 4.释放资源</span>\n        osw<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        isr<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"第六章-序列化\"><a href=\"#第六章-序列化\" class=\"headerlink\" title=\"第六章 序列化\"></a>第六章 序列化</h1><h2 id=\"6-1-概述\"><a href=\"#6-1-概述\" class=\"headerlink\" title=\"6.1 概述\"></a>6.1 概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p>\n<p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： <img src=\"3_xuliehua.jpg\" alt></p>\n<h2 id=\"6-2-ObjectOutputStream类\"><a href=\"#6-2-ObjectOutputStream类\" class=\"headerlink\" title=\"6.2 ObjectOutputStream类\"></a>6.2 ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p>\n<h3 id=\"构造方法-8\"><a href=\"#构造方法-8\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li>\n</ul>\n<p>构造举例，代码如下：  </p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">FileOutputStream fileOut <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObjectOutputStream out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span>fileOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"序列化操作\"><a href=\"#序列化操作\" class=\"headerlink\" title=\"序列化操作\"></a>序列化操作</h3><ol>\n<li>一个对象要想序列化，必须满足两个条件:</li>\n</ol>\n<ul>\n<li>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li>\n<li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> String address<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// transient瞬态修饰成员,不会被序列化</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addressCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address  check : \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" -- \"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.写出对象方法</p>\n<ul>\n<li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeDemo</span><span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n        Employee e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token string\">\"beiqinglu\"</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 创建序列化流对象</span>\n          ObjectOutputStream out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 写出对象</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 释放资源</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            fileOut<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Serialized data is saved\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 姓名，地址被序列化，年龄没有被序列化。</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>IOException i<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n            i<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n输出结果：\nSerialized data is saved<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-3-ObjectInputStream类\"><a href=\"#6-3-ObjectInputStream类\" class=\"headerlink\" title=\"6.3 ObjectInputStream类\"></a>6.3 ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p>\n<h3 id=\"构造方法-9\"><a href=\"#构造方法-9\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定InputStream的ObjectInputStream。</li>\n</ul>\n<h3 id=\"反序列化操作1\"><a href=\"#反序列化操作1\" class=\"headerlink\" title=\"反序列化操作1\"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p>\n<ul>\n<li><code>public final Object readObject ()</code> : 读取一个对象。</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeserializeDemo</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span>\n        Employee e <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>        \n             <span class=\"token comment\" spellcheck=\"true\">// 创建反序列化流</span>\n             FileInputStream fileIn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employee.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             ObjectInputStream in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fileIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\" spellcheck=\"true\">// 读取一个对象</span>\n             e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Employee<span class=\"token punctuation\">)</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\" spellcheck=\"true\">// 释放资源</span>\n             in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             fileIn<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>IOException i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\" spellcheck=\"true\">// 捕获其他异常</span>\n             i<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>ClassNotFoundException c<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 捕获类找不到异常</span>\n             System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Employee class not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             c<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 无异常,直接打印输出</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// zhangsan</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// beiqinglu</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 0</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p>\n<h3 id=\"反序列化操作2\"><a href=\"#反序列化操作2\" class=\"headerlink\" title=\"反序列化操作2\"></a><strong>反序列化操作2</strong></h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p>\n<ul>\n<li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li>\n<li>该类包含未知数据类型 </li>\n<li>该类没有可访问的无参数构造方法 </li>\n</ul>\n<p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Serializable</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\" spellcheck=\"true\">// 加入序列版本号</span>\n     <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> 1L<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">public</span> String name<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">public</span> String address<span class=\"token punctuation\">;</span>\n     <span class=\"token comment\" spellcheck=\"true\">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> eid<span class=\"token punctuation\">;</span> \n\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addressCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Address  check : \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" -- \"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"6-4-练习：序列化集合\"><a href=\"#6-4-练习：序列化集合\" class=\"headerlink\" title=\"6.4 练习：序列化集合\"></a>6.4 练习：序列化集合</h2><ol>\n<li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li>\n<li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li>\n</ol>\n<h3 id=\"案例分析-1\"><a href=\"#案例分析-1\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><ol>\n<li>把若干学生对象 ，保存到集合中。</li>\n<li>把集合序列化。</li>\n<li>反序列化读取时，只需要读取一次，转换为集合类型。</li>\n<li>遍历集合，可以打印所有的学生信息</li>\n</ol>\n<h3 id=\"案例实现-2\"><a href=\"#案例实现-2\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerTest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建 学生对象</span>\n        Student student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老王\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"laow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Student student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老张\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"laoz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Student student3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"老李\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"laol\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ArrayList<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> arrayList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        arrayList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 序列化操作</span>\n        <span class=\"token comment\" spellcheck=\"true\">// serializ(arrayList);</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 反序列化  </span>\n        ObjectInputStream ois  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 读取对象,强转为ArrayList类型</span>\n        ArrayList<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> list  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ArrayList<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              Student s <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"--\"</span><span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getPwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">serializ</span><span class=\"token punctuation\">(</span>ArrayList<span class=\"token operator\">&lt;</span>Student<span class=\"token operator\">></span> arrayList<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 创建 序列化流 </span>\n        ObjectOutputStream oos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 写出对象</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>arrayList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 释放资源</span>\n        oos<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"第七章-打印流\"><a href=\"#第七章-打印流\" class=\"headerlink\" title=\"第七章 打印流\"></a>第七章 打印流</h1><h2 id=\"7-1-概述\"><a href=\"#7-1-概述\" class=\"headerlink\" title=\"7.1 概述\"></a>7.1 概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p>\n<h2 id=\"7-2-PrintStream类\"><a href=\"#7-2-PrintStream类\" class=\"headerlink\" title=\"7.2 PrintStream类\"></a>7.2 PrintStream类</h2><h3 id=\"构造方法-10\"><a href=\"#构造方法-10\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public PrintStream(String fileName)</code>： 使用指定的文件名创建一个新的打印流。</li>\n</ul>\n<p>构造举例，代码如下：  </p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">PrintStream ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ps.txt\"</span><span class=\"token punctuation\">)</span>；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"改变打印流向\"><a href=\"#改变打印流向\" class=\"headerlink\" title=\"改变打印流向\"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrintDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 调用系统的打印流,控制台直接输出97</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 创建打印流,指定文件的名称</span>\n        PrintStream ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ps.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\" spellcheck=\"true\">// 设置系统的打印流流向,输出到ps.txt</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">setOut</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 调用系统的打印流,ps.txt中输出97</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=555142&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要总结IO流等相关的知识🤪</p>\n</blockquote>\n<h1 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h1><ul>\n<li>IO流</li>\n<li>字节流</li>\n<li>字符流</li>\n<li>缓冲流</li>\n<li>转换流</li>\n<li>序列化流</li>\n<li>打印流</li>\n</ul>\n<h1 id=\"第一章-IO概述\"><a href=\"#第一章-IO概述\" class=\"headerlink\" title=\"第一章 IO概述\"></a>第一章 IO概述</h1><h2 id=\"1-1-什么是IO\"><a href=\"#1-1-什么是IO\" class=\"headerlink\" title=\"1.1 什么是IO\"></a>1.1 什么是IO</h2><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p>\n<p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p>\n<p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p>\n<h2 id=\"1-2-IO的分类\"><a href=\"#1-2-IO的分类\" class=\"headerlink\" title=\"1.2 IO的分类\"></a>1.2 IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p>\n<ul>\n<li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li>\n<li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li>\n</ul>\n<p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p>\n<ul>\n<li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li>\n<li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li>\n</ul>\n<h2 id=\"1-3-IO的流向说明图解\"><a href=\"#1-3-IO的流向说明图解\" class=\"headerlink\" title=\"1.3 IO的流向说明图解\"></a>1.3 IO的流向说明图解</h2><p><img src=\"1_io.jpg\" alt></p>\n<h2 id=\"1-4-顶级父类们\"><a href=\"#1-4-顶级父类们\" class=\"headerlink\" title=\"1.4 顶级父类们\"></a>1.4 顶级父类们</h2><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><strong>输入流</strong></th>\n<th align=\"center\">输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><strong>字节流</strong></td>\n<td align=\"center\">字节输入流<br><strong>InputStream</strong></td>\n<td align=\"center\">字节输出流<br><strong>OutputStream</strong></td>\n</tr>\n<tr>\n<td align=\"center\"><strong>字符流</strong></td>\n<td align=\"center\">字符输入流<br><strong>Reader</strong></td>\n<td align=\"center\">字符输出流<br><strong>Writer</strong></td>\n</tr>\n</tbody></table>\n<h1 id=\"第二章-字节流\"><a href=\"#第二章-字节流\" class=\"headerlink\" title=\"第二章 字节流\"></a>第二章 字节流</h1><h2 id=\"2-1-一切皆为字节\"><a href=\"#2-1-一切皆为字节\" class=\"headerlink\" title=\"2.1 一切皆为字节\"></a>2.1 一切皆为字节</h2><p>一切文件数据（文本、图片、视频等）在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p>\n<h2 id=\"2-2-字节输出流【OutputStream】\"><a href=\"#2-2-字节输出流【OutputStream】\" class=\"headerlink\" title=\"2.2 字节输出流【OutputStream】\"></a>2.2 字节输出流【OutputStream】</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li>\n<li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li>\n<li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li>\n<li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li>\n<li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li>\n</ul>\n<blockquote>\n<p>小贴士：</p>\n<p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p>\n</blockquote>\n<h2 id=\"2-3-FileOutputStream类\"><a href=\"#2-3-FileOutputStream类\" class=\"headerlink\" title=\"2.3 FileOutputStream类\"></a>2.3 FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p>\n<p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p>\n<h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li>\n<li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre><code class=\"java\">public class FileOutputStreamConstructor throws IOException {\n    public static void main(String[] args) {\n            // 使用File对象创建流对象\n        File file = new File(&quot;a.txt&quot;);\n        FileOutputStream fos = new FileOutputStream(file);\n\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(&quot;b.txt&quot;);\n    }\n}</code></pre>\n<h3 id=\"写出字节数据\"><a href=\"#写出字节数据\" class=\"headerlink\" title=\"写出字节数据\"></a>写出字节数据</h3><ol>\n<li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     \n          // 写出数据\n          fos.write(97); // 写出第1个字节\n          fos.write(98); // 写出第2个字节\n          fos.write(99); // 写出第3个字节\n          // 关闭资源\n        fos.close();\n    }\n}\n输出结果：\nabc</code></pre>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li>\n<li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     \n          // 字符串转换为字节数组\n          byte[] b = &quot;程序员&quot;.getBytes();\n          // 写出字节数组数据\n          fos.write(b);\n          // 关闭资源\n        fos.close();\n    }\n}\n输出结果：\n程序员</code></pre>\n<ol start=\"3\">\n<li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);     \n          // 字符串转换为字节数组\n          byte[] b = &quot;abcde&quot;.getBytes();\n        // 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b,2,2);\n          // 关闭资源\n        fos.close();\n    }\n}\n输出结果：\ncd</code></pre>\n<h3 id=\"数据追加续写\"><a href=\"#数据追加续写\" class=\"headerlink\" title=\"数据追加续写\"></a>数据追加续写</h3><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p>\n<ul>\n<li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li>\n<li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li>\n</ul>\n<p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p>\n<pre><code class=\"java\">public class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;，true);     \n          // 字符串转换为字节数组\n          byte[] b = &quot;abcde&quot;.getBytes();\n        // 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。\n        fos.write(b);\n          // 关闭资源\n        fos.close();\n    }\n}\n文件操作前：cd\n文件操作后：cdabcde</code></pre>\n<h3 id=\"写出换行\"><a href=\"#写出换行\" class=\"headerlink\" title=\"写出换行\"></a>写出换行</h3><p>Windows系统里，换行符号是<code>\\r\\n</code> 。代码使用演示：</p>\n<pre><code class=\"java\">public class FOSWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileOutputStream fos = new FileOutputStream(&quot;fos.txt&quot;);  \n          // 定义字节数组\n          byte[] words = {97,98,99,100,101};\n          // 遍历数组\n        for (int i = 0; i &lt; words.length; i++) {\n              // 写出一个字节\n            fos.write(words[i]);\n              // 写出一个换行, 换行符号转成数组写出\n            fos.write(&quot;\\r\\n&quot;.getBytes());\n        }\n          // 关闭资源\n        fos.close();\n    }\n}\n\n输出结果：\na\nb\nc\nd\ne</code></pre>\n<blockquote>\n<ul>\n<li>回车符<code>\\r</code>和换行符<code>\\n</code> ：<ul>\n<li>回车符：回到一行的开头（return）。</li>\n<li>换行符：下一行（newline）。</li>\n</ul>\n</li>\n<li>系统中的换行：<ul>\n<li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\\r\\n</code>；</li>\n<li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\\n</code>；</li>\n<li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\\r</code>。从 Mac OS X开始与Linux统一。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"2-4-字节输入流【InputStream】\"><a href=\"#2-4-字节输入流【InputStream】\" class=\"headerlink\" title=\"2.4 字节输入流【InputStream】\"></a>2.4 字节输入流【InputStream】</h2><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li>\n<li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li>\n<li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li>\n</ul>\n<blockquote>\n<p>小贴士：<br>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p>\n</blockquote>\n<h2 id=\"2-5-FileInputStream类\"><a href=\"#2-5-FileInputStream类\" class=\"headerlink\" title=\"2.5 FileInputStream类\"></a>2.5 FileInputStream类</h2><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p>\n<h3 id=\"构造方法-1\"><a href=\"#构造方法-1\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li>\n<li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> 。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre><code class=\"java\">public class FileInputStreamConstructor throws IOException{\n    public static void main(String[] args) {\n            // 使用File对象创建流对象\n        File file = new File(&quot;a.txt&quot;);\n        FileInputStream fos = new FileInputStream(file);\n\n        // 使用文件名称创建流对象\n        FileInputStream fos = new FileInputStream(&quot;b.txt&quot;);\n    }\n}</code></pre>\n<h3 id=\"读取字节数据\"><a href=\"#读取字节数据\" class=\"headerlink\" title=\"读取字节数据\"></a>读取字节数据</h3><ol>\n<li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FISRead {\n    public static void main(String[] args) throws IOException{\n          // 使用文件名称创建流对象\n           FileInputStream fis = new FileInputStream(&quot;read.txt&quot;);\n          // 读取数据，返回一个字节\n        int read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n        read = fis.read();\n        System.out.println((char) read);\n          // 读取到末尾,返回-1\n           read = fis.read();\n        System.out.println( read);\n        // 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne\n-1</code></pre>\n<p>循环改进读取方式，代码使用演示：</p>\n<pre><code class=\"java\">public class FISRead {\n    public static void main(String[] args) throws IOException{\n          // 使用文件名称创建流对象\n           FileInputStream fis = new FileInputStream(&quot;read.txt&quot;);\n          // 定义变量，保存数据\n        int b ；\n        // 循环读取\n        while ((b = fis.read())!=-1) {\n            System.out.println((char)b);\n        }\n        // 关闭资源\n        fis.close();\n    }\n}\n输出结果：\na\nb\nc\nd\ne</code></pre>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li>虽然读取了一个字节，但是会自动提升为int类型。</li>\n<li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FISRead {\n    public static void main(String[] args) throws IOException{\n          // 使用文件名称创建流对象.\n           FileInputStream fis = new FileInputStream(&quot;read.txt&quot;); // 文件中为abcde\n          // 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n               // 每次读取后,把数组变成字符串打印\n            System.out.println(new String(b));\n        }\n        // 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ned</code></pre>\n<p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p>\n<pre><code class=\"java\">public class FISRead {\n    public static void main(String[] args) throws IOException{\n          // 使用文件名称创建流对象.\n           FileInputStream fis = new FileInputStream(&quot;read.txt&quot;); // 文件中为abcde\n          // 定义变量，作为有效个数\n        int len ；\n        // 定义字节数组，作为装字节数据的容器   \n        byte[] b = new byte[2];\n        // 循环读取\n        while (( len= fis.read(b))!=-1) {\n               // 每次读取后,把数组的有效字节部分，变成字符串打印\n            System.out.println(new String(b，0，len));//  len 每次读取的有效字节个数\n        }\n        // 关闭资源\n        fis.close();\n    }\n}\n\n输出结果：\nab\ncd\ne</code></pre>\n<blockquote>\n<p>小贴士：</p>\n<p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p>\n</blockquote>\n<h2 id=\"2-6-字节流练习：图片复制\"><a href=\"#2-6-字节流练习：图片复制\" class=\"headerlink\" title=\"2.6 字节流练习：图片复制\"></a>2.6 字节流练习：图片复制</h2><h3 id=\"复制原理图解\"><a href=\"#复制原理图解\" class=\"headerlink\" title=\"复制原理图解\"></a>复制原理图解</h3><p><img src=\"2_copy.jpg\" alt></p>\n<h3 id=\"案例实现\"><a href=\"#案例实现\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h3><p>复制图片文件，代码使用演示：</p>\n<pre><code class=\"java\">public class Copy {\n    public static void main(String[] args) throws IOException {\n        // 1.创建流对象\n        // 1.1 指定数据源\n        FileInputStream fis = new FileInputStream(&quot;D:\\\\test.jpg&quot;);\n        // 1.2 指定目的地\n        FileOutputStream fos = new FileOutputStream(&quot;test_copy.jpg&quot;);\n\n        // 2.读写数据\n        // 2.1 定义数组\n        byte[] b = new byte[1024];\n        // 2.2 定义长度\n        int len;\n        // 2.3 循环读取\n        while ((len = fis.read(b))!=-1) {\n            // 2.4 写出数据\n            fos.write(b, 0 , len);\n        }\n\n        // 3.关闭资源\n        fos.close();\n        fis.close();\n    }\n}</code></pre>\n<blockquote>\n<p>小贴士：</p>\n<p>流的关闭原则：先开后关，后开先关。</p>\n</blockquote>\n<h1 id=\"第三章-字符流\"><a href=\"#第三章-字符流\" class=\"headerlink\" title=\"第三章 字符流\"></a>第三章 字符流</h1><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p>\n<h2 id=\"3-1-字符输入流【Reader】\"><a href=\"#3-1-字符输入流【Reader】\" class=\"headerlink\" title=\"3.1 字符输入流【Reader】\"></a>3.1 字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p>\n<ul>\n<li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li>\n<li><code>public int read()</code>： 从输入流读取一个字符。 </li>\n<li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li>\n</ul>\n<h2 id=\"3-2-FileReader类\"><a href=\"#3-2-FileReader类\" class=\"headerlink\" title=\"3.2 FileReader类\"></a>3.2 FileReader类</h2><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li><p>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</p>\n<p>idea中UTF-8</p>\n</li>\n<li><p>字节缓冲区：一个字节数组，用来临时存储字节数据。</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"构造方法-2\"><a href=\"#构造方法-2\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li>\n<li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre><code class=\"java\">public class FileReaderConstructor throws IOException{\n    public static void main(String[] args) {\n            // 使用File对象创建流对象\n        File file = new File(&quot;a.txt&quot;);\n        FileReader fr = new FileReader(file);\n\n        // 使用文件名称创建流对象\n        FileReader fr = new FileReader(&quot;b.txt&quot;);\n    }\n}</code></pre>\n<h3 id=\"读取字符数据\"><a href=\"#读取字符数据\" class=\"headerlink\" title=\"读取字符数据\"></a>读取字符数据</h3><ol>\n<li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：<pre><code class=\"java\">public class FRRead {\n public static void main(String[] args) throws IOException {\n       // 使用文件名称创建流对象\n        FileReader fr = new FileReader(&quot;read.txt&quot;);\n       // 定义变量，保存数据\n     int b ；\n     // 循环读取\n     while ((b = fr.read())!=-1) {\n         System.out.println((char)b);\n     }\n     // 关闭资源\n     fr.close();\n }\n}\n输出结果：\n程\n序\n员</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p>\n</blockquote>\n<ol start=\"2\">\n<li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FRRead {\n    public static void main(String[] args) throws IOException {\n          // 使用文件名称创建流对象\n           FileReader fr = new FileReader(&quot;read.txt&quot;);\n          // 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n         char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf));\n        }\n        // 关闭资源\n        fr.close();\n    }\n}\n输出结果：\n程序\n员序</code></pre>\n<p>获取有效的字符改进，代码使用演示：</p>\n<pre><code class=\"java\">public class FISRead {\n    public static void main(String[] args) throws IOException {\n          // 使用文件名称创建流对象\n           FileReader fr = new FileReader(&quot;read.txt&quot;);\n          // 定义变量，保存有效字符个数\n        int len ；\n        // 定义字符数组，作为装字符数据的容器\n        char[] cbuf = new char[2];\n        // 循环读取\n        while ((len = fr.read(cbuf))!=-1) {\n            System.out.println(new String(cbuf,0,len));\n        }\n        // 关闭资源\n        fr.close();\n    }\n}\n\n输出结果：\n程序\n员</code></pre>\n<h2 id=\"3-3-字符输出流【Writer】\"><a href=\"#3-3-字符输出流【Writer】\" class=\"headerlink\" title=\"3.3 字符输出流【Writer】\"></a>3.3 字符输出流【Writer】</h2><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p>\n<ul>\n<li><code>void write(int c)</code> 写入单个字符。</li>\n<li><code>void write(char[] cbuf)</code>写入字符数组。 </li>\n<li><code>abstract  void write(char[] cbuf, int off, int len)</code>写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 </li>\n<li><code>void write(String str)</code>写入字符串。 </li>\n<li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li>\n<li><code>void flush()</code>刷新该流的缓冲。  </li>\n<li><code>void close()</code> 关闭此流，但要先刷新它。 </li>\n</ul>\n<h2 id=\"3-4-FileWriter类\"><a href=\"#3-4-FileWriter类\" class=\"headerlink\" title=\"3.4 FileWriter类\"></a>3.4 FileWriter类</h2><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p>\n<h3 id=\"构造方法-3\"><a href=\"#构造方法-3\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li>\n<li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li>\n</ul>\n<p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p>\n<ul>\n<li>构造举例，代码如下：</li>\n</ul>\n<pre><code class=\"java\">public class FileWriterConstructor {\n    public static void main(String[] args) throws IOException {\n            // 使用File对象创建流对象\n        File file = new File(&quot;a.txt&quot;);\n        FileWriter fw = new FileWriter(file);\n\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(&quot;b.txt&quot;);\n    }\n}</code></pre>\n<h3 id=\"基本写出数据\"><a href=\"#基本写出数据\" class=\"headerlink\" title=\"基本写出数据\"></a>基本写出数据</h3><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p>\n<pre><code class=\"java\">public class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(&quot;fw.txt&quot;);     \n          // 写出数据\n          fw.write(97); // 写出第1个字符\n          fw.write(&#39;b&#39;); // 写出第2个字符\n          fw.write(&#39;C&#39;); // 写出第3个字符\n          fw.write(30000); // 写出第4个字符，中文编码表中30000对应一个汉字。\n\n          /*\n        【注意】关闭资源时,与FileOutputStream不同。\n           如果不关闭,数据只是保存到缓冲区，并未保存到文件。\n        */\n        // fw.close();\n    }\n}\n输出结果：\nabC田</code></pre>\n<blockquote>\n<p>小贴士：</p>\n<ol>\n<li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li>\n<li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li>\n</ol>\n</blockquote>\n<h3 id=\"关闭和刷新\"><a href=\"#关闭和刷新\" class=\"headerlink\" title=\"关闭和刷新\"></a>关闭和刷新</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p>\n<ul>\n<li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li>\n<li><code>close</code>:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li>\n</ul>\n<p>代码使用演示：</p>\n<pre><code class=\"java\">public class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(&quot;fw.txt&quot;);\n        // 写出数据，通过flush\n        fw.write(&#39;刷&#39;); // 写出第1个字符\n        fw.flush();\n        fw.write(&#39;新&#39;); // 继续写出第2个字符，写出成功\n        fw.flush();\n\n          // 写出数据，通过close\n        fw.write(&#39;关&#39;); // 写出第1个字符\n        fw.close();\n        fw.write(&#39;闭&#39;); // 继续写出第2个字符,【报错】java.io.IOException: Stream closed\n        fw.close();\n    }\n}</code></pre>\n<blockquote>\n<p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p>\n</blockquote>\n<h3 id=\"写出其他数据\"><a href=\"#写出其他数据\" class=\"headerlink\" title=\"写出其他数据\"></a>写出其他数据</h3><ol>\n<li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(&quot;fw.txt&quot;);     \n          // 字符串转换为字节数组\n          char[] chars = &quot;Java程序员&quot;.toCharArray();\n\n          // 写出字符数组\n          fw.write(chars); // Java程序员\n\n        // 写出从索引2开始，2个字节。索引2是&#39;程&#39;，两个字节，也就是&#39;程序&#39;。\n        fw.write(b,2,2); // 程序\n\n          // 关闭资源\n        fos.close();\n    }\n}</code></pre>\n<ol start=\"2\">\n<li><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</li>\n</ol>\n<pre><code class=\"java\">public class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象\n        FileWriter fw = new FileWriter(&quot;fw.txt&quot;);     \n          // 字符串\n          String msg = &quot;Java程序员&quot;;\n\n          // 写出字符数组\n          fw.write(msg); //Java程序员\n\n        // 写出从索引2开始，2个字节。索引2是&#39;程&#39;，两个字节，也就是&#39;程序&#39;。\n        fw.write(msg,2,2);    // 程序\n\n        // 关闭资源\n        fos.close();\n    }\n}</code></pre>\n<ol start=\"3\">\n<li><strong>续写和换行</strong>：操作类似于FileOutputStream。</li>\n</ol>\n<pre><code class=\"java\">public class FWWrite {\n    public static void main(String[] args) throws IOException {\n        // 使用文件名称创建流对象，可以续写数据\n        FileWriter fw = new FileWriter(&quot;fw.txt&quot;，true);     \n          // 写出字符串\n        fw.write(&quot;Java&quot;);\n          // 写出换行\n          fw.write(&quot;\\r\\n&quot;);\n          // 写出字符串\n          fw.write(&quot;程序员&quot;);\n          // 关闭资源\n        fw.close();\n    }\n}\n输出结果:\nJava\n程序员</code></pre>\n<blockquote>\n<p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p>\n<p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p>\n</blockquote>\n<h1 id=\"第四章-缓冲流\"><a href=\"#第四章-缓冲流\" class=\"headerlink\" title=\"第四章 缓冲流\"></a>第四章 缓冲流</h1><p>学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p>\n<h2 id=\"4-1-概述\"><a href=\"#4-1-概述\" class=\"headerlink\" title=\"4.1 概述\"></a>4.1 概述</h2><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p>\n<ul>\n<li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li>\n<li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li>\n</ul>\n<p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p>\n<h2 id=\"4-2-字节缓冲流\"><a href=\"#4-2-字节缓冲流\" class=\"headerlink\" title=\"4.2 字节缓冲流\"></a>4.2 字节缓冲流</h2><h3 id=\"构造方法-4\"><a href=\"#构造方法-4\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li>\n<li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li>\n</ul>\n<p>构造举例，代码如下：</p>\n<pre><code class=\"java\">// 创建字节缓冲输入流\nBufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;bis.txt&quot;));\n// 创建字节缓冲输出流\nBufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;bos.txt&quot;));</code></pre>\n<h3 id=\"效率测试\"><a href=\"#效率测试\" class=\"headerlink\" title=\"效率测试\"></a>效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p>\n<ol>\n<li>基本流，代码如下：</li>\n</ol>\n<pre><code class=\"java\">public class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n          long start = System.currentTimeMillis();\n        // 创建流对象\n        try (\n            FileInputStream fis = new FileInputStream(&quot;jdk9.exe&quot;);\n            FileOutputStream fos = new FileOutputStream(&quot;copy.exe&quot;)\n        ){\n            // 读写数据\n            int b;\n            while ((b = fis.read()) != -1) {\n                fos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;普通流复制时间:&quot;+(end - start)+&quot; 毫秒&quot;);\n    }\n}\n\n十几分钟过去了...</code></pre>\n<ol start=\"2\">\n<li>缓冲流，代码如下：</li>\n</ol>\n<pre><code class=\"java\">public class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n        // 记录开始时间\n          long start = System.currentTimeMillis();\n        // 创建流对象\n        try (\n            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;jdk9.exe&quot;));\n         BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;copy.exe&quot;));\n        ){\n        // 读写数据\n            int b;\n            while ((b = bis.read()) != -1) {\n                bos.write(b);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;缓冲流复制时间:&quot;+(end - start)+&quot; 毫秒&quot;);\n    }\n}\n\n缓冲流复制时间:8016 毫秒</code></pre>\n<p>如何更快呢？</p>\n<p>使用数组的方式，代码如下：</p>\n<pre><code class=\"java\">public class BufferedDemo {\n    public static void main(String[] args) throws FileNotFoundException {\n          // 记录开始时间\n        long start = System.currentTimeMillis();\n        // 创建流对象\n        try (\n            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;jdk9.exe&quot;));\n         BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(&quot;copy.exe&quot;));\n        ){\n              // 读写数据\n            int len;\n            byte[] bytes = new byte[8*1024];\n            while ((len = bis.read(bytes)) != -1) {\n                bos.write(bytes, 0 , len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        // 记录结束时间\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;缓冲流使用数组复制时间:&quot;+(end - start)+&quot; 毫秒&quot;);\n    }\n}\n缓冲流使用数组复制时间:666 毫秒</code></pre>\n<h2 id=\"4-3-字符缓冲流\"><a href=\"#4-3-字符缓冲流\" class=\"headerlink\" title=\"4.3 字符缓冲流\"></a>4.3 字符缓冲流</h2><h3 id=\"构造方法-5\"><a href=\"#构造方法-5\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li>\n<li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li>\n</ul>\n<p>构造举例，代码如下：</p>\n<pre><code class=\"java\">// 创建字符缓冲输入流\nBufferedReader br = new BufferedReader(new FileReader(&quot;br.txt&quot;));\n// 创建字符缓冲输出流\nBufferedWriter bw = new BufferedWriter(new FileWriter(&quot;bw.txt&quot;));</code></pre>\n<h3 id=\"特有方法\"><a href=\"#特有方法\" class=\"headerlink\" title=\"特有方法\"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p>\n<ul>\n<li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li>\n<li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li>\n</ul>\n<p><code>readLine</code>方法演示，代码如下：</p>\n<pre><code class=\"java\">public class BufferedReaderDemo {\n    public static void main(String[] args) throws IOException {\n           // 创建流对象\n        BufferedReader br = new BufferedReader(new FileReader(&quot;in.txt&quot;));\n        // 定义字符串,保存读取的一行文字\n        String line  = null;\n          // 循环读取,读取到最后返回null\n        while ((line = br.readLine())!=null) {\n            System.out.print(line);\n            System.out.println(&quot;------&quot;);\n        }\n        // 释放资源\n        br.close();\n    }\n}</code></pre>\n<p><code>newLine</code>方法演示，代码如下：</p>\n<pre><code class=\"java\">public class BufferedWriterDemo throws IOException {\n    public static void main(String[] args) throws IOException  {\n          // 创建流对象\n        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;out.txt&quot;));\n          // 写出数据\n        bw.write(&quot;Java&quot;);\n          // 写出换行\n        bw.newLine();\n        bw.write(&quot;程序&quot;);\n        bw.newLine();\n        bw.write(&quot;员&quot;);\n        bw.newLine();\n        // 释放资源\n        bw.close();\n    }\n}\n输出效果:\nJava\n程序\n员</code></pre>\n<h1 id=\"第五章-转换流\"><a href=\"#第五章-转换流\" class=\"headerlink\" title=\"第五章 转换流\"></a>第五章 转换流</h1><h2 id=\"5-1-字符编码和字符集\"><a href=\"#5-1-字符编码和字符集\" class=\"headerlink\" title=\"5.1 字符编码和字符集\"></a>5.1 字符编码和字符集</h2><h3 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p>\n<p>编码:字符（能看懂的）–&gt;字节（看不懂的）</p>\n<p>解码:字节（看不懂的）–&gt;字符（能看懂的）</p>\n<ul>\n<li><p><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p>\n</li>\n<li><p><strong>编码表</strong>:生活中文字和计算机中二进制的对应规则</p>\n</li>\n</ul>\n<h3 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h3><ul>\n<li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li>\n</ul>\n<p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img src=\"1_charset.jpg\" alt></p>\n<p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p>\n<ul>\n<li><strong>ASCII字符集</strong> ：<ul>\n<li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li>\n<li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li>\n</ul>\n</li>\n<li><strong>ISO-8859-1字符集</strong>：<ul>\n<li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li>\n<li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li>\n</ul>\n</li>\n<li><strong>GBxxx字符集</strong>：<ul>\n<li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li>\n<li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li>\n<li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li>\n<li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li>\n</ul>\n</li>\n<li><strong>Unicode字符集</strong> ：<ul>\n<li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li>\n<li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li>\n<li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol>\n<li>128个US-ASCII字符，只需一个字节编码。</li>\n<li>拉丁文等字符，需要二个字节编码。 </li>\n<li>大部分常用字（含中文），使用三个字节编码。</li>\n<li>其他极少使用的Unicode辅助字符，使用四字节编码。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-2-编码引出的问题\"><a href=\"#5-2-编码引出的问题\" class=\"headerlink\" title=\"5.2 编码引出的问题\"></a>5.2 编码引出的问题</h2><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p>\n<pre><code class=\"java\">public class ReaderDemo {\n    public static void main(String[] args) throws IOException {\n        FileReader fileReader = new FileReader(&quot;E:\\\\File_GBK.txt&quot;);\n        int read;\n        while ((read = fileReader.read()) != -1) {\n            System.out.print((char)read);\n        }\n        fileReader.close();\n    }\n}\n输出结果：\n���</code></pre>\n<p>那么如何读取GBK编码的文件呢？ </p>\n<h2 id=\"5-3-InputStreamReader类\"><a href=\"#5-3-InputStreamReader类\" class=\"headerlink\" title=\"5.3 InputStreamReader类\"></a>5.3 InputStreamReader类</h2><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p>\n<h3 id=\"构造方法-6\"><a href=\"#构造方法-6\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li>\n<li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li>\n</ul>\n<p>构造举例，代码如下： </p>\n<pre><code class=\"java\">InputStreamReader isr = new InputStreamReader(new FileInputStream(&quot;in.txt&quot;));\nInputStreamReader isr2 = new InputStreamReader(new FileInputStream(&quot;in.txt&quot;) , &quot;GBK&quot;);</code></pre>\n<h3 id=\"指定编码读取\"><a href=\"#指定编码读取\" class=\"headerlink\" title=\"指定编码读取\"></a>指定编码读取</h3><pre><code class=\"java\">public class ReaderDemo2 {\n    public static void main(String[] args) throws IOException {\n          // 定义文件路径,文件为gbk编码\n        String FileName = &quot;E:\\\\file_gbk.txt&quot;;\n          // 创建流对象,默认UTF8编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(FileName));\n          // 创建流对象,指定GBK编码\n        InputStreamReader isr2 = new InputStreamReader(new FileInputStream(FileName) , &quot;GBK&quot;);\n        // 定义变量,保存字符\n        int read;\n          // 使用默认编码字符流读取,乱码\n        while ((read = isr.read()) != -1) {\n            System.out.print((char)read); // ��Һ�\n        }\n        isr.close();\n\n          // 使用指定编码字符流读取,正常解析\n        while ((read = isr2.read()) != -1) {\n            System.out.print((char)read);// 大家好\n        }\n        isr2.close();\n    }\n}</code></pre>\n<h2 id=\"5-4-OutputStreamWriter类\"><a href=\"#5-4-OutputStreamWriter类\" class=\"headerlink\" title=\"5.4 OutputStreamWriter类\"></a>5.4 OutputStreamWriter类</h2><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p>\n<h3 id=\"构造方法-7\"><a href=\"#构造方法-7\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li>\n<li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li>\n</ul>\n<p>构造举例，代码如下： </p>\n<pre><code class=\"java\">OutputStreamWriter isr = new OutputStreamWriter(new FileOutputStream(&quot;out.txt&quot;));\nOutputStreamWriter isr2 = new OutputStreamWriter(new FileOutputStream(&quot;out.txt&quot;) , &quot;GBK&quot;);</code></pre>\n<h3 id=\"指定编码写出\"><a href=\"#指定编码写出\" class=\"headerlink\" title=\"指定编码写出\"></a>指定编码写出</h3><pre><code class=\"java\">public class OutputDemo {\n    public static void main(String[] args) throws IOException {\n          // 定义文件路径\n        String FileName = &quot;E:\\\\out.txt&quot;;\n          // 创建流对象,默认UTF8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(FileName));\n        // 写出数据\n          osw.write(&quot;你好&quot;); // 保存为6个字节\n        osw.close();\n\n        // 定义文件路径\n        String FileName2 = &quot;E:\\\\out2.txt&quot;;\n         // 创建流对象,指定GBK编码\n        OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream(FileName2),&quot;GBK&quot;);\n        // 写出数据\n          osw2.write(&quot;你好&quot;);// 保存为4个字节\n        osw2.close();\n    }\n}</code></pre>\n<h3 id=\"转换流理解图解\"><a href=\"#转换流理解图解\" class=\"headerlink\" title=\"转换流理解图解\"></a>转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong><img src=\"2_zhuanhuan.jpg\" alt></p>\n<h2 id=\"5-5-练习：转换文件编码\"><a href=\"#5-5-练习：转换文件编码\" class=\"headerlink\" title=\"5.5 练习：转换文件编码\"></a>5.5 练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p>\n<h3 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><ol>\n<li>指定GBK编码的转换流，读取文本文件。</li>\n<li>使用UTF-8编码的转换流，写出文本文件。</li>\n</ol>\n<h3 id=\"案例实现-1\"><a href=\"#案例实现-1\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h3><pre><code class=\"java\">public class TransDemo {\n   public static void main(String[] args) {      \n        // 1.定义文件路径\n         String srcFile = &quot;file_gbk.txt&quot;;\n        String destFile = &quot;file_utf8.txt&quot;;\n        // 2.创建流对象\n        // 2.1 转换输入流,指定GBK编码\n        InputStreamReader isr = new InputStreamReader(new FileInputStream(srcFile) , &quot;GBK&quot;);\n        // 2.2 转换输出流,默认utf8编码\n        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile));\n        // 3.读写数据\n        // 3.1 定义数组\n        char[] cbuf = new char[1024];\n        // 3.2 定义长度\n        int len;\n        // 3.3 循环读取\n        while ((len = isr.read(cbuf))!=-1) {\n            // 循环写出\n              osw.write(cbuf,0,len);\n        }\n        // 4.释放资源\n        osw.close();\n        isr.close();\n      }\n}</code></pre>\n<h1 id=\"第六章-序列化\"><a href=\"#第六章-序列化\" class=\"headerlink\" title=\"第六章 序列化\"></a>第六章 序列化</h1><h2 id=\"6-1-概述\"><a href=\"#6-1-概述\" class=\"headerlink\" title=\"6.1 概述\"></a>6.1 概述</h2><p>Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p>\n<p>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： <img src=\"3_xuliehua.jpg\" alt></p>\n<h2 id=\"6-2-ObjectOutputStream类\"><a href=\"#6-2-ObjectOutputStream类\" class=\"headerlink\" title=\"6.2 ObjectOutputStream类\"></a>6.2 ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p>\n<h3 id=\"构造方法-8\"><a href=\"#构造方法-8\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li>\n</ul>\n<p>构造举例，代码如下：  </p>\n<pre><code class=\"java\">FileOutputStream fileOut = new FileOutputStream(&quot;employee.txt&quot;);\nObjectOutputStream out = new ObjectOutputStream(fileOut);</code></pre>\n<h3 id=\"序列化操作\"><a href=\"#序列化操作\" class=\"headerlink\" title=\"序列化操作\"></a>序列化操作</h3><ol>\n<li>一个对象要想序列化，必须满足两个条件:</li>\n</ol>\n<ul>\n<li>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li>\n<li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li>\n</ul>\n<pre><code class=\"java\">public class Employee implements java.io.Serializable {\n    public String name;\n    public String address;\n    public transient int age; // transient瞬态修饰成员,不会被序列化\n    public void addressCheck() {\n          System.out.println(&quot;Address  check : &quot; + name + &quot; -- &quot; + address);\n    }\n}</code></pre>\n<p>2.写出对象方法</p>\n<ul>\n<li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li>\n</ul>\n<pre><code class=\"java\">public class SerializeDemo{\n       public static void main(String [] args)   {\n        Employee e = new Employee();\n        e.name = &quot;zhangsan&quot;;\n        e.address = &quot;beiqinglu&quot;;\n        e.age = 20; \n        try {\n              // 创建序列化流对象\n          ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;employee.txt&quot;));\n            // 写出对象\n            out.writeObject(e);\n            // 释放资源\n            out.close();\n            fileOut.close();\n            System.out.println(&quot;Serialized data is saved&quot;); // 姓名，地址被序列化，年龄没有被序列化。\n        } catch(IOException i)   {\n            i.printStackTrace();\n        }\n       }\n}\n输出结果：\nSerialized data is saved</code></pre>\n<h2 id=\"6-3-ObjectInputStream类\"><a href=\"#6-3-ObjectInputStream类\" class=\"headerlink\" title=\"6.3 ObjectInputStream类\"></a>6.3 ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p>\n<h3 id=\"构造方法-9\"><a href=\"#构造方法-9\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定InputStream的ObjectInputStream。</li>\n</ul>\n<h3 id=\"反序列化操作1\"><a href=\"#反序列化操作1\" class=\"headerlink\" title=\"反序列化操作1\"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p>\n<ul>\n<li><code>public final Object readObject ()</code> : 读取一个对象。</li>\n</ul>\n<pre><code class=\"java\">public class DeserializeDemo {\n   public static void main(String [] args)   {\n        Employee e = null;\n        try {        \n             // 创建反序列化流\n             FileInputStream fileIn = new FileInputStream(&quot;employee.txt&quot;);\n             ObjectInputStream in = new ObjectInputStream(fileIn);\n             // 读取一个对象\n             e = (Employee) in.readObject();\n             // 释放资源\n             in.close();\n             fileIn.close();\n        }catch(IOException i) {\n             // 捕获其他异常\n             i.printStackTrace();\n             return;\n        }catch(ClassNotFoundException c)  {\n            // 捕获类找不到异常\n             System.out.println(&quot;Employee class not found&quot;);\n             c.printStackTrace();\n             return;\n        }\n        // 无异常,直接打印输出\n        System.out.println(&quot;Name: &quot; + e.name);    // zhangsan\n        System.out.println(&quot;Address: &quot; + e.address); // beiqinglu\n        System.out.println(&quot;age: &quot; + e.age); // 0\n    }\n}</code></pre>\n<p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p>\n<h3 id=\"反序列化操作2\"><a href=\"#反序列化操作2\" class=\"headerlink\" title=\"反序列化操作2\"></a><strong>反序列化操作2</strong></h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p>\n<ul>\n<li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li>\n<li>该类包含未知数据类型 </li>\n<li>该类没有可访问的无参数构造方法 </li>\n</ul>\n<p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p>\n<pre><code class=\"java\">public class Employee implements java.io.Serializable {\n     // 加入序列版本号\n     private static final long serialVersionUID = 1L;\n     public String name;\n     public String address;\n     // 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.\n     public int eid; \n\n     public void addressCheck() {\n         System.out.println(&quot;Address  check : &quot; + name + &quot; -- &quot; + address);\n     }\n}</code></pre>\n<h2 id=\"6-4-练习：序列化集合\"><a href=\"#6-4-练习：序列化集合\" class=\"headerlink\" title=\"6.4 练习：序列化集合\"></a>6.4 练习：序列化集合</h2><ol>\n<li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li>\n<li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li>\n</ol>\n<h3 id=\"案例分析-1\"><a href=\"#案例分析-1\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h3><ol>\n<li>把若干学生对象 ，保存到集合中。</li>\n<li>把集合序列化。</li>\n<li>反序列化读取时，只需要读取一次，转换为集合类型。</li>\n<li>遍历集合，可以打印所有的学生信息</li>\n</ol>\n<h3 id=\"案例实现-2\"><a href=\"#案例实现-2\" class=\"headerlink\" title=\"案例实现\"></a>案例实现</h3><pre><code class=\"java\">public class SerTest {\n    public static void main(String[] args) throws Exception {\n        // 创建 学生对象\n        Student student = new Student(&quot;老王&quot;, &quot;laow&quot;);\n        Student student2 = new Student(&quot;老张&quot;, &quot;laoz&quot;);\n        Student student3 = new Student(&quot;老李&quot;, &quot;laol&quot;);\n\n        ArrayList&lt;Student&gt; arrayList = new ArrayList&lt;&gt;();\n        arrayList.add(student);\n        arrayList.add(student2);\n        arrayList.add(student3);\n        // 序列化操作\n        // serializ(arrayList);\n\n        // 反序列化  \n        ObjectInputStream ois  = new ObjectInputStream(new FileInputStream(&quot;list.txt&quot;));\n        // 读取对象,强转为ArrayList类型\n        ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();\n\n          for (int i = 0; i &lt; list.size(); i++ ){\n              Student s = list.get(i);\n            System.out.println(s.getName()+&quot;--&quot;+ s.getPwd());\n          }\n    }\n\n    private static void serializ(ArrayList&lt;Student&gt; arrayList) throws Exception {\n        // 创建 序列化流 \n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;list.txt&quot;));\n        // 写出对象\n        oos.writeObject(arrayList);\n        // 释放资源\n        oos.close();\n    }\n}</code></pre>\n<h1 id=\"第七章-打印流\"><a href=\"#第七章-打印流\" class=\"headerlink\" title=\"第七章 打印流\"></a>第七章 打印流</h1><h2 id=\"7-1-概述\"><a href=\"#7-1-概述\" class=\"headerlink\" title=\"7.1 概述\"></a>7.1 概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p>\n<h2 id=\"7-2-PrintStream类\"><a href=\"#7-2-PrintStream类\" class=\"headerlink\" title=\"7.2 PrintStream类\"></a>7.2 PrintStream类</h2><h3 id=\"构造方法-10\"><a href=\"#构造方法-10\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><ul>\n<li><code>public PrintStream(String fileName)</code>： 使用指定的文件名创建一个新的打印流。</li>\n</ul>\n<p>构造举例，代码如下：  </p>\n<pre><code class=\"java\">PrintStream ps = new PrintStream(&quot;ps.txt&quot;)；</code></pre>\n<h3 id=\"改变打印流向\"><a href=\"#改变打印流向\" class=\"headerlink\" title=\"改变打印流向\"></a>改变打印流向</h3><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，改变它的流向。</p>\n<pre><code class=\"java\">public class PrintDemo {\n    public static void main(String[] args) throws IOException {\n        // 调用系统的打印流,控制台直接输出97\n        System.out.println(97);\n\n        // 创建打印流,指定文件的名称\n        PrintStream ps = new PrintStream(&quot;ps.txt&quot;);\n\n          // 设置系统的打印流流向,输出到ps.txt\n        System.setOut(ps);\n          // 调用系统的打印流,ps.txt中输出97\n        System.out.println(97);\n    }\n}</code></pre>\n"},{"title":"MySQL","img":"/medias/featureimages/7.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-12T07:13:50.000Z","password":null,"summary":"将前段时间学习的MySQL语句进行总结一下，嘻嘻🧐。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=413834822&auto=1&height=66\"></iframe></div>\n\n>将前段时间学习的MySQL语句进行总结一下，嘻嘻🧐。\n\n# MySQL分类\n---\n\n1. `DDL(Data Definition Language)`数据定义语言\n    用来定义数据对象：数据库、表、列等，其中关键字有：create、drop、alter等。\n2. `DML(Data Manipulation Language)`数据操纵语言\n    用来对数据库中表的数据进行增、删、改，其中关键字有：insert、delete、update等。\n3. `DQL(Data Query Language)`数据查询语言\n    用来查询数据库中表的数据，其中关键字：select、where等。\n4. `DCL(Data Control Language)`数据控制语言\n    用来定义数据库的访问权限以及创建用户，关键字：grant、revoke等。\n\n# DDL-操作数据库、表\n---\n## 操作数据库\n### 创建\n```MySQL\n# 创建数据库：\ncreate database 数据库名称;\n# 创建数据库，判断不存在，再创建：\ncreate database if not exists 数据库名称;\n# 创建数据库，并指定字符集：\ncreate database 数据库名称 character set 字符集名;\n```\n\n### 查询\n```MySQL\n# 查询所有数据库的名称\nshow databases;\n# 查询某个数据库的创建语句\nshow create database 数据库名称;\n```\n\n### 修改\n```MySQL\n# 查询所有数据库的名称\nalter database 数据库名称 character set 字符集;\n# 例如：\nalter database db1 character set utf8;\n```\n\n### 删除\n```MySQL\n# 删除数据库\ndrop database 数据库名称;\n# 判断数据库是否存在，存在再删除\ndrop database if exists 数据库名称;\n```\n\n### 使用数据库\n```MySQL\n# 使用数据库\nuse 数据库名称;\n# 查询当前正在使用的数据库\nselect database();\n```\n## 操作表\n### 创建\n```MySQL\n# 创建表\ncreate table 表名(\n    列名1 数据类型1,\n    列名2 数据类型2,\n    ...\n    列名n 数据类型n\n)\n```\n### 查询\n```MySQL\n# 查询某个数据库中的所有表名称\nshow tables;\n# 查询表结构\ndesc 表名;\n```\n### 修改\n```MySQL\n# 修改表名\nalter table 表名 rename to 新的表名;\n# 查询表结构\nalter table 表名 character set 字符集名称;\n# 添加一列\nalter table 表名 add 列名 数据类型;\n# 修改列名称 类型\nalter table 表名 change 列名 新列别 新数据类型;\nalter table 表名 modify 列名 新数据类型;\n# 删除列\nalter table 表名 drop 列名;\n```\n### 删除\n```MySQL\n# 删除表\ndrop table 表名;\n# 判断表是否存在，存在再删除\ndrop table if exists 表名;\n```\n# DML-增删改表中数据\n## 添加\n```MySQL\n# 添加数据\ninsert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);\n```\n>1. 列名和值要一一对应。\n2. 表名后不定义列名，则给所有列添加值`insert into 表名 values(值1,值2,...值n);`。\n3.除了数字类型，其他类型需要使用引号（单双都可以）引起来。\n\n## 删除\n```MySQL\n# 删除数据\ndelete from 表名 [where 条件];\n# 删除所有记录\n1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。\n```\n## 修改\n```MySQL\n# 修改数据\nupdate 表名 set 列名1 = 值1, 列名2 = 值2,...[where 条件];\n```\n# DQL-查询表中记录\n## 语法\n```MySQL\nselect\n    字段列表\nfrom\n    表名列表\nwhere\n    条件列表\ngroup by\n    分组字段\nhaving\n    分组之后的条件\norder by\n    排序\nlimit\n    分页限定\n```\n## 基础查询\n### 简单查询\n```MySQL\n# 查询所有列\nselect * from 表名;\n# 查询指定列\nselect 字段名1，字段名2... from 表名;\n```","source":"_posts/MySQL.md","raw":"---\ntitle: MySQL\nimg: /medias/featureimages/7.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-12 15:13:50\npassword:\nsummary: 将前段时间学习的MySQL语句进行总结一下，嘻嘻🧐。\ntags:\n    - MySQL\n    - 语言\ncategories:\n    - MySQL\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=413834822&auto=1&height=66\"></iframe></div>\n\n>将前段时间学习的MySQL语句进行总结一下，嘻嘻🧐。\n\n# MySQL分类\n---\n\n1. `DDL(Data Definition Language)`数据定义语言\n    用来定义数据对象：数据库、表、列等，其中关键字有：create、drop、alter等。\n2. `DML(Data Manipulation Language)`数据操纵语言\n    用来对数据库中表的数据进行增、删、改，其中关键字有：insert、delete、update等。\n3. `DQL(Data Query Language)`数据查询语言\n    用来查询数据库中表的数据，其中关键字：select、where等。\n4. `DCL(Data Control Language)`数据控制语言\n    用来定义数据库的访问权限以及创建用户，关键字：grant、revoke等。\n\n# DDL-操作数据库、表\n---\n## 操作数据库\n### 创建\n```MySQL\n# 创建数据库：\ncreate database 数据库名称;\n# 创建数据库，判断不存在，再创建：\ncreate database if not exists 数据库名称;\n# 创建数据库，并指定字符集：\ncreate database 数据库名称 character set 字符集名;\n```\n\n### 查询\n```MySQL\n# 查询所有数据库的名称\nshow databases;\n# 查询某个数据库的创建语句\nshow create database 数据库名称;\n```\n\n### 修改\n```MySQL\n# 查询所有数据库的名称\nalter database 数据库名称 character set 字符集;\n# 例如：\nalter database db1 character set utf8;\n```\n\n### 删除\n```MySQL\n# 删除数据库\ndrop database 数据库名称;\n# 判断数据库是否存在，存在再删除\ndrop database if exists 数据库名称;\n```\n\n### 使用数据库\n```MySQL\n# 使用数据库\nuse 数据库名称;\n# 查询当前正在使用的数据库\nselect database();\n```\n## 操作表\n### 创建\n```MySQL\n# 创建表\ncreate table 表名(\n    列名1 数据类型1,\n    列名2 数据类型2,\n    ...\n    列名n 数据类型n\n)\n```\n### 查询\n```MySQL\n# 查询某个数据库中的所有表名称\nshow tables;\n# 查询表结构\ndesc 表名;\n```\n### 修改\n```MySQL\n# 修改表名\nalter table 表名 rename to 新的表名;\n# 查询表结构\nalter table 表名 character set 字符集名称;\n# 添加一列\nalter table 表名 add 列名 数据类型;\n# 修改列名称 类型\nalter table 表名 change 列名 新列别 新数据类型;\nalter table 表名 modify 列名 新数据类型;\n# 删除列\nalter table 表名 drop 列名;\n```\n### 删除\n```MySQL\n# 删除表\ndrop table 表名;\n# 判断表是否存在，存在再删除\ndrop table if exists 表名;\n```\n# DML-增删改表中数据\n## 添加\n```MySQL\n# 添加数据\ninsert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);\n```\n>1. 列名和值要一一对应。\n2. 表名后不定义列名，则给所有列添加值`insert into 表名 values(值1,值2,...值n);`。\n3.除了数字类型，其他类型需要使用引号（单双都可以）引起来。\n\n## 删除\n```MySQL\n# 删除数据\ndelete from 表名 [where 条件];\n# 删除所有记录\n1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。\n```\n## 修改\n```MySQL\n# 修改数据\nupdate 表名 set 列名1 = 值1, 列名2 = 值2,...[where 条件];\n```\n# DQL-查询表中记录\n## 语法\n```MySQL\nselect\n    字段列表\nfrom\n    表名列表\nwhere\n    条件列表\ngroup by\n    分组字段\nhaving\n    分组之后的条件\norder by\n    排序\nlimit\n    分页限定\n```\n## 基础查询\n### 简单查询\n```MySQL\n# 查询所有列\nselect * from 表名;\n# 查询指定列\nselect 字段名1，字段名2... from 表名;\n```","slug":"MySQL","published":1,"updated":"2020-10-16T11:25:51.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogwh0012rouxoel7vuq1","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=413834822&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>将前段时间学习的MySQL语句进行总结一下，嘻嘻🧐。</p>\n</blockquote>\n<h1 id=\"MySQL分类\"><a href=\"#MySQL分类\" class=\"headerlink\" title=\"MySQL分类\"></a>MySQL分类</h1><hr>\n<ol>\n<li><code>DDL(Data Definition Language)</code>数据定义语言<br> 用来定义数据对象：数据库、表、列等，其中关键字有：create、drop、alter等。</li>\n<li><code>DML(Data Manipulation Language)</code>数据操纵语言<br> 用来对数据库中表的数据进行增、删、改，其中关键字有：insert、delete、update等。</li>\n<li><code>DQL(Data Query Language)</code>数据查询语言<br> 用来查询数据库中表的数据，其中关键字：select、where等。</li>\n<li><code>DCL(Data Control Language)</code>数据控制语言<br> 用来定义数据库的访问权限以及创建用户，关键字：grant、revoke等。</li>\n</ol>\n<h1 id=\"DDL-操作数据库、表\"><a href=\"#DDL-操作数据库、表\" class=\"headerlink\" title=\"DDL-操作数据库、表\"></a>DDL-操作数据库、表</h1><hr>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 创建数据库：\ncreate database 数据库名称;\n# 创建数据库，判断不存在，再创建：\ncreate database if not exists 数据库名称;\n# 创建数据库，并指定字符集：\ncreate database 数据库名称 character set 字符集名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 查询所有数据库的名称\nshow databases;\n# 查询某个数据库的创建语句\nshow create database 数据库名称;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 查询所有数据库的名称\nalter database 数据库名称 character set 字符集;\n# 例如：\nalter database db1 character set utf8;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 删除数据库\ndrop database 数据库名称;\n# 判断数据库是否存在，存在再删除\ndrop database if exists 数据库名称;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"使用数据库\"><a href=\"#使用数据库\" class=\"headerlink\" title=\"使用数据库\"></a>使用数据库</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 使用数据库\nuse 数据库名称;\n# 查询当前正在使用的数据库\nselect database();<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"操作表\"><a href=\"#操作表\" class=\"headerlink\" title=\"操作表\"></a>操作表</h2><h3 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 创建表\ncreate table 表名(\n    列名1 数据类型1,\n    列名2 数据类型2,\n    ...\n    列名n 数据类型n\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"查询-1\"><a href=\"#查询-1\" class=\"headerlink\" title=\"查询\"></a>查询</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 查询某个数据库中的所有表名称\nshow tables;\n# 查询表结构\ndesc 表名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"修改-1\"><a href=\"#修改-1\" class=\"headerlink\" title=\"修改\"></a>修改</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 修改表名\nalter table 表名 rename to 新的表名;\n# 查询表结构\nalter table 表名 character set 字符集名称;\n# 添加一列\nalter table 表名 add 列名 数据类型;\n# 修改列名称 类型\nalter table 表名 change 列名 新列别 新数据类型;\nalter table 表名 modify 列名 新数据类型;\n# 删除列\nalter table 表名 drop 列名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 删除表\ndrop table 表名;\n# 判断表是否存在，存在再删除\ndrop table if exists 表名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"DML-增删改表中数据\"><a href=\"#DML-增删改表中数据\" class=\"headerlink\" title=\"DML-增删改表中数据\"></a>DML-增删改表中数据</h1><h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 添加数据\ninsert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<ol>\n<li>列名和值要一一对应。</li>\n<li>表名后不定义列名，则给所有列添加值<code>insert into 表名 values(值1,值2,...值n);</code>。</li>\n<li>除了数字类型，其他类型需要使用引号（单双都可以）引起来。</li>\n</ol>\n</blockquote>\n<h2 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h2><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 删除数据\ndelete from 表名 [where 条件];\n# 删除所有记录\n1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"修改-2\"><a href=\"#修改-2\" class=\"headerlink\" title=\"修改\"></a>修改</h2><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 修改数据\nupdate 表名 set 列名1 = 值1, 列名2 = 值2,...[where 条件];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"DQL-查询表中记录\"><a href=\"#DQL-查询表中记录\" class=\"headerlink\" title=\"DQL-查询表中记录\"></a>DQL-查询表中记录</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\">select\n    字段列表\nfrom\n    表名列表\nwhere\n    条件列表\ngroup by\n    分组字段\nhaving\n    分组之后的条件\norder by\n    排序\nlimit\n    分页限定<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h2><h3 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><pre class=\"line-numbers language-MySQL\"><code class=\"language-MySQL\"># 查询所有列\nselect * from 表名;\n# 查询指定列\nselect 字段名1，字段名2... from 表名;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=413834822&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>将前段时间学习的MySQL语句进行总结一下，嘻嘻🧐。</p>\n</blockquote>\n<h1 id=\"MySQL分类\"><a href=\"#MySQL分类\" class=\"headerlink\" title=\"MySQL分类\"></a>MySQL分类</h1><hr>\n<ol>\n<li><code>DDL(Data Definition Language)</code>数据定义语言<br> 用来定义数据对象：数据库、表、列等，其中关键字有：create、drop、alter等。</li>\n<li><code>DML(Data Manipulation Language)</code>数据操纵语言<br> 用来对数据库中表的数据进行增、删、改，其中关键字有：insert、delete、update等。</li>\n<li><code>DQL(Data Query Language)</code>数据查询语言<br> 用来查询数据库中表的数据，其中关键字：select、where等。</li>\n<li><code>DCL(Data Control Language)</code>数据控制语言<br> 用来定义数据库的访问权限以及创建用户，关键字：grant、revoke等。</li>\n</ol>\n<h1 id=\"DDL-操作数据库、表\"><a href=\"#DDL-操作数据库、表\" class=\"headerlink\" title=\"DDL-操作数据库、表\"></a>DDL-操作数据库、表</h1><hr>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><pre><code class=\"MySQL\"># 创建数据库：\ncreate database 数据库名称;\n# 创建数据库，判断不存在，再创建：\ncreate database if not exists 数据库名称;\n# 创建数据库，并指定字符集：\ncreate database 数据库名称 character set 字符集名;</code></pre>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><pre><code class=\"MySQL\"># 查询所有数据库的名称\nshow databases;\n# 查询某个数据库的创建语句\nshow create database 数据库名称;</code></pre>\n<h3 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h3><pre><code class=\"MySQL\"># 查询所有数据库的名称\nalter database 数据库名称 character set 字符集;\n# 例如：\nalter database db1 character set utf8;</code></pre>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre><code class=\"MySQL\"># 删除数据库\ndrop database 数据库名称;\n# 判断数据库是否存在，存在再删除\ndrop database if exists 数据库名称;</code></pre>\n<h3 id=\"使用数据库\"><a href=\"#使用数据库\" class=\"headerlink\" title=\"使用数据库\"></a>使用数据库</h3><pre><code class=\"MySQL\"># 使用数据库\nuse 数据库名称;\n# 查询当前正在使用的数据库\nselect database();</code></pre>\n<h2 id=\"操作表\"><a href=\"#操作表\" class=\"headerlink\" title=\"操作表\"></a>操作表</h2><h3 id=\"创建-1\"><a href=\"#创建-1\" class=\"headerlink\" title=\"创建\"></a>创建</h3><pre><code class=\"MySQL\"># 创建表\ncreate table 表名(\n    列名1 数据类型1,\n    列名2 数据类型2,\n    ...\n    列名n 数据类型n\n)</code></pre>\n<h3 id=\"查询-1\"><a href=\"#查询-1\" class=\"headerlink\" title=\"查询\"></a>查询</h3><pre><code class=\"MySQL\"># 查询某个数据库中的所有表名称\nshow tables;\n# 查询表结构\ndesc 表名;</code></pre>\n<h3 id=\"修改-1\"><a href=\"#修改-1\" class=\"headerlink\" title=\"修改\"></a>修改</h3><pre><code class=\"MySQL\"># 修改表名\nalter table 表名 rename to 新的表名;\n# 查询表结构\nalter table 表名 character set 字符集名称;\n# 添加一列\nalter table 表名 add 列名 数据类型;\n# 修改列名称 类型\nalter table 表名 change 列名 新列别 新数据类型;\nalter table 表名 modify 列名 新数据类型;\n# 删除列\nalter table 表名 drop 列名;</code></pre>\n<h3 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h3><pre><code class=\"MySQL\"># 删除表\ndrop table 表名;\n# 判断表是否存在，存在再删除\ndrop table if exists 表名;</code></pre>\n<h1 id=\"DML-增删改表中数据\"><a href=\"#DML-增删改表中数据\" class=\"headerlink\" title=\"DML-增删改表中数据\"></a>DML-增删改表中数据</h1><h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><pre><code class=\"MySQL\"># 添加数据\ninsert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);</code></pre>\n<blockquote>\n<ol>\n<li>列名和值要一一对应。</li>\n<li>表名后不定义列名，则给所有列添加值<code>insert into 表名 values(值1,值2,...值n);</code>。</li>\n<li>除了数字类型，其他类型需要使用引号（单双都可以）引起来。</li>\n</ol>\n</blockquote>\n<h2 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h2><pre><code class=\"MySQL\"># 删除数据\ndelete from 表名 [where 条件];\n# 删除所有记录\n1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作\n2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</code></pre>\n<h2 id=\"修改-2\"><a href=\"#修改-2\" class=\"headerlink\" title=\"修改\"></a>修改</h2><pre><code class=\"MySQL\"># 修改数据\nupdate 表名 set 列名1 = 值1, 列名2 = 值2,...[where 条件];</code></pre>\n<h1 id=\"DQL-查询表中记录\"><a href=\"#DQL-查询表中记录\" class=\"headerlink\" title=\"DQL-查询表中记录\"></a>DQL-查询表中记录</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre><code class=\"MySQL\">select\n    字段列表\nfrom\n    表名列表\nwhere\n    条件列表\ngroup by\n    分组字段\nhaving\n    分组之后的条件\norder by\n    排序\nlimit\n    分页限定</code></pre>\n<h2 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h2><h3 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h3><pre><code class=\"MySQL\"># 查询所有列\nselect * from 表名;\n# 查询指定列\nselect 字段名1，字段名2... from 表名;</code></pre>\n"},{"title":"Windows Terminal配置","img":"/medias/featureimages/11.jpg","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-30T12:15:24.000Z","password":null,"summary":"推荐一下Windows自家推出的终端软件😍。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=22709835&auto=1&height=66\"></iframe></div>\n\n>推荐一下Windows自家推出的终端软件😍。\n\n`Windows Terminal`是微软发布的一款终端（简称WT）。与传统的`cmd`、`Powershell`相比，WT对定制的支持更好，同时又支持GPU对页面的渲染、emoji表情、多标签等的特点。[项目地址](https://github.com/microsoft/terminal)\n\n由于WT的可定制化非常之高，只需要很简单的步骤就可以调节各种界面元素以及操作习惯，所以把它打造成最适合自己的Windows终端程序是完全做得到的。\n\n![](1.png)\n\n# 安装WT\n---\n在`Microsoft store`中搜素`Windows Terminal`安装即可。\n![](2.png)\n\n# 美化配置\n---\n## 安装oh-my-posh\n1. 安装`scoop`\n首先在`Powershell`中输入以下代码来保证允许本地脚本的执行：\n```Powershell\nset-executionpolicy remotesigned -scope currentuser\n```\n然后安装`scoop`：\n```Powershell\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n```\n2. 更换字体\n`Powerline`字体有很多种，这里使用了[Fira Code](https://github.com/tonsky/FiraCode/releases)，下载后安装即可。\n3. 安装`choco`\n```Powershell\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n4. 安装`ConEmu`\n```Powershell\nchoco install ConEmu\n```\n5. 安装`posh-git`、`oh-my-posh`和`Get-ChildItemColor`\n前两个是`oh-my-posh`的必备组件，最后一个是美化`ls`命令的显示效果的插件，可以选装。\n```Powershell\nInstall-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\nInstall-Module -AllowClobber Get-ChildItemColor\n```\n6. 设置`Powershell`的`profile`\n```Powershell\nif (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }\n```\n7. 打开上步创建的$PROFILE文件并粘贴以下内容\n```Powershell\nImport-Module posh-git\nImport-Module oh-my-posh\nImport-Module Get-ChildItemColor\nSet-Theme Paradox\n# Chocolatey profile\n$ChocolateyProfile = \"$env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\"\nif (Test-Path($ChocolateyProfile)) {\n  Import-Module \"$ChocolateyProfile\"\n}\n```\n至此，`oh-my-posh`的安装就完成了，打开`WT`的效果如下：\n![](3.png)\n\n\n## 定制settings.json\n1. 打开设置，在`defaultProfile`中配置默认打开的终端程序。`copyOnSelect`选择`true`时可以右击实现`复制+粘贴`的功能。`initialCols`和`initialRows`用于指定初始窗口大小。\n\n2. 在`profiles`的中，可以单独为不同程序进行自定义设置。\n    * 首先是毛玻璃效果，这个需要调节两个参数，第一个是把`useAcrylic`设置为`true`，这是必须的，第二个`acrylicOpacity`则是调节毛玻璃的透明度，取值范围为0-1，0为完全透明，1为完全不透明。\n    \n    * `fontFace`是设置字体，使用的是`Fira Code`属性，只需要把字体名称填入进去就可以了。如果没有这个字体，则自动替换成`Consolas`。除此之外还可以调节字体大小，使用的是`fontSize`属性。\n    \n    * `background`属性可以设置背景颜色，`backgroundImage`则可以设置背景图片。注意：`backgroundImage`在毛玻璃特效打开时不起作用。\n\n    * `cursorColor`用于设置闪动的光标颜色，`cursorShape`则可以调节光标的样式。\n\n    * `commandLine`属性的值为命令行程序的路径，如`cmd`的路径为`cmd.exe`，`Git Bash`的路径为`/Git/bin/bash.exe`等。对应的也可以设置程序的图标和标题名，对应属性为`icon`和`name`。\n\n    * 关于`colorScheme`属性，这个属性用于修改配色方案，默认9种，可以在[官网](https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/color-schemes)中找到。当然也可以自己定义新的配色方案，在schemes中添加。更多的配色方案可以在[此处](https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal)找到\n\n大功告成，来张效果图：\n![](6.jpg)\n# 功能配置\n---\n## 将WT添加到右键\n1. 在Powershall中测试以下两个常量是否正常，若没有报错则继续\n```Powershall\necho %USERPROFILE%\necho %LOCALAPPDATA%\n```\n\n2. 在Powshall行中执行以下命令：\n```Powershall\nmkdir \"%USERPROFILE%\\AppData\\Local\\terminal\"\n``` \n\n3. 将windows Terminal图标复制到`%USERPROFILE%\\AppData\\Local\\terminal`文件夹中。图片自取：\n![](terminal.ico)\n3. 将下列代码复制保存为.reg注册表文件（WT的路径中用户名可能会不同需要修改），然后双击导入注册表即可。\n\n```Powershall\nWindows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt]\n@=\"Windows terminal here\"\n\"Icon\"=\"%USERPROFILE%\\\\AppData\\\\Local\\\\Terminal\\\\terminal.ico\"\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command]\n@=\"C:\\\\Users\\\\[用户名]\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe\"\n```\n4. 检查Windows Terminal配置文件中是否有`startingDirectory `属性，若没有则将其添加为\n```json\n\"startingDirectory\": \".\"\n```\n\n5. 若出现错误，可能是用户名为中文导致出错。建议打开注册表编辑器，检查`HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command`这个路径下的配置是否和文件配置的一样。\n\n6. 效果图：\n![](5.png)\n\n## 添加Git\n\n在配置文件的`profiles`中添加git配置。\n```json\n{\n  \"acrylicOpacity\" : 0.5,\n  \"closeOnExit\" : true,\n  \"colorScheme\": \"DjangoSmooth\",\n  \"commandline\" : \"F:\\\\software\\\\GitHub\\\\Git\\\\bin\\\\bash.exe\",\n  \"icon\": \"C:\\\\software\\\\Windows Terminal\\\\git.png\",\n  \"cursorColor\" : \"#FFFFFF\",\n  \"cursorShape\" : \"bar\",\n  \"fontFace\" : \"Fira Code\",\n  \"fontSize\" : 12,\n  \"historySize\" : 9001,\n  \"name\" : \"Git\",\n  \"padding\" : \"0, 0, 0, 0\",\n  \"snapOnInput\" : true,\n  \"startingDirectory\" : \".\",\n  \"useAcrylic\" : true\n}\n```\n其中`commandline`是git的安装路径，`icon`是图标路径，git图片自取：\n![](git.png)\n\n效果图：\n![](7.png)","source":"_posts/WT.md","raw":"---\ntitle: Windows Terminal配置\nimg: /medias/featureimages/11.jpg\ntop: true\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-30 20:15:24\npassword:\nsummary: 推荐一下Windows自家推出的终端软件😍。\ntags:\n- Windows Terminal\n- 工具\ncategories:\n- 软件\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=22709835&auto=1&height=66\"></iframe></div>\n\n>推荐一下Windows自家推出的终端软件😍。\n\n`Windows Terminal`是微软发布的一款终端（简称WT）。与传统的`cmd`、`Powershell`相比，WT对定制的支持更好，同时又支持GPU对页面的渲染、emoji表情、多标签等的特点。[项目地址](https://github.com/microsoft/terminal)\n\n由于WT的可定制化非常之高，只需要很简单的步骤就可以调节各种界面元素以及操作习惯，所以把它打造成最适合自己的Windows终端程序是完全做得到的。\n\n![](1.png)\n\n# 安装WT\n---\n在`Microsoft store`中搜素`Windows Terminal`安装即可。\n![](2.png)\n\n# 美化配置\n---\n## 安装oh-my-posh\n1. 安装`scoop`\n首先在`Powershell`中输入以下代码来保证允许本地脚本的执行：\n```Powershell\nset-executionpolicy remotesigned -scope currentuser\n```\n然后安装`scoop`：\n```Powershell\niex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n```\n2. 更换字体\n`Powerline`字体有很多种，这里使用了[Fira Code](https://github.com/tonsky/FiraCode/releases)，下载后安装即可。\n3. 安装`choco`\n```Powershell\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```\n4. 安装`ConEmu`\n```Powershell\nchoco install ConEmu\n```\n5. 安装`posh-git`、`oh-my-posh`和`Get-ChildItemColor`\n前两个是`oh-my-posh`的必备组件，最后一个是美化`ls`命令的显示效果的插件，可以选装。\n```Powershell\nInstall-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\nInstall-Module -AllowClobber Get-ChildItemColor\n```\n6. 设置`Powershell`的`profile`\n```Powershell\nif (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }\n```\n7. 打开上步创建的$PROFILE文件并粘贴以下内容\n```Powershell\nImport-Module posh-git\nImport-Module oh-my-posh\nImport-Module Get-ChildItemColor\nSet-Theme Paradox\n# Chocolatey profile\n$ChocolateyProfile = \"$env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\"\nif (Test-Path($ChocolateyProfile)) {\n  Import-Module \"$ChocolateyProfile\"\n}\n```\n至此，`oh-my-posh`的安装就完成了，打开`WT`的效果如下：\n![](3.png)\n\n\n## 定制settings.json\n1. 打开设置，在`defaultProfile`中配置默认打开的终端程序。`copyOnSelect`选择`true`时可以右击实现`复制+粘贴`的功能。`initialCols`和`initialRows`用于指定初始窗口大小。\n\n2. 在`profiles`的中，可以单独为不同程序进行自定义设置。\n    * 首先是毛玻璃效果，这个需要调节两个参数，第一个是把`useAcrylic`设置为`true`，这是必须的，第二个`acrylicOpacity`则是调节毛玻璃的透明度，取值范围为0-1，0为完全透明，1为完全不透明。\n    \n    * `fontFace`是设置字体，使用的是`Fira Code`属性，只需要把字体名称填入进去就可以了。如果没有这个字体，则自动替换成`Consolas`。除此之外还可以调节字体大小，使用的是`fontSize`属性。\n    \n    * `background`属性可以设置背景颜色，`backgroundImage`则可以设置背景图片。注意：`backgroundImage`在毛玻璃特效打开时不起作用。\n\n    * `cursorColor`用于设置闪动的光标颜色，`cursorShape`则可以调节光标的样式。\n\n    * `commandLine`属性的值为命令行程序的路径，如`cmd`的路径为`cmd.exe`，`Git Bash`的路径为`/Git/bin/bash.exe`等。对应的也可以设置程序的图标和标题名，对应属性为`icon`和`name`。\n\n    * 关于`colorScheme`属性，这个属性用于修改配色方案，默认9种，可以在[官网](https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/color-schemes)中找到。当然也可以自己定义新的配色方案，在schemes中添加。更多的配色方案可以在[此处](https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal)找到\n\n大功告成，来张效果图：\n![](6.jpg)\n# 功能配置\n---\n## 将WT添加到右键\n1. 在Powershall中测试以下两个常量是否正常，若没有报错则继续\n```Powershall\necho %USERPROFILE%\necho %LOCALAPPDATA%\n```\n\n2. 在Powshall行中执行以下命令：\n```Powershall\nmkdir \"%USERPROFILE%\\AppData\\Local\\terminal\"\n``` \n\n3. 将windows Terminal图标复制到`%USERPROFILE%\\AppData\\Local\\terminal`文件夹中。图片自取：\n![](terminal.ico)\n3. 将下列代码复制保存为.reg注册表文件（WT的路径中用户名可能会不同需要修改），然后双击导入注册表即可。\n\n```Powershall\nWindows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt]\n@=\"Windows terminal here\"\n\"Icon\"=\"%USERPROFILE%\\\\AppData\\\\Local\\\\Terminal\\\\terminal.ico\"\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command]\n@=\"C:\\\\Users\\\\[用户名]\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe\"\n```\n4. 检查Windows Terminal配置文件中是否有`startingDirectory `属性，若没有则将其添加为\n```json\n\"startingDirectory\": \".\"\n```\n\n5. 若出现错误，可能是用户名为中文导致出错。建议打开注册表编辑器，检查`HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command`这个路径下的配置是否和文件配置的一样。\n\n6. 效果图：\n![](5.png)\n\n## 添加Git\n\n在配置文件的`profiles`中添加git配置。\n```json\n{\n  \"acrylicOpacity\" : 0.5,\n  \"closeOnExit\" : true,\n  \"colorScheme\": \"DjangoSmooth\",\n  \"commandline\" : \"F:\\\\software\\\\GitHub\\\\Git\\\\bin\\\\bash.exe\",\n  \"icon\": \"C:\\\\software\\\\Windows Terminal\\\\git.png\",\n  \"cursorColor\" : \"#FFFFFF\",\n  \"cursorShape\" : \"bar\",\n  \"fontFace\" : \"Fira Code\",\n  \"fontSize\" : 12,\n  \"historySize\" : 9001,\n  \"name\" : \"Git\",\n  \"padding\" : \"0, 0, 0, 0\",\n  \"snapOnInput\" : true,\n  \"startingDirectory\" : \".\",\n  \"useAcrylic\" : true\n}\n```\n其中`commandline`是git的安装路径，`icon`是图标路径，git图片自取：\n![](git.png)\n\n效果图：\n![](7.png)","slug":"WT","published":1,"updated":"2021-07-06T08:52:16.439Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogwp0017rouxz83evpdv","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22709835&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>推荐一下Windows自家推出的终端软件😍。</p>\n</blockquote>\n<p><code>Windows Terminal</code>是微软发布的一款终端（简称WT）。与传统的<code>cmd</code>、<code>Powershell</code>相比，WT对定制的支持更好，同时又支持GPU对页面的渲染、emoji表情、多标签等的特点。<a href=\"https://github.com/microsoft/terminal\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>\n<p>由于WT的可定制化非常之高，只需要很简单的步骤就可以调节各种界面元素以及操作习惯，所以把它打造成最适合自己的Windows终端程序是完全做得到的。</p>\n<p><img src=\"1.png\" alt></p>\n<h1 id=\"安装WT\"><a href=\"#安装WT\" class=\"headerlink\" title=\"安装WT\"></a>安装WT</h1><hr>\n<p>在<code>Microsoft store</code>中搜素<code>Windows Terminal</code>安装即可。<br><img src=\"2.png\" alt></p>\n<h1 id=\"美化配置\"><a href=\"#美化配置\" class=\"headerlink\" title=\"美化配置\"></a>美化配置</h1><hr>\n<h2 id=\"安装oh-my-posh\"><a href=\"#安装oh-my-posh\" class=\"headerlink\" title=\"安装oh-my-posh\"></a>安装oh-my-posh</h2><ol>\n<li>安装<code>scoop</code><br>首先在<code>Powershell</code>中输入以下代码来保证允许本地脚本的执行：<pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">set-executionpolicy remotesigned -scope currentuser<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n然后安装<code>scoop</code>：<pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">iex (new-object net.webclient).downloadstring('https://get.scoop.sh')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>更换字体<br><code>Powerline</code>字体有很多种，这里使用了<a href=\"https://github.com/tonsky/FiraCode/releases\" target=\"_blank\" rel=\"noopener\">Fira Code</a>，下载后安装即可。</li>\n<li>安装<code>choco</code><pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>安装<code>ConEmu</code><pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">choco install ConEmu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>安装<code>posh-git</code>、<code>oh-my-posh</code>和<code>Get-ChildItemColor</code><br>前两个是<code>oh-my-posh</code>的必备组件，最后一个是美化<code>ls</code>命令的显示效果的插件，可以选装。<pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">Install-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\nInstall-Module -AllowClobber Get-ChildItemColor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n</li>\n<li>设置<code>Powershell</code>的<code>profile</code><pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li>打开上步创建的$PROFILE文件并粘贴以下内容<pre class=\"line-numbers language-Powershell\"><code class=\"language-Powershell\">Import-Module posh-git\nImport-Module oh-my-posh\nImport-Module Get-ChildItemColor\nSet-Theme Paradox\n# Chocolatey profile\n$ChocolateyProfile = \"$env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1\"\nif (Test-Path($ChocolateyProfile)) {\nImport-Module \"$ChocolateyProfile\"\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n至此，<code>oh-my-posh</code>的安装就完成了，打开<code>WT</code>的效果如下：<br><img src=\"3.png\" alt></li>\n</ol>\n<h2 id=\"定制settings-json\"><a href=\"#定制settings-json\" class=\"headerlink\" title=\"定制settings.json\"></a>定制settings.json</h2><ol>\n<li><p>打开设置，在<code>defaultProfile</code>中配置默认打开的终端程序。<code>copyOnSelect</code>选择<code>true</code>时可以右击实现<code>复制+粘贴</code>的功能。<code>initialCols</code>和<code>initialRows</code>用于指定初始窗口大小。</p>\n</li>\n<li><p>在<code>profiles</code>的中，可以单独为不同程序进行自定义设置。</p>\n<ul>\n<li><p>首先是毛玻璃效果，这个需要调节两个参数，第一个是把<code>useAcrylic</code>设置为<code>true</code>，这是必须的，第二个<code>acrylicOpacity</code>则是调节毛玻璃的透明度，取值范围为0-1，0为完全透明，1为完全不透明。</p>\n</li>\n<li><p><code>fontFace</code>是设置字体，使用的是<code>Fira Code</code>属性，只需要把字体名称填入进去就可以了。如果没有这个字体，则自动替换成<code>Consolas</code>。除此之外还可以调节字体大小，使用的是<code>fontSize</code>属性。</p>\n</li>\n<li><p><code>background</code>属性可以设置背景颜色，<code>backgroundImage</code>则可以设置背景图片。注意：<code>backgroundImage</code>在毛玻璃特效打开时不起作用。</p>\n</li>\n<li><p><code>cursorColor</code>用于设置闪动的光标颜色，<code>cursorShape</code>则可以调节光标的样式。</p>\n</li>\n<li><p><code>commandLine</code>属性的值为命令行程序的路径，如<code>cmd</code>的路径为<code>cmd.exe</code>，<code>Git Bash</code>的路径为<code>/Git/bin/bash.exe</code>等。对应的也可以设置程序的图标和标题名，对应属性为<code>icon</code>和<code>name</code>。</p>\n</li>\n<li><p>关于<code>colorScheme</code>属性，这个属性用于修改配色方案，默认9种，可以在<a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/color-schemes\" target=\"_blank\" rel=\"noopener\">官网</a>中找到。当然也可以自己定义新的配色方案，在schemes中添加。更多的配色方案可以在<a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal\" target=\"_blank\" rel=\"noopener\">此处</a>找到</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>大功告成，来张效果图：<br><img src=\"6.jpg\" alt></p>\n<h1 id=\"功能配置\"><a href=\"#功能配置\" class=\"headerlink\" title=\"功能配置\"></a>功能配置</h1><hr>\n<h2 id=\"将WT添加到右键\"><a href=\"#将WT添加到右键\" class=\"headerlink\" title=\"将WT添加到右键\"></a>将WT添加到右键</h2><ol>\n<li><p>在Powershall中测试以下两个常量是否正常，若没有报错则继续</p>\n<pre class=\"line-numbers language-Powershall\"><code class=\"language-Powershall\">echo %USERPROFILE%\necho %LOCALAPPDATA%<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>在Powshall行中执行以下命令：</p>\n<pre class=\"line-numbers language-Powershall\"><code class=\"language-Powershall\">mkdir \"%USERPROFILE%\\AppData\\Local\\terminal\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>将windows Terminal图标复制到<code>%USERPROFILE%\\AppData\\Local\\terminal</code>文件夹中。图片自取：<br><img src=\"terminal.ico\" alt></p>\n</li>\n<li><p>将下列代码复制保存为.reg注册表文件（WT的路径中用户名可能会不同需要修改），然后双击导入注册表即可。</p>\n</li>\n</ol>\n<pre class=\"line-numbers language-Powershall\"><code class=\"language-Powershall\">Windows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt]\n@=\"Windows terminal here\"\n\"Icon\"=\"%USERPROFILE%\\\\AppData\\\\Local\\\\Terminal\\\\terminal.ico\"\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command]\n@=\"C:\\\\Users\\\\[用户名]\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li><p>检查Windows Terminal配置文件中是否有<code>startingDirectory</code>属性，若没有则将其添加为</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token property\">\"startingDirectory\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>若出现错误，可能是用户名为中文导致出错。建议打开注册表编辑器，检查<code>HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command</code>这个路径下的配置是否和文件配置的一样。</p>\n</li>\n<li><p>效果图：<br><img src=\"5.png\" alt></p>\n</li>\n</ol>\n<h2 id=\"添加Git\"><a href=\"#添加Git\" class=\"headerlink\" title=\"添加Git\"></a>添加Git</h2><p>在配置文件的<code>profiles</code>中添加git配置。</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"acrylicOpacity\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"closeOnExit\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"colorScheme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"DjangoSmooth\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"commandline\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"F:\\\\software\\\\GitHub\\\\Git\\\\bin\\\\bash.exe\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"icon\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\software\\\\Windows Terminal\\\\git.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"cursorColor\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"#FFFFFF\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"cursorShape\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"fontFace\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Fira Code\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"fontSize\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"historySize\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">9001</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Git\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"padding\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"0, 0, 0, 0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"snapOnInput\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"startingDirectory\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"useAcrylic\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>commandline</code>是git的安装路径，<code>icon</code>是图标路径，git图片自取：<br><img src=\"git.png\" alt></p>\n<p>效果图：<br><img src=\"7.png\" alt></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=22709835&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>推荐一下Windows自家推出的终端软件😍。</p>\n</blockquote>\n<p><code>Windows Terminal</code>是微软发布的一款终端（简称WT）。与传统的<code>cmd</code>、<code>Powershell</code>相比，WT对定制的支持更好，同时又支持GPU对页面的渲染、emoji表情、多标签等的特点。<a href=\"https://github.com/microsoft/terminal\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>\n<p>由于WT的可定制化非常之高，只需要很简单的步骤就可以调节各种界面元素以及操作习惯，所以把它打造成最适合自己的Windows终端程序是完全做得到的。</p>\n<p><img src=\"1.png\" alt></p>\n<h1 id=\"安装WT\"><a href=\"#安装WT\" class=\"headerlink\" title=\"安装WT\"></a>安装WT</h1><hr>\n<p>在<code>Microsoft store</code>中搜素<code>Windows Terminal</code>安装即可。<br><img src=\"2.png\" alt></p>\n<h1 id=\"美化配置\"><a href=\"#美化配置\" class=\"headerlink\" title=\"美化配置\"></a>美化配置</h1><hr>\n<h2 id=\"安装oh-my-posh\"><a href=\"#安装oh-my-posh\" class=\"headerlink\" title=\"安装oh-my-posh\"></a>安装oh-my-posh</h2><ol>\n<li>安装<code>scoop</code><br>首先在<code>Powershell</code>中输入以下代码来保证允许本地脚本的执行：<pre><code class=\"Powershell\">set-executionpolicy remotesigned -scope currentuser</code></pre>\n然后安装<code>scoop</code>：<pre><code class=\"Powershell\">iex (new-object net.webclient).downloadstring(&#39;https://get.scoop.sh&#39;)</code></pre>\n</li>\n<li>更换字体<br><code>Powerline</code>字体有很多种，这里使用了<a href=\"https://github.com/tonsky/FiraCode/releases\" target=\"_blank\" rel=\"noopener\">Fira Code</a>，下载后安装即可。</li>\n<li>安装<code>choco</code><pre><code class=\"Powershell\">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))</code></pre>\n</li>\n<li>安装<code>ConEmu</code><pre><code class=\"Powershell\">choco install ConEmu</code></pre>\n</li>\n<li>安装<code>posh-git</code>、<code>oh-my-posh</code>和<code>Get-ChildItemColor</code><br>前两个是<code>oh-my-posh</code>的必备组件，最后一个是美化<code>ls</code>命令的显示效果的插件，可以选装。<pre><code class=\"Powershell\">Install-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\nInstall-Module -AllowClobber Get-ChildItemColor</code></pre>\n</li>\n<li>设置<code>Powershell</code>的<code>profile</code><pre><code class=\"Powershell\">if (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }</code></pre>\n</li>\n<li>打开上步创建的$PROFILE文件并粘贴以下内容<pre><code class=\"Powershell\">Import-Module posh-git\nImport-Module oh-my-posh\nImport-Module Get-ChildItemColor\nSet-Theme Paradox\n# Chocolatey profile\n$ChocolateyProfile = &quot;$env:ChocolateyInstall\\helpers\\chocolateyProfile.psm1&quot;\nif (Test-Path($ChocolateyProfile)) {\nImport-Module &quot;$ChocolateyProfile&quot;\n}</code></pre>\n至此，<code>oh-my-posh</code>的安装就完成了，打开<code>WT</code>的效果如下：<br><img src=\"3.png\" alt></li>\n</ol>\n<h2 id=\"定制settings-json\"><a href=\"#定制settings-json\" class=\"headerlink\" title=\"定制settings.json\"></a>定制settings.json</h2><ol>\n<li><p>打开设置，在<code>defaultProfile</code>中配置默认打开的终端程序。<code>copyOnSelect</code>选择<code>true</code>时可以右击实现<code>复制+粘贴</code>的功能。<code>initialCols</code>和<code>initialRows</code>用于指定初始窗口大小。</p>\n</li>\n<li><p>在<code>profiles</code>的中，可以单独为不同程序进行自定义设置。</p>\n<ul>\n<li><p>首先是毛玻璃效果，这个需要调节两个参数，第一个是把<code>useAcrylic</code>设置为<code>true</code>，这是必须的，第二个<code>acrylicOpacity</code>则是调节毛玻璃的透明度，取值范围为0-1，0为完全透明，1为完全不透明。</p>\n</li>\n<li><p><code>fontFace</code>是设置字体，使用的是<code>Fira Code</code>属性，只需要把字体名称填入进去就可以了。如果没有这个字体，则自动替换成<code>Consolas</code>。除此之外还可以调节字体大小，使用的是<code>fontSize</code>属性。</p>\n</li>\n<li><p><code>background</code>属性可以设置背景颜色，<code>backgroundImage</code>则可以设置背景图片。注意：<code>backgroundImage</code>在毛玻璃特效打开时不起作用。</p>\n</li>\n<li><p><code>cursorColor</code>用于设置闪动的光标颜色，<code>cursorShape</code>则可以调节光标的样式。</p>\n</li>\n<li><p><code>commandLine</code>属性的值为命令行程序的路径，如<code>cmd</code>的路径为<code>cmd.exe</code>，<code>Git Bash</code>的路径为<code>/Git/bin/bash.exe</code>等。对应的也可以设置程序的图标和标题名，对应属性为<code>icon</code>和<code>name</code>。</p>\n</li>\n<li><p>关于<code>colorScheme</code>属性，这个属性用于修改配色方案，默认9种，可以在<a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/customize-settings/color-schemes\" target=\"_blank\" rel=\"noopener\">官网</a>中找到。当然也可以自己定义新的配色方案，在schemes中添加。更多的配色方案可以在<a href=\"https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal\" target=\"_blank\" rel=\"noopener\">此处</a>找到</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>大功告成，来张效果图：<br><img src=\"6.jpg\" alt></p>\n<h1 id=\"功能配置\"><a href=\"#功能配置\" class=\"headerlink\" title=\"功能配置\"></a>功能配置</h1><hr>\n<h2 id=\"将WT添加到右键\"><a href=\"#将WT添加到右键\" class=\"headerlink\" title=\"将WT添加到右键\"></a>将WT添加到右键</h2><ol>\n<li><p>在Powershall中测试以下两个常量是否正常，若没有报错则继续</p>\n<pre><code class=\"Powershall\">echo %USERPROFILE%\necho %LOCALAPPDATA%</code></pre>\n</li>\n<li><p>在Powshall行中执行以下命令：</p>\n<pre><code class=\"Powershall\">mkdir &quot;%USERPROFILE%\\AppData\\Local\\terminal&quot;</code></pre>\n</li>\n<li><p>将windows Terminal图标复制到<code>%USERPROFILE%\\AppData\\Local\\terminal</code>文件夹中。图片自取：<br><img src=\"terminal.ico\" alt></p>\n</li>\n<li><p>将下列代码复制保存为.reg注册表文件（WT的路径中用户名可能会不同需要修改），然后双击导入注册表即可。</p>\n</li>\n</ol>\n<pre><code class=\"Powershall\">Windows Registry Editor Version 5.00\n\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt]\n@=&quot;Windows terminal here&quot;\n&quot;Icon&quot;=&quot;%USERPROFILE%\\\\AppData\\\\Local\\\\Terminal\\\\terminal.ico&quot;\n[HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command]\n@=&quot;C:\\\\Users\\\\[用户名]\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\wt.exe&quot;</code></pre>\n<ol start=\"4\">\n<li><p>检查Windows Terminal配置文件中是否有<code>startingDirectory</code>属性，若没有则将其添加为</p>\n<pre><code class=\"json\">&quot;startingDirectory&quot;: &quot;.&quot;</code></pre>\n</li>\n<li><p>若出现错误，可能是用户名为中文导致出错。建议打开注册表编辑器，检查<code>HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\wt\\command</code>这个路径下的配置是否和文件配置的一样。</p>\n</li>\n<li><p>效果图：<br><img src=\"5.png\" alt></p>\n</li>\n</ol>\n<h2 id=\"添加Git\"><a href=\"#添加Git\" class=\"headerlink\" title=\"添加Git\"></a>添加Git</h2><p>在配置文件的<code>profiles</code>中添加git配置。</p>\n<pre><code class=\"json\">{\n  &quot;acrylicOpacity&quot; : 0.5,\n  &quot;closeOnExit&quot; : true,\n  &quot;colorScheme&quot;: &quot;DjangoSmooth&quot;,\n  &quot;commandline&quot; : &quot;F:\\\\software\\\\GitHub\\\\Git\\\\bin\\\\bash.exe&quot;,\n  &quot;icon&quot;: &quot;C:\\\\software\\\\Windows Terminal\\\\git.png&quot;,\n  &quot;cursorColor&quot; : &quot;#FFFFFF&quot;,\n  &quot;cursorShape&quot; : &quot;bar&quot;,\n  &quot;fontFace&quot; : &quot;Fira Code&quot;,\n  &quot;fontSize&quot; : 12,\n  &quot;historySize&quot; : 9001,\n  &quot;name&quot; : &quot;Git&quot;,\n  &quot;padding&quot; : &quot;0, 0, 0, 0&quot;,\n  &quot;snapOnInput&quot; : true,\n  &quot;startingDirectory&quot; : &quot;.&quot;,\n  &quot;useAcrylic&quot; : true\n}</code></pre>\n<p>其中<code>commandline</code>是git的安装路径，<code>icon</code>是图标路径，git图片自取：<br><img src=\"git.png\" alt></p>\n<p>效果图：<br><img src=\"7.png\" alt></p>\n"},{"title":"OpenCV讲解","img":"/medias/featureimages/8.jpg","top":false,"cover":true,"toc":true,"mathjax":true,"date":"2019-12-08T13:09:20.000Z","password":null,"summary":"讲解python中OpenCV的相关函数🙈","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=709553&auto=1&height=66\"></iframe></div>\n\n>主要讲解python中OpenCV的相关函数🙈，使用的~~OpenCV3~~OpenCV4版本\n\n# 环境配置地址\n---\n- [Anaconda](https://www.anaconda.com/download/)\n- [Python_whl](https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv)\n- [PyCharm](https://www.jetbrains.com/pycharm/)\n\n\n# 图像读取-显示-保存\n---\n## 数据读取-图像\n- cv2.IMREAD_COLOR：彩色图像\n- cv2.IMREAD_GRAYSCALE：灰度图像\n\n```python\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\n# 读取彩色图像\nimg = cv2.imread(\"1.jpg\", cv2.IMREAD_COLOR)\n# 读取灰度图像\nimg2 =cv2.imread('2.jpg',cv2.IMREAD_GRAYSCALE)\n```\n\n## 图像的显示\n\n```python\n#图像的显示,也可以创建多个窗口\ncv2.imshow('image',img) \n# 等待时间，毫秒级，0表示任意键终止\ncv2.waitKey(0) \ncv2.destroyAllWindows()\n```\n\n## 图像的保存\n\n```python\n#保存\ncv2.imwrite('my_img.jpg',img)\n```\n\n## 数据读取-视频\n- cv2.VideoCapture可以捕获摄像头，用数字来控制不同的设备，例如0,1。\n- 如果是视频文件，直接指定好路径即可。\n\n```python\n# 读取摄像头\n# vc = cv2.VideoCapture(0)\n# 读取视频\nvc = cv2.VideoCapture('test.mp4')\n# 检查是否打开正确\nif vc.isOpened(): \n    open, frame = vc.read()\nelse:\n    open = False\nwhile open:\n    ret, frame = vc.read()\n    if frame is None:\n        break\n    if ret == True:\n        gray = cv2.cvtColor(frame,  cv2.COLOR_BGR2GRAY)\n        cv2.imshow('result', gray)\n        # 等待1000ms或者按下按键ESC时退出\n        if cv2.waitKey(1000) & 0xFF == 27:\n            break\nvc.release()\ncv2.destroyAllWindows()\n```\n\n## 截取部分图像数据\n\n```python\ndef cv_show(name,img):\n    cv2.imshow(name,img) \n    cv2.waitKey(0) \n    cv2.destroyAllWindows()\nimg=cv2.imread('cat.jpg')\n# 截取图片\ncat=img[0:50,0:200] \ncv_show('cat',cat)\n```\n## 颜色通道提取\n\n```python\nb,g,r=cv2.split(img)\nimg=cv2.merge((b,g,r))\n# 只保留R\ncur_img = img.copy()\ncur_img[:,:,0] = 0\ncur_img[:,:,1] = 0\n# 只保留G\ncur_img = img.copy()\ncur_img[:,:,0] = 0\ncur_img[:,:,2] = 0\n# 只保留B\ncur_img = img.copy()\ncur_img[:,:,1] = 0\ncur_img[:,:,2] = 0\n```\n\n## 图像的融合\n\n```python\nimg_bear = cv2.imread(\"1.jpg\")\nimg_people = cv2.imread(\"2.jpg\")\nimg_bear.shape #(639, 639, 3)\nimg_people.shape #(568, 568, 3)\nimg_bear = cv2.resize(img_bear, (568,568))\nimg_bear.shape #(568, 568, 3)\n# res=ax+by+c\nres = cv2.addWeighted(img_bear, 0.4, img_people, 0.6, 0)\nplt.imshow(res)\n```\n![](1.png)\n\n## 图像尺寸设置\n- x轴变为两倍\n\n```python\nres = cv2.resize(img_bear, (0, 0), fx=2, fy=1)\nplt.imshow(res)\n```\n![](2.png)\n- y轴变为两倍\n\n```python\nres = cv2.resize(img_bear, (0, 0), fx=1, fy=2)\nplt.imshow(res)\n```\n![](3.png)\n\n# 图像处理\n---\n\n## 图像阈值\n`ret, dst = cv2.threshold(src, thresh, maxval, type)`\n- src： 输入图，只能输入单通道图像，通常来说为灰度图\n- dst： 输出图\n- thresh： 阈值\n- maxval： 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值\n- type：二值化操作的类型，包含以下5种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV； cv2.THRESH_TRUNC； cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV\n- cv2.THRESH_BINARY 超过阈值部分取maxval（最大值），否则取0\n- cv2.THRESH_BINARY_INV THRESH_BINARY的反转\n- cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变\n- cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0\n- cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转\n\n```python\nimg_gray = cv2.imread(\"2.jpg\", cv2.IMREAD_GRAYSCALE)\nres, thresh1 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_BINARY)\nres, thresh2 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_BINARY_INV)\nres, thresh3 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TRUNC)\nres, thresh4 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TRIANGLE)\nres, thresh5 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TOZERO)\nres, thresh6 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TOZERO_INV)\n# res, thresh7 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_MASK)\n# res, thresh8 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_OTSU)\ntitles = ['Original Image', 'BINARY', 'BINARY_INV', 'TRUNC', 'TRIANGLE','TOZERO', 'TOZERO_INV','MASK','OTSU']\nimages = [img_gray, thresh1, thresh2, thresh3, thresh4, thresh5, thresh6, thresh7, thresh8]\n\nfor i in range(6):\n    plt.subplot(2, 3, i + 1)\n    plt.imshow(images[i], 'gray')\n    plt.title(titles[i])\n    plt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n![](4.png)\n\n## 图像平滑\n```python\nimg = cv2.imread(\"lenaNoise.png\")\nplt.imshow(img[:,:,(2,1,0)])\n```\n![](5.png)\n\n```python\n# 均值滤波\n# 简单的平均卷积操作\nblur = cv2.blur(img, (3, 3))\n# cv_show('blur', blur)\n# 方框滤波\n# 基本和均值一样，可以选择归一化,容易越界\nbox = cv2.boxFilter(img,-1,(3,3), normalize=False)\n# 方框滤波\n# 基本和均值一样，可以选择归一化\nbox = cv2.boxFilter(img,-1,(3,3), normalize=True)\n# 高斯滤波\n# 高斯模糊的卷积核里的数值是满足高斯分布，相当于更重视中间的\naussian = cv2.GaussianBlur(img, (5, 5), 1)\n# 中值滤波\n# 相当于用中值代替\nmedian = cv2.medianBlur(img, 5)  # 中值滤波,指定大小是5×5\n# 展示所有的\nres = np.hstack((blur,aussian,median))\nplt.imshow(res[:,:,(2,1,0)])\n```\n\n![](7.png)\n\n## 形态学处理\n### 腐蚀\n```python\nimg = cv2.imread('dige.png')\nkernel = np.ones((30,30), np.uint8)\nerosion_1 = cv2.erode(pie, kernel, iterations=1)# 腐蚀1次\nerosion_2 = cv2.erode(pie,kernel,iterations = 2)# 2次\nerosion_3 = cv2.erode(pie,kernel,iterations = 3)# 3次\nres = np.hstack((erosion_1, erosion_2, erosion_3))\nplt.imshow(res[:,:,(2,1,0)])\n```\n![](8.png)\n\n### 膨胀\n\n```python\npie = cv2.imread('pie.png')\nkernel = np.ones((30,30),np.uint8) \ndilate_1 = cv2.dilate(pie,kernel,iterations = 1)\ndilate_2 = cv2.dilate(pie,kernel,iterations = 2)\ndilate_3 = cv2.dilate(pie,kernel,iterations = 3)\nres = np.hstack((dilate_1,dilate_2,dilate_3))\nplt.imshow(res[:,:,(2,1,0)])\n```\n![](9.png)\n\n### 开运算和闭运算\n\n```python\n# 开：先腐蚀，再膨胀\nimg = cv2.imread('dige.png')\nkernel = np.ones((5,5),np.uint8) \nopening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)\nplt.imshow(opening)\n```\n![](10.png)\n```python\n# 闭：先膨胀，再腐蚀\nimg = cv2.imread('dige.png')\nkernel = np.ones((5,5),np.uint8) \nclosing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)\nplt.imshow(closing)\n```\n![](11.png)\n\n### 礼帽和黑帽\n- 礼帽 = 原始输入-开运算结果\n- 黑帽 = 闭运算-原始输入\n\n```python\n#礼帽\nimg = cv2.imread('dige.png')\ntophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)\nplt.imshow(tophat)\n```\n![](19.png)\n```python\n#黑帽\nimg = cv2.imread('dige.png')\nblackhat  = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT, kernel)\nplt.imshow(tophat)\n```\n![](20.png)\n\n## 图像梯度\n\n### Sobel算子\n![](sobel_1.png)\n`dst = cv2.Sobel(src, ddepth, dx, dy, ksize)`\n- ddepth:图像的深度\n- dx和dy分别表示水平和竖直方向\n- ksize是Sobel算子的大小\n\n```python\nsobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)\nsobelx = cv2.convertScaleAbs(sobelx)\nsobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)\nsobely = cv2.convertScaleAbs(sobely)\n# 分别计算x和y，再求和\nsobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)\nplt.imshow(sobelxy)\n```\n![](12.png)\n\n```python\n# 不建议直接计算\nsobelxy=cv2.Sobel(img,cv2.CV_64F,1,1,ksize=3)\nsobelxy = cv2.convertScaleAbs(sobelxy) \nplt.imshow(sobelxy)\n```\n![](13.png)\n\n### Scharr算子\n![](scharr.jpg)\n### laplacian算子\n![](l.png)\n\n```python\nimg = cv2.imread(\"lena.jpg\", cv2.IMREAD_GRAYSCALE)\nsobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)\nsobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)\nsobelx = cv2.convertScaleAbs(sobelx)\nsobely = cv2.convertScaleAbs(sobely)\nsobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)\n\nscharrx = cv2.Scharr(img, cv2.CV_64F,1,0)\nscharry = cv2.Scharr(img, cv2.CV_64F,0,1)\nscharrx = cv2.convertScaleAbs(scharrx)\nscharry = cv2.convertScaleAbs(scharry)\nscharrxy = cv2.addWeighted(scharrx,0.5,scharry,0.5,0)\n\nlaplacian = cv2.Laplacian(img,cv2.CV_64F)\nlaplacian = cv2.convertScaleAbs(laplacian)\n\nres = np.hstack((sobelxy,scharrxy,laplacian))\nplt.imshow(res)\n```\n![](14.png)\n\n## Canny边缘检测\n- 1) 使用高斯滤波器，以平滑图像，滤除噪声。\n- 2) 计算图像中每个像素点的梯度强度和方向。\n- 3) 应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。\n- 4) 应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。\n- 5) 通过抑制孤立的弱边缘最终完成边缘检测。\n\n**1.高斯滤波**\n![](canny_1.png)\n**2.梯度和方向**\n![](canny_2.png)\n**3.非极大值抑制**\n![](canny_3.png)\n![](canny_4.png)\n**4.双阈值检测**\n![](canny_5.png)\n```python\nimg = cv2.imread(\"lena.jpg\", cv2.IMREAD_GRAYSCALE)\nv1 = cv2.Canny(img, 80,150)\nv2 = cv2.Canny(img, 50,100)\nres = np.hstack((v1,v2))\nplt.imshow(res)\n# cv_show(res, 'res')\n```\n![](21.png)\n\n## 图像金字塔\n\n* 高斯金字塔\n* 拉普拉斯金字塔\n![](Pyramid_1.png)\n\n**高斯金字塔：向下采样**\n![](Pyramid_2.png)\n\n**高斯金字塔：向上采样**\n![](Pyramid_3.png)\n```python\nimg = cv2.imread(\"1.jpg\")\n#下采样\ndown = cv2.pyrDown(img)\n# 上采样\nup = cv2.pyrUp(img)\n# 先上采样再下采样\nup=cv2.pyrUp(img)\nup_down=cv2.pyrDown(up)\ncv_show(up_down,'up_down')\n```\n![](15.png)\n\n## 图像轮廓\n`cv2.findContours(img,mode,method)`\n\nmode:轮廓检索模式\n* RETR_EXTERNAL ：只检索最外面的轮廓；\n* RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中；\n* RETR_CCOMP：检索所有的轮廓，并将他们组织为两层：顶层是各部分的外部边界，第二层是空洞的边界;\n- RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次;(一般使用这个)\n\nmethod:轮廓逼近方法\n* CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。\n* CHAIN_APPROX_SIMPLE:压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。\n![](chain.png)\n一般都是使用二值图像进行轮廓检测\n\n```python\nimg = cv2.imread(\"contours.png\")\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\n# contours：轮廓的内容，hierarchy：层级（用不上）\ncontours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n#传入绘制图像，轮廓，轮廓索引，颜色模式，线条厚度\n# 注意需要copy,要不原图会变。。。\ndraw_img = img.copy()\nres = cv2.drawContours(draw_img, contours, -1, (0, 255, 0), 2)\ncv_show(res, 'res')\n```\n![](18.png)\n\n## 绘制边界\n### 绘制边界矩形\n```python\nimg = cv2.imread('contours.png')\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\ncontours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\ncnt = contours[2]\n\nx,y,w,h = cv2.boundingRect(cnt)\nimg = cv2.rectangle(img, (x,y), (x+w,y+h), (0, 255, 0), 2)\n```\n![](16.png)\n\n### 绘制边界圆\n```python\n(x,y),radius = cv2.minEnclosingCircle(cnt) \ncenter = (int(x),int(y)) \nradius = int(radius) \nimg = cv2.circle(img,center,radius,(0,255,0),2)\ncv_show(img,'img')\n```\n![](17.png)\n\n# 模板匹配\n\n模板匹配和卷积原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，这个差别程度的计算方法在opencv里有6种，然后将每次计算的结果放入一个矩阵里，作为结果输出。假如原图形是AxB大小，而模板是axb大小，则输出结果的矩阵是`(A-a+1)x(B-b+1)`\n\n`cv2.matchTemplate(img, template, method)`\n- TM_SQDIFF：计算平方不同，计算出来的值越小，越相关        \n- TM_CCORR：计算相关性，计算出来的值越大，越相关\n- TM_CCOEFF：计算相关系数，计算出来的值越大，越相关\n- TM_SQDIFF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关\n- TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关\n- TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关\n一般是使用有归一化的方法。[相应公式](https://docs.opencv.org/3.3.1/df/dfb/group__imgproc__object.html#ga3a7850640f1fe1f58fe91a2d7583695d)\n\n```python\n# 模板匹配\nimg = cv2.imread('lena.jpg', 0)\ntemplate = cv2.imread('face.jpg', 0)\nh, w = template.shape[:2]\nmethods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR',\n           'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']\nfor meth in methods:\n    img2 = img.copy()\n\n    # 匹配方法的真值\n    method = eval(meth)\n    print (method)\n    res = cv2.matchTemplate(img, template, method)\n    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n\n    # 如果是平方差匹配TM_SQDIFF或归一化平方差匹配TM_SQDIFF_NORMED，取最小值\n    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:\n        top_left = min_loc\n    else:\n        top_left = max_loc\n    bottom_right = (top_left[0] + w, top_left[1] + h)\n\n    # 画矩形\n    cv2.rectangle(img2, top_left, bottom_right, 255, 2)\n\n    plt.subplot(121), plt.imshow(res, cmap='gray')# 匹配的结果\n    plt.xticks([]), plt.yticks([])  # 隐藏坐标轴\n    plt.subplot(122), plt.imshow(img2, cmap='gray')# 在原图中画出匹配的结果\n    plt.xticks([]), plt.yticks([])\n    plt.suptitle(meth)\n    plt.show()\n```\n![](output_13_1.png)\n![](output_13_3.png)\n![](output_13_5.png)\n![](output_13_7.png)\n![](output_13_9.png)\n![](output_13_11.png)\n\n## 匹配多个对象\n```python\nimg_rgb = cv2.imread('mario.jpg')\nimg_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\ntemplate = cv2.imread('mario_coin.jpg', 0)\nh, w = template.shape[:2]\n\nres = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\nthreshold = 0.8\n# 取匹配程度大于%80的坐标\nloc = np.where(res >= threshold)\nfor pt in zip(*loc[::-1]):  # *号表示可选参数\n    bottom_right = (pt[0] + w, pt[1] + h)\n    cv2.rectangle(img_rgb, pt, bottom_right, (0, 0, 255), 2)\ncv2.imshow('img_rgb', img_rgb)\ncv2.waitKey(0)\n```\n![](22.png)\n\n# 直方图\n![](hist_1.png)\n`cv2.calcHist(images,channels,mask,histSize,ranges)`\n- images: 原图像图像格式为 uint8 或 ﬂoat32。当传入函数时应用中括号[]括，例如[img]\n- channels: 同样用中括号括来它会告函数我们统幅图像的直方图。如果入图像是灰度图它的值就是[0]如果是彩色图像的传入的参数可以是[0][1][2]它们分别对应着BGR。\n- mask: 掩模图像。统整幅图像的直方图就把它为None。但是如果你想统图像某一分的直方图的你就制作一个掩模图像并 使用它。\n- histSize:BIN的数目。也应用中括号括\n- ranges: 像素值范围常为[0-256]\n```python\nimg = cv2.imread('cat.jpg',0) #0表示灰度图\nhist = cv2.calcHist([img],[0],None,[256],[0,256])\n# ravel()是将二维矩阵展成一维数组\nplt.hist(img.ravel(),256); \nplt.show()\n```\n![](23.png)\n```python\nimg = cv2.imread('cat.jpg') \ncolor = ('b','g','r')\nfor i,col in enumerate(color): \n    histr = cv2.calcHist([img],[i],None,[256],[0,256]) \n    plt.plot(histr,color = col) \n    plt.xlim([0,256])\n```\n![](24.png)\n```python\n# 创建mast\nimg = cv2.imread('cat.jpg') \nmask = np.zeros(img.shape[:2], np.uint8)\nmask[100:300, 100:400] = 255\nimg = cv2.imread('cat.jpg', 0)\nmasked_img = cv2.bitwise_and(img, img, mask=mask)#与操作\nhist_full = cv2.calcHist([img], [0], None, [256], [0, 256])\nhist_mask = cv2.calcHist([img], [0], mask, [256], [0, 256])\nplt.subplot(221), plt.imshow(img, 'gray')\nplt.subplot(222), plt.imshow(mask, 'gray')\nplt.subplot(223), plt.imshow(masked_img, 'gray')\nplt.subplot(224), plt.plot(hist_full), plt.plot(hist_mask)\nplt.xlim([0, 256])\nplt.show()\n```\n![](25.png)\n\n## 直方图均衡化\n```python\nimg = cv2.imread('clahe.jpg',0) #0表示灰度图 #clahe\nplt.hist(img.ravel(),256); \nplt.show()\n```\n![](26.png)\n```python\nequ = cv2.equalizeHist(img) \nplt.hist(equ.ravel(),256)\nplt.show()\n```\n![](27.png)\n```python\nres = np.hstack((img,equ))\ncv_show('res',res)\n```\n![](28.png)\n\n## 自适应直方图均值化\n```python\nclahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8)) \nres_clahe = clahe.apply(img)\nres = np.hstack((img,equ,res_clahe))\ncv_show('res',res)\n```\n![](29.png)\n\n# 傅里叶变化\n\n我们生活在时间的世界中，早上7:00起来吃早饭，8:00去挤地铁，9:00开始上班。。。以时间为参照就是时域分析。\n但是在频域中一切都是静止的！\n[傅里叶变化讲解](https://zhuanlan.zhihu.com/p/19763358)\n\n**傅里叶变换的作用**\n- 高频：变化剧烈的灰度分量，例如边界\n- 低频：变化缓慢的灰度分量，例如一片大海\n\n**滤波**\n- 低通滤波器：只保留低频，会使得图像模糊\n- 高通滤波器：只保留高频，会使得图像细节增强\n\n**傅里叶变化步骤**\n- opencv中主要就是cv2.dft()和cv2.idft()，输入图像需要先转换成np.float32 格式。\n- 得到的结果中频率为0的部分会在左上角，通常要转换到中心位置，可以通过shift变换来实现。\n- cv2.dft()返回的结果是双通道的（实部，虚部），通常还需要转换成图像格式才能展示（0,255）。\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lena.jpg',0)\n# 将输入图像需要先转换成np.float32 格式\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\n# 通过shift变换，将结果转换到中心位置\ndft_shift = np.fft.fftshift(dft)\n# 得到灰度图能表示的形式\nmagnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\nplt.show()\n```\n![](30.png)\n\n## 低通滤波器\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lena.jpg',0)\n\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nrows, cols = img.shape\ncrow, ccol = int(rows/2) , int(cols/2)     # 中心位置\n\n# 低通滤波\nmask = np.zeros((rows, cols, 2), np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 1\n\n# IDFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = 'gray')\nplt.title('Result'), plt.xticks([]), plt.yticks([])\n\nplt.show()\n```\n![](31.png)\n\n## 高通滤波器\n\n```python\nimg = cv2.imread('lena.jpg',0)\n\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nrows, cols = img.shape\ncrow, ccol = int(rows/2) , int(cols/2)     # 中心位置\n\n# 高通滤波\nmask = np.ones((rows, cols, 2), np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 0\n\n# IDFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = 'gray')\nplt.title('Result'), plt.xticks([]), plt.yticks([])\n\nplt.show()\n```\n![](32.png)","source":"_posts/OpenCV.md","raw":"---\ntitle: OpenCV讲解\nimg: /medias/featureimages/8.jpg\ntop: false\ncover: true\ntoc: true\nmathjax: true\ndate: 2019-12-08 21:09:20\npassword:\nsummary: 讲解python中OpenCV的相关函数🙈\ntags:\n- OpenCV\n- python\ncategories:\n- 图像\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=709553&auto=1&height=66\"></iframe></div>\n\n>主要讲解python中OpenCV的相关函数🙈，使用的~~OpenCV3~~OpenCV4版本\n\n# 环境配置地址\n---\n- [Anaconda](https://www.anaconda.com/download/)\n- [Python_whl](https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv)\n- [PyCharm](https://www.jetbrains.com/pycharm/)\n\n\n# 图像读取-显示-保存\n---\n## 数据读取-图像\n- cv2.IMREAD_COLOR：彩色图像\n- cv2.IMREAD_GRAYSCALE：灰度图像\n\n```python\nimport cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\n# 读取彩色图像\nimg = cv2.imread(\"1.jpg\", cv2.IMREAD_COLOR)\n# 读取灰度图像\nimg2 =cv2.imread('2.jpg',cv2.IMREAD_GRAYSCALE)\n```\n\n## 图像的显示\n\n```python\n#图像的显示,也可以创建多个窗口\ncv2.imshow('image',img) \n# 等待时间，毫秒级，0表示任意键终止\ncv2.waitKey(0) \ncv2.destroyAllWindows()\n```\n\n## 图像的保存\n\n```python\n#保存\ncv2.imwrite('my_img.jpg',img)\n```\n\n## 数据读取-视频\n- cv2.VideoCapture可以捕获摄像头，用数字来控制不同的设备，例如0,1。\n- 如果是视频文件，直接指定好路径即可。\n\n```python\n# 读取摄像头\n# vc = cv2.VideoCapture(0)\n# 读取视频\nvc = cv2.VideoCapture('test.mp4')\n# 检查是否打开正确\nif vc.isOpened(): \n    open, frame = vc.read()\nelse:\n    open = False\nwhile open:\n    ret, frame = vc.read()\n    if frame is None:\n        break\n    if ret == True:\n        gray = cv2.cvtColor(frame,  cv2.COLOR_BGR2GRAY)\n        cv2.imshow('result', gray)\n        # 等待1000ms或者按下按键ESC时退出\n        if cv2.waitKey(1000) & 0xFF == 27:\n            break\nvc.release()\ncv2.destroyAllWindows()\n```\n\n## 截取部分图像数据\n\n```python\ndef cv_show(name,img):\n    cv2.imshow(name,img) \n    cv2.waitKey(0) \n    cv2.destroyAllWindows()\nimg=cv2.imread('cat.jpg')\n# 截取图片\ncat=img[0:50,0:200] \ncv_show('cat',cat)\n```\n## 颜色通道提取\n\n```python\nb,g,r=cv2.split(img)\nimg=cv2.merge((b,g,r))\n# 只保留R\ncur_img = img.copy()\ncur_img[:,:,0] = 0\ncur_img[:,:,1] = 0\n# 只保留G\ncur_img = img.copy()\ncur_img[:,:,0] = 0\ncur_img[:,:,2] = 0\n# 只保留B\ncur_img = img.copy()\ncur_img[:,:,1] = 0\ncur_img[:,:,2] = 0\n```\n\n## 图像的融合\n\n```python\nimg_bear = cv2.imread(\"1.jpg\")\nimg_people = cv2.imread(\"2.jpg\")\nimg_bear.shape #(639, 639, 3)\nimg_people.shape #(568, 568, 3)\nimg_bear = cv2.resize(img_bear, (568,568))\nimg_bear.shape #(568, 568, 3)\n# res=ax+by+c\nres = cv2.addWeighted(img_bear, 0.4, img_people, 0.6, 0)\nplt.imshow(res)\n```\n![](1.png)\n\n## 图像尺寸设置\n- x轴变为两倍\n\n```python\nres = cv2.resize(img_bear, (0, 0), fx=2, fy=1)\nplt.imshow(res)\n```\n![](2.png)\n- y轴变为两倍\n\n```python\nres = cv2.resize(img_bear, (0, 0), fx=1, fy=2)\nplt.imshow(res)\n```\n![](3.png)\n\n# 图像处理\n---\n\n## 图像阈值\n`ret, dst = cv2.threshold(src, thresh, maxval, type)`\n- src： 输入图，只能输入单通道图像，通常来说为灰度图\n- dst： 输出图\n- thresh： 阈值\n- maxval： 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值\n- type：二值化操作的类型，包含以下5种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV； cv2.THRESH_TRUNC； cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV\n- cv2.THRESH_BINARY 超过阈值部分取maxval（最大值），否则取0\n- cv2.THRESH_BINARY_INV THRESH_BINARY的反转\n- cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变\n- cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0\n- cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转\n\n```python\nimg_gray = cv2.imread(\"2.jpg\", cv2.IMREAD_GRAYSCALE)\nres, thresh1 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_BINARY)\nres, thresh2 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_BINARY_INV)\nres, thresh3 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TRUNC)\nres, thresh4 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TRIANGLE)\nres, thresh5 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TOZERO)\nres, thresh6 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TOZERO_INV)\n# res, thresh7 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_MASK)\n# res, thresh8 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_OTSU)\ntitles = ['Original Image', 'BINARY', 'BINARY_INV', 'TRUNC', 'TRIANGLE','TOZERO', 'TOZERO_INV','MASK','OTSU']\nimages = [img_gray, thresh1, thresh2, thresh3, thresh4, thresh5, thresh6, thresh7, thresh8]\n\nfor i in range(6):\n    plt.subplot(2, 3, i + 1)\n    plt.imshow(images[i], 'gray')\n    plt.title(titles[i])\n    plt.xticks([]), plt.yticks([])\nplt.show()\n```\n\n![](4.png)\n\n## 图像平滑\n```python\nimg = cv2.imread(\"lenaNoise.png\")\nplt.imshow(img[:,:,(2,1,0)])\n```\n![](5.png)\n\n```python\n# 均值滤波\n# 简单的平均卷积操作\nblur = cv2.blur(img, (3, 3))\n# cv_show('blur', blur)\n# 方框滤波\n# 基本和均值一样，可以选择归一化,容易越界\nbox = cv2.boxFilter(img,-1,(3,3), normalize=False)\n# 方框滤波\n# 基本和均值一样，可以选择归一化\nbox = cv2.boxFilter(img,-1,(3,3), normalize=True)\n# 高斯滤波\n# 高斯模糊的卷积核里的数值是满足高斯分布，相当于更重视中间的\naussian = cv2.GaussianBlur(img, (5, 5), 1)\n# 中值滤波\n# 相当于用中值代替\nmedian = cv2.medianBlur(img, 5)  # 中值滤波,指定大小是5×5\n# 展示所有的\nres = np.hstack((blur,aussian,median))\nplt.imshow(res[:,:,(2,1,0)])\n```\n\n![](7.png)\n\n## 形态学处理\n### 腐蚀\n```python\nimg = cv2.imread('dige.png')\nkernel = np.ones((30,30), np.uint8)\nerosion_1 = cv2.erode(pie, kernel, iterations=1)# 腐蚀1次\nerosion_2 = cv2.erode(pie,kernel,iterations = 2)# 2次\nerosion_3 = cv2.erode(pie,kernel,iterations = 3)# 3次\nres = np.hstack((erosion_1, erosion_2, erosion_3))\nplt.imshow(res[:,:,(2,1,0)])\n```\n![](8.png)\n\n### 膨胀\n\n```python\npie = cv2.imread('pie.png')\nkernel = np.ones((30,30),np.uint8) \ndilate_1 = cv2.dilate(pie,kernel,iterations = 1)\ndilate_2 = cv2.dilate(pie,kernel,iterations = 2)\ndilate_3 = cv2.dilate(pie,kernel,iterations = 3)\nres = np.hstack((dilate_1,dilate_2,dilate_3))\nplt.imshow(res[:,:,(2,1,0)])\n```\n![](9.png)\n\n### 开运算和闭运算\n\n```python\n# 开：先腐蚀，再膨胀\nimg = cv2.imread('dige.png')\nkernel = np.ones((5,5),np.uint8) \nopening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)\nplt.imshow(opening)\n```\n![](10.png)\n```python\n# 闭：先膨胀，再腐蚀\nimg = cv2.imread('dige.png')\nkernel = np.ones((5,5),np.uint8) \nclosing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)\nplt.imshow(closing)\n```\n![](11.png)\n\n### 礼帽和黑帽\n- 礼帽 = 原始输入-开运算结果\n- 黑帽 = 闭运算-原始输入\n\n```python\n#礼帽\nimg = cv2.imread('dige.png')\ntophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)\nplt.imshow(tophat)\n```\n![](19.png)\n```python\n#黑帽\nimg = cv2.imread('dige.png')\nblackhat  = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT, kernel)\nplt.imshow(tophat)\n```\n![](20.png)\n\n## 图像梯度\n\n### Sobel算子\n![](sobel_1.png)\n`dst = cv2.Sobel(src, ddepth, dx, dy, ksize)`\n- ddepth:图像的深度\n- dx和dy分别表示水平和竖直方向\n- ksize是Sobel算子的大小\n\n```python\nsobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)\nsobelx = cv2.convertScaleAbs(sobelx)\nsobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)\nsobely = cv2.convertScaleAbs(sobely)\n# 分别计算x和y，再求和\nsobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)\nplt.imshow(sobelxy)\n```\n![](12.png)\n\n```python\n# 不建议直接计算\nsobelxy=cv2.Sobel(img,cv2.CV_64F,1,1,ksize=3)\nsobelxy = cv2.convertScaleAbs(sobelxy) \nplt.imshow(sobelxy)\n```\n![](13.png)\n\n### Scharr算子\n![](scharr.jpg)\n### laplacian算子\n![](l.png)\n\n```python\nimg = cv2.imread(\"lena.jpg\", cv2.IMREAD_GRAYSCALE)\nsobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)\nsobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)\nsobelx = cv2.convertScaleAbs(sobelx)\nsobely = cv2.convertScaleAbs(sobely)\nsobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)\n\nscharrx = cv2.Scharr(img, cv2.CV_64F,1,0)\nscharry = cv2.Scharr(img, cv2.CV_64F,0,1)\nscharrx = cv2.convertScaleAbs(scharrx)\nscharry = cv2.convertScaleAbs(scharry)\nscharrxy = cv2.addWeighted(scharrx,0.5,scharry,0.5,0)\n\nlaplacian = cv2.Laplacian(img,cv2.CV_64F)\nlaplacian = cv2.convertScaleAbs(laplacian)\n\nres = np.hstack((sobelxy,scharrxy,laplacian))\nplt.imshow(res)\n```\n![](14.png)\n\n## Canny边缘检测\n- 1) 使用高斯滤波器，以平滑图像，滤除噪声。\n- 2) 计算图像中每个像素点的梯度强度和方向。\n- 3) 应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。\n- 4) 应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。\n- 5) 通过抑制孤立的弱边缘最终完成边缘检测。\n\n**1.高斯滤波**\n![](canny_1.png)\n**2.梯度和方向**\n![](canny_2.png)\n**3.非极大值抑制**\n![](canny_3.png)\n![](canny_4.png)\n**4.双阈值检测**\n![](canny_5.png)\n```python\nimg = cv2.imread(\"lena.jpg\", cv2.IMREAD_GRAYSCALE)\nv1 = cv2.Canny(img, 80,150)\nv2 = cv2.Canny(img, 50,100)\nres = np.hstack((v1,v2))\nplt.imshow(res)\n# cv_show(res, 'res')\n```\n![](21.png)\n\n## 图像金字塔\n\n* 高斯金字塔\n* 拉普拉斯金字塔\n![](Pyramid_1.png)\n\n**高斯金字塔：向下采样**\n![](Pyramid_2.png)\n\n**高斯金字塔：向上采样**\n![](Pyramid_3.png)\n```python\nimg = cv2.imread(\"1.jpg\")\n#下采样\ndown = cv2.pyrDown(img)\n# 上采样\nup = cv2.pyrUp(img)\n# 先上采样再下采样\nup=cv2.pyrUp(img)\nup_down=cv2.pyrDown(up)\ncv_show(up_down,'up_down')\n```\n![](15.png)\n\n## 图像轮廓\n`cv2.findContours(img,mode,method)`\n\nmode:轮廓检索模式\n* RETR_EXTERNAL ：只检索最外面的轮廓；\n* RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中；\n* RETR_CCOMP：检索所有的轮廓，并将他们组织为两层：顶层是各部分的外部边界，第二层是空洞的边界;\n- RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次;(一般使用这个)\n\nmethod:轮廓逼近方法\n* CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。\n* CHAIN_APPROX_SIMPLE:压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。\n![](chain.png)\n一般都是使用二值图像进行轮廓检测\n\n```python\nimg = cv2.imread(\"contours.png\")\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\n# contours：轮廓的内容，hierarchy：层级（用不上）\ncontours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n#传入绘制图像，轮廓，轮廓索引，颜色模式，线条厚度\n# 注意需要copy,要不原图会变。。。\ndraw_img = img.copy()\nres = cv2.drawContours(draw_img, contours, -1, (0, 255, 0), 2)\ncv_show(res, 'res')\n```\n![](18.png)\n\n## 绘制边界\n### 绘制边界矩形\n```python\nimg = cv2.imread('contours.png')\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\ncontours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\ncnt = contours[2]\n\nx,y,w,h = cv2.boundingRect(cnt)\nimg = cv2.rectangle(img, (x,y), (x+w,y+h), (0, 255, 0), 2)\n```\n![](16.png)\n\n### 绘制边界圆\n```python\n(x,y),radius = cv2.minEnclosingCircle(cnt) \ncenter = (int(x),int(y)) \nradius = int(radius) \nimg = cv2.circle(img,center,radius,(0,255,0),2)\ncv_show(img,'img')\n```\n![](17.png)\n\n# 模板匹配\n\n模板匹配和卷积原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，这个差别程度的计算方法在opencv里有6种，然后将每次计算的结果放入一个矩阵里，作为结果输出。假如原图形是AxB大小，而模板是axb大小，则输出结果的矩阵是`(A-a+1)x(B-b+1)`\n\n`cv2.matchTemplate(img, template, method)`\n- TM_SQDIFF：计算平方不同，计算出来的值越小，越相关        \n- TM_CCORR：计算相关性，计算出来的值越大，越相关\n- TM_CCOEFF：计算相关系数，计算出来的值越大，越相关\n- TM_SQDIFF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关\n- TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关\n- TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关\n一般是使用有归一化的方法。[相应公式](https://docs.opencv.org/3.3.1/df/dfb/group__imgproc__object.html#ga3a7850640f1fe1f58fe91a2d7583695d)\n\n```python\n# 模板匹配\nimg = cv2.imread('lena.jpg', 0)\ntemplate = cv2.imread('face.jpg', 0)\nh, w = template.shape[:2]\nmethods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR',\n           'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']\nfor meth in methods:\n    img2 = img.copy()\n\n    # 匹配方法的真值\n    method = eval(meth)\n    print (method)\n    res = cv2.matchTemplate(img, template, method)\n    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n\n    # 如果是平方差匹配TM_SQDIFF或归一化平方差匹配TM_SQDIFF_NORMED，取最小值\n    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:\n        top_left = min_loc\n    else:\n        top_left = max_loc\n    bottom_right = (top_left[0] + w, top_left[1] + h)\n\n    # 画矩形\n    cv2.rectangle(img2, top_left, bottom_right, 255, 2)\n\n    plt.subplot(121), plt.imshow(res, cmap='gray')# 匹配的结果\n    plt.xticks([]), plt.yticks([])  # 隐藏坐标轴\n    plt.subplot(122), plt.imshow(img2, cmap='gray')# 在原图中画出匹配的结果\n    plt.xticks([]), plt.yticks([])\n    plt.suptitle(meth)\n    plt.show()\n```\n![](output_13_1.png)\n![](output_13_3.png)\n![](output_13_5.png)\n![](output_13_7.png)\n![](output_13_9.png)\n![](output_13_11.png)\n\n## 匹配多个对象\n```python\nimg_rgb = cv2.imread('mario.jpg')\nimg_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\ntemplate = cv2.imread('mario_coin.jpg', 0)\nh, w = template.shape[:2]\n\nres = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\nthreshold = 0.8\n# 取匹配程度大于%80的坐标\nloc = np.where(res >= threshold)\nfor pt in zip(*loc[::-1]):  # *号表示可选参数\n    bottom_right = (pt[0] + w, pt[1] + h)\n    cv2.rectangle(img_rgb, pt, bottom_right, (0, 0, 255), 2)\ncv2.imshow('img_rgb', img_rgb)\ncv2.waitKey(0)\n```\n![](22.png)\n\n# 直方图\n![](hist_1.png)\n`cv2.calcHist(images,channels,mask,histSize,ranges)`\n- images: 原图像图像格式为 uint8 或 ﬂoat32。当传入函数时应用中括号[]括，例如[img]\n- channels: 同样用中括号括来它会告函数我们统幅图像的直方图。如果入图像是灰度图它的值就是[0]如果是彩色图像的传入的参数可以是[0][1][2]它们分别对应着BGR。\n- mask: 掩模图像。统整幅图像的直方图就把它为None。但是如果你想统图像某一分的直方图的你就制作一个掩模图像并 使用它。\n- histSize:BIN的数目。也应用中括号括\n- ranges: 像素值范围常为[0-256]\n```python\nimg = cv2.imread('cat.jpg',0) #0表示灰度图\nhist = cv2.calcHist([img],[0],None,[256],[0,256])\n# ravel()是将二维矩阵展成一维数组\nplt.hist(img.ravel(),256); \nplt.show()\n```\n![](23.png)\n```python\nimg = cv2.imread('cat.jpg') \ncolor = ('b','g','r')\nfor i,col in enumerate(color): \n    histr = cv2.calcHist([img],[i],None,[256],[0,256]) \n    plt.plot(histr,color = col) \n    plt.xlim([0,256])\n```\n![](24.png)\n```python\n# 创建mast\nimg = cv2.imread('cat.jpg') \nmask = np.zeros(img.shape[:2], np.uint8)\nmask[100:300, 100:400] = 255\nimg = cv2.imread('cat.jpg', 0)\nmasked_img = cv2.bitwise_and(img, img, mask=mask)#与操作\nhist_full = cv2.calcHist([img], [0], None, [256], [0, 256])\nhist_mask = cv2.calcHist([img], [0], mask, [256], [0, 256])\nplt.subplot(221), plt.imshow(img, 'gray')\nplt.subplot(222), plt.imshow(mask, 'gray')\nplt.subplot(223), plt.imshow(masked_img, 'gray')\nplt.subplot(224), plt.plot(hist_full), plt.plot(hist_mask)\nplt.xlim([0, 256])\nplt.show()\n```\n![](25.png)\n\n## 直方图均衡化\n```python\nimg = cv2.imread('clahe.jpg',0) #0表示灰度图 #clahe\nplt.hist(img.ravel(),256); \nplt.show()\n```\n![](26.png)\n```python\nequ = cv2.equalizeHist(img) \nplt.hist(equ.ravel(),256)\nplt.show()\n```\n![](27.png)\n```python\nres = np.hstack((img,equ))\ncv_show('res',res)\n```\n![](28.png)\n\n## 自适应直方图均值化\n```python\nclahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8)) \nres_clahe = clahe.apply(img)\nres = np.hstack((img,equ,res_clahe))\ncv_show('res',res)\n```\n![](29.png)\n\n# 傅里叶变化\n\n我们生活在时间的世界中，早上7:00起来吃早饭，8:00去挤地铁，9:00开始上班。。。以时间为参照就是时域分析。\n但是在频域中一切都是静止的！\n[傅里叶变化讲解](https://zhuanlan.zhihu.com/p/19763358)\n\n**傅里叶变换的作用**\n- 高频：变化剧烈的灰度分量，例如边界\n- 低频：变化缓慢的灰度分量，例如一片大海\n\n**滤波**\n- 低通滤波器：只保留低频，会使得图像模糊\n- 高通滤波器：只保留高频，会使得图像细节增强\n\n**傅里叶变化步骤**\n- opencv中主要就是cv2.dft()和cv2.idft()，输入图像需要先转换成np.float32 格式。\n- 得到的结果中频率为0的部分会在左上角，通常要转换到中心位置，可以通过shift变换来实现。\n- cv2.dft()返回的结果是双通道的（实部，虚部），通常还需要转换成图像格式才能展示（0,255）。\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lena.jpg',0)\n# 将输入图像需要先转换成np.float32 格式\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\n# 通过shift变换，将结果转换到中心位置\ndft_shift = np.fft.fftshift(dft)\n# 得到灰度图能表示的形式\nmagnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')\nplt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])\nplt.show()\n```\n![](30.png)\n\n## 低通滤波器\n\n```python\nimport numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread('lena.jpg',0)\n\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nrows, cols = img.shape\ncrow, ccol = int(rows/2) , int(cols/2)     # 中心位置\n\n# 低通滤波\nmask = np.zeros((rows, cols, 2), np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 1\n\n# IDFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = 'gray')\nplt.title('Result'), plt.xticks([]), plt.yticks([])\n\nplt.show()\n```\n![](31.png)\n\n## 高通滤波器\n\n```python\nimg = cv2.imread('lena.jpg',0)\n\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nrows, cols = img.shape\ncrow, ccol = int(rows/2) , int(cols/2)     # 中心位置\n\n# 高通滤波\nmask = np.ones((rows, cols, 2), np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 0\n\n# IDFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\n\nplt.subplot(121),plt.imshow(img, cmap = 'gray')\nplt.title('Input Image'), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = 'gray')\nplt.title('Result'), plt.xticks([]), plt.yticks([])\n\nplt.show()\n```\n![](32.png)","slug":"OpenCV","published":1,"updated":"2021-07-06T09:03:03.002Z","_id":"ckqrtogww0019rouxqeua0gc5","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=709553&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解python中OpenCV的相关函数🙈，使用的<del>OpenCV3</del>OpenCV4版本</p>\n</blockquote>\n<h1 id=\"环境配置地址\"><a href=\"#环境配置地址\" class=\"headerlink\" title=\"环境配置地址\"></a>环境配置地址</h1><hr>\n<ul>\n<li><a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener\">Anaconda</a></li>\n<li><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\" target=\"_blank\" rel=\"noopener\">Python_whl</a></li>\n<li><a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"noopener\">PyCharm</a></li>\n</ul>\n<h1 id=\"图像读取-显示-保存\"><a href=\"#图像读取-显示-保存\" class=\"headerlink\" title=\"图像读取-显示-保存\"></a>图像读取-显示-保存</h1><hr>\n<h2 id=\"数据读取-图像\"><a href=\"#数据读取-图像\" class=\"headerlink\" title=\"数据读取-图像\"></a>数据读取-图像</h2><ul>\n<li>cv2.IMREAD_COLOR：彩色图像</li>\n<li>cv2.IMREAD_GRAYSCALE：灰度图像</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token comment\" spellcheck=\"true\"># 读取彩色图像</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"1.jpg\"</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>IMREAD_COLOR<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 读取灰度图像</span>\nimg2 <span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'2.jpg'</span><span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>IMREAD_GRAYSCALE<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"图像的显示\"><a href=\"#图像的显示\" class=\"headerlink\" title=\"图像的显示\"></a>图像的显示</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#图像的显示,也可以创建多个窗口</span>\ncv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span> \n<span class=\"token comment\" spellcheck=\"true\"># 等待时间，毫秒级，0表示任意键终止</span>\ncv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \ncv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"图像的保存\"><a href=\"#图像的保存\" class=\"headerlink\" title=\"图像的保存\"></a>图像的保存</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#保存</span>\ncv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span><span class=\"token string\">'my_img.jpg'</span><span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"数据读取-视频\"><a href=\"#数据读取-视频\" class=\"headerlink\" title=\"数据读取-视频\"></a>数据读取-视频</h2><ul>\n<li>cv2.VideoCapture可以捕获摄像头，用数字来控制不同的设备，例如0,1。</li>\n<li>如果是视频文件，直接指定好路径即可。</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 读取摄像头</span>\n<span class=\"token comment\" spellcheck=\"true\"># vc = cv2.VideoCapture(0)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 读取视频</span>\nvc <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>VideoCapture<span class=\"token punctuation\">(</span><span class=\"token string\">'test.mp4'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 检查是否打开正确</span>\n<span class=\"token keyword\">if</span> vc<span class=\"token punctuation\">.</span>isOpened<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    open<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> vc<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    open <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">while</span> open<span class=\"token punctuation\">:</span>\n    ret<span class=\"token punctuation\">,</span> frame <span class=\"token operator\">=</span> vc<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> frame <span class=\"token keyword\">is</span> None<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">if</span> ret <span class=\"token operator\">==</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        gray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span>  cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\n        cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'result'</span><span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 等待1000ms或者按下按键ESC时退出</span>\n        <span class=\"token keyword\">if</span> cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">==</span> <span class=\"token number\">27</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\nvc<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"截取部分图像数据\"><a href=\"#截取部分图像数据\" class=\"headerlink\" title=\"截取部分图像数据\"></a>截取部分图像数据</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cv_show</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>img<span class=\"token punctuation\">)</span> \n    cv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> \n    cv2<span class=\"token punctuation\">.</span>destroyAllWindows<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nimg<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'cat.jpg'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 截取图片</span>\ncat<span class=\"token operator\">=</span>img<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span> \ncv_show<span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span>cat<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"颜色通道提取\"><a href=\"#颜色通道提取\" class=\"headerlink\" title=\"颜色通道提取\"></a>颜色通道提取</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">b<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\nimg<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>merge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 只保留R</span>\ncur_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncur_img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncur_img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\" spellcheck=\"true\"># 只保留G</span>\ncur_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncur_img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncur_img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\" spellcheck=\"true\"># 只保留B</span>\ncur_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncur_img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncur_img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"图像的融合\"><a href=\"#图像的融合\" class=\"headerlink\" title=\"图像的融合\"></a>图像的融合</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">img_bear <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"1.jpg\"</span><span class=\"token punctuation\">)</span>\nimg_people <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"2.jpg\"</span><span class=\"token punctuation\">)</span>\nimg_bear<span class=\"token punctuation\">.</span>shape <span class=\"token comment\" spellcheck=\"true\">#(639, 639, 3)</span>\nimg_people<span class=\"token punctuation\">.</span>shape <span class=\"token comment\" spellcheck=\"true\">#(568, 568, 3)</span>\nimg_bear <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>img_bear<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">568</span><span class=\"token punctuation\">,</span><span class=\"token number\">568</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nimg_bear<span class=\"token punctuation\">.</span>shape <span class=\"token comment\" spellcheck=\"true\">#(568, 568, 3)</span>\n<span class=\"token comment\" spellcheck=\"true\"># res=ax+by+c</span>\nres <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>addWeighted<span class=\"token punctuation\">(</span>img_bear<span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> img_people<span class=\"token punctuation\">,</span> <span class=\"token number\">0.6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"1.png\" alt></p>\n<h2 id=\"图像尺寸设置\"><a href=\"#图像尺寸设置\" class=\"headerlink\" title=\"图像尺寸设置\"></a>图像尺寸设置</h2><ul>\n<li>x轴变为两倍</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">res <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>img_bear<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fx<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fy<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"2.png\" alt></p>\n<ul>\n<li>y轴变为两倍</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">res <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>resize<span class=\"token punctuation\">(</span>img_bear<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fx<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fy<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"3.png\" alt></p>\n<h1 id=\"图像处理\"><a href=\"#图像处理\" class=\"headerlink\" title=\"图像处理\"></a>图像处理</h1><hr>\n<h2 id=\"图像阈值\"><a href=\"#图像阈值\" class=\"headerlink\" title=\"图像阈值\"></a>图像阈值</h2><p><code>ret, dst = cv2.threshold(src, thresh, maxval, type)</code></p>\n<ul>\n<li>src： 输入图，只能输入单通道图像，通常来说为灰度图</li>\n<li>dst： 输出图</li>\n<li>thresh： 阈值</li>\n<li>maxval： 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值</li>\n<li>type：二值化操作的类型，包含以下5种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV； cv2.THRESH_TRUNC； cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV</li>\n<li>cv2.THRESH_BINARY 超过阈值部分取maxval（最大值），否则取0</li>\n<li>cv2.THRESH_BINARY_INV THRESH_BINARY的反转</li>\n<li>cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变</li>\n<li>cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0</li>\n<li>cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">img_gray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"2.jpg\"</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>IMREAD_GRAYSCALE<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">,</span> thresh1 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_BINARY<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">,</span> thresh2 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_BINARY_INV<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">,</span> thresh3 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_TRUNC<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">,</span> thresh4 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_TRIANGLE<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">,</span> thresh5 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_TOZERO<span class=\"token punctuation\">)</span>\nres<span class=\"token punctuation\">,</span> thresh6 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_TOZERO_INV<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># res, thresh7 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_MASK)</span>\n<span class=\"token comment\" spellcheck=\"true\"># res, thresh8 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_OTSU)</span>\ntitles <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Original Image'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BINARY'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'BINARY_INV'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TRUNC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TRIANGLE'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'TOZERO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TOZERO_INV'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'MASK'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'OTSU'</span><span class=\"token punctuation\">]</span>\nimages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>img_gray<span class=\"token punctuation\">,</span> thresh1<span class=\"token punctuation\">,</span> thresh2<span class=\"token punctuation\">,</span> thresh3<span class=\"token punctuation\">,</span> thresh4<span class=\"token punctuation\">,</span> thresh5<span class=\"token punctuation\">,</span> thresh6<span class=\"token punctuation\">,</span> thresh7<span class=\"token punctuation\">,</span> thresh8<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>images<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>titles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"4.png\" alt></p>\n<h2 id=\"图像平滑\"><a href=\"#图像平滑\" class=\"headerlink\" title=\"图像平滑\"></a>图像平滑</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"lenaNoise.png\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"5.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 均值滤波</span>\n<span class=\"token comment\" spellcheck=\"true\"># 简单的平均卷积操作</span>\nblur <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>blur<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># cv_show('blur', blur)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 方框滤波</span>\n<span class=\"token comment\" spellcheck=\"true\"># 基本和均值一样，可以选择归一化,容易越界</span>\nbox <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>boxFilter<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> normalize<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 方框滤波</span>\n<span class=\"token comment\" spellcheck=\"true\"># 基本和均值一样，可以选择归一化</span>\nbox <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>boxFilter<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> normalize<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 高斯滤波</span>\n<span class=\"token comment\" spellcheck=\"true\"># 高斯模糊的卷积核里的数值是满足高斯分布，相当于更重视中间的</span>\naussian <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>GaussianBlur<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 中值滤波</span>\n<span class=\"token comment\" spellcheck=\"true\"># 相当于用中值代替</span>\nmedian <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>medianBlur<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 中值滤波,指定大小是5×5</span>\n<span class=\"token comment\" spellcheck=\"true\"># 展示所有的</span>\nres <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>blur<span class=\"token punctuation\">,</span>aussian<span class=\"token punctuation\">,</span>median<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"7.png\" alt></p>\n<h2 id=\"形态学处理\"><a href=\"#形态学处理\" class=\"headerlink\" title=\"形态学处理\"></a>形态学处理</h2><h3 id=\"腐蚀\"><a href=\"#腐蚀\" class=\"headerlink\" title=\"腐蚀\"></a>腐蚀</h3><pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'dige.png'</span><span class=\"token punctuation\">)</span>\nkernel <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span>\nerosion_1 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>erode<span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">,</span> iterations<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 腐蚀1次</span>\nerosion_2 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>erode<span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">,</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 2次</span>\nerosion_3 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>erode<span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">,</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 3次</span>\nres <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>erosion_1<span class=\"token punctuation\">,</span> erosion_2<span class=\"token punctuation\">,</span> erosion_3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"8.png\" alt></p>\n<h3 id=\"膨胀\"><a href=\"#膨胀\" class=\"headerlink\" title=\"膨胀\"></a>膨胀</h3><pre class=\"line-numbers language-python\"><code class=\"language-python\">pie <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'pie.png'</span><span class=\"token punctuation\">)</span>\nkernel <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> \ndilate_1 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>dilate<span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">,</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ndilate_2 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>dilate<span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">,</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ndilate_3 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>dilate<span class=\"token punctuation\">(</span>pie<span class=\"token punctuation\">,</span>kernel<span class=\"token punctuation\">,</span>iterations <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dilate_1<span class=\"token punctuation\">,</span>dilate_2<span class=\"token punctuation\">,</span>dilate_3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"9.png\" alt></p>\n<h3 id=\"开运算和闭运算\"><a href=\"#开运算和闭运算\" class=\"headerlink\" title=\"开运算和闭运算\"></a>开运算和闭运算</h3><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 开：先腐蚀，再膨胀</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'dige.png'</span><span class=\"token punctuation\">)</span>\nkernel <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> \nopening <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>morphologyEx<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>MORPH_OPEN<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>opening<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"10.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 闭：先膨胀，再腐蚀</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'dige.png'</span><span class=\"token punctuation\">)</span>\nkernel <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span> \nclosing <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>morphologyEx<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>MORPH_CLOSE<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>closing<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"11.png\" alt></p>\n<h3 id=\"礼帽和黑帽\"><a href=\"#礼帽和黑帽\" class=\"headerlink\" title=\"礼帽和黑帽\"></a>礼帽和黑帽</h3><ul>\n<li>礼帽 = 原始输入-开运算结果</li>\n<li>黑帽 = 闭运算-原始输入</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#礼帽</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'dige.png'</span><span class=\"token punctuation\">)</span>\ntophat <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>morphologyEx<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>MORPH_TOPHAT<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>tophat<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"19.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#黑帽</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'dige.png'</span><span class=\"token punctuation\">)</span>\nblackhat  <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>morphologyEx<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>MORPH_BLACKHAT<span class=\"token punctuation\">,</span> kernel<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>tophat<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"20.png\" alt></p>\n<h2 id=\"图像梯度\"><a href=\"#图像梯度\" class=\"headerlink\" title=\"图像梯度\"></a>图像梯度</h2><h3 id=\"Sobel算子\"><a href=\"#Sobel算子\" class=\"headerlink\" title=\"Sobel算子\"></a>Sobel算子</h3><p><img src=\"sobel_1.png\" alt><br><code>dst = cv2.Sobel(src, ddepth, dx, dy, ksize)</code></p>\n<ul>\n<li>ddepth:图像的深度</li>\n<li>dx和dy分别表示水平和竖直方向</li>\n<li>ksize是Sobel算子的大小</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">sobelx <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Sobel<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ksize<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsobelx <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>sobelx<span class=\"token punctuation\">)</span>\nsobely <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Sobel<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ksize<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsobely <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>sobely<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 分别计算x和y，再求和</span>\nsobelxy <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>addWeighted<span class=\"token punctuation\">(</span>sobelx<span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>sobely<span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>sobelxy<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"12.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 不建议直接计算</span>\nsobelxy<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>Sobel<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ksize<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsobelxy <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>sobelxy<span class=\"token punctuation\">)</span> \nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>sobelxy<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"13.png\" alt></p>\n<h3 id=\"Scharr算子\"><a href=\"#Scharr算子\" class=\"headerlink\" title=\"Scharr算子\"></a>Scharr算子</h3><p><img src=\"scharr.jpg\" alt></p>\n<h3 id=\"laplacian算子\"><a href=\"#laplacian算子\" class=\"headerlink\" title=\"laplacian算子\"></a>laplacian算子</h3><p><img src=\"l.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"lena.jpg\"</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>IMREAD_GRAYSCALE<span class=\"token punctuation\">)</span>\nsobelx <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Sobel<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ksize<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsobely <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Sobel<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ksize<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nsobelx <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>sobelx<span class=\"token punctuation\">)</span>\nsobely <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>sobely<span class=\"token punctuation\">)</span>\nsobelxy <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>addWeighted<span class=\"token punctuation\">(</span>sobelx<span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>sobely<span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nscharrx <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Scharr<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nscharry <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Scharr<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nscharrx <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>scharrx<span class=\"token punctuation\">)</span>\nscharry <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>scharry<span class=\"token punctuation\">)</span>\nscharrxy <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>addWeighted<span class=\"token punctuation\">(</span>scharrx<span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>scharry<span class=\"token punctuation\">,</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nlaplacian <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Laplacian<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>cv2<span class=\"token punctuation\">.</span>CV_64F<span class=\"token punctuation\">)</span>\nlaplacian <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>convertScaleAbs<span class=\"token punctuation\">(</span>laplacian<span class=\"token punctuation\">)</span>\n\nres <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sobelxy<span class=\"token punctuation\">,</span>scharrxy<span class=\"token punctuation\">,</span>laplacian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"14.png\" alt></p>\n<h2 id=\"Canny边缘检测\"><a href=\"#Canny边缘检测\" class=\"headerlink\" title=\"Canny边缘检测\"></a>Canny边缘检测</h2><ul>\n<li>1) 使用高斯滤波器，以平滑图像，滤除噪声。</li>\n<li>2) 计算图像中每个像素点的梯度强度和方向。</li>\n<li>3) 应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。</li>\n<li>4) 应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。</li>\n<li>5) 通过抑制孤立的弱边缘最终完成边缘检测。</li>\n</ul>\n<p><strong>1.高斯滤波</strong><br><img src=\"canny_1.png\" alt><br><strong>2.梯度和方向</strong><br><img src=\"canny_2.png\" alt><br><strong>3.非极大值抑制</strong><br><img src=\"canny_3.png\" alt><br><img src=\"canny_4.png\" alt><br><strong>4.双阈值检测</strong><br><img src=\"canny_5.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"lena.jpg\"</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>IMREAD_GRAYSCALE<span class=\"token punctuation\">)</span>\nv1 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Canny<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span>\nv2 <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>Canny<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># cv_show(res, 'res')</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"21.png\" alt></p>\n<h2 id=\"图像金字塔\"><a href=\"#图像金字塔\" class=\"headerlink\" title=\"图像金字塔\"></a>图像金字塔</h2><ul>\n<li>高斯金字塔</li>\n<li>拉普拉斯金字塔<br><img src=\"Pyramid_1.png\" alt></li>\n</ul>\n<p><strong>高斯金字塔：向下采样</strong><br><img src=\"Pyramid_2.png\" alt></p>\n<p><strong>高斯金字塔：向上采样</strong><br><img src=\"Pyramid_3.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"1.jpg\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#下采样</span>\ndown <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>pyrDown<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 上采样</span>\nup <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>pyrUp<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 先上采样再下采样</span>\nup<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>pyrUp<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\nup_down<span class=\"token operator\">=</span>cv2<span class=\"token punctuation\">.</span>pyrDown<span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span>\ncv_show<span class=\"token punctuation\">(</span>up_down<span class=\"token punctuation\">,</span><span class=\"token string\">'up_down'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"15.png\" alt></p>\n<h2 id=\"图像轮廓\"><a href=\"#图像轮廓\" class=\"headerlink\" title=\"图像轮廓\"></a>图像轮廓</h2><p><code>cv2.findContours(img,mode,method)</code></p>\n<p>mode:轮廓检索模式</p>\n<ul>\n<li>RETR_EXTERNAL ：只检索最外面的轮廓；</li>\n<li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中；</li>\n<li>RETR_CCOMP：检索所有的轮廓，并将他们组织为两层：顶层是各部分的外部边界，第二层是空洞的边界;</li>\n</ul>\n<ul>\n<li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次;(一般使用这个)</li>\n</ul>\n<p>method:轮廓逼近方法</p>\n<ul>\n<li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。</li>\n<li>CHAIN_APPROX_SIMPLE:压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。<br><img src=\"chain.png\" alt><br>一般都是使用二值图像进行轮廓检测</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">\"contours.png\"</span><span class=\"token punctuation\">)</span>\ngray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">,</span> thresh <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_BINARY<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># contours：轮廓的内容，hierarchy：层级（用不上）</span>\ncontours<span class=\"token punctuation\">,</span> hierarchy <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>findContours<span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>RETR_TREE<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>CHAIN_APPROX_NONE<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#传入绘制图像，轮廓，轮廓索引，颜色模式，线条厚度</span>\n<span class=\"token comment\" spellcheck=\"true\"># 注意需要copy,要不原图会变。。。</span>\ndraw_img <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>drawContours<span class=\"token punctuation\">(</span>draw_img<span class=\"token punctuation\">,</span> contours<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ncv_show<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">'res'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"18.png\" alt></p>\n<h2 id=\"绘制边界\"><a href=\"#绘制边界\" class=\"headerlink\" title=\"绘制边界\"></a>绘制边界</h2><h3 id=\"绘制边界矩形\"><a href=\"#绘制边界矩形\" class=\"headerlink\" title=\"绘制边界矩形\"></a>绘制边界矩形</h3><pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'contours.png'</span><span class=\"token punctuation\">)</span>\n\ngray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\nret<span class=\"token punctuation\">,</span> thresh <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>threshold<span class=\"token punctuation\">(</span>gray<span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>THRESH_BINARY<span class=\"token punctuation\">)</span>\ncontours<span class=\"token punctuation\">,</span> hierarchy <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>findContours<span class=\"token punctuation\">(</span>thresh<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>RETR_TREE<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>CHAIN_APPROX_NONE<span class=\"token punctuation\">)</span>\ncnt <span class=\"token operator\">=</span> contours<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nx<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>w<span class=\"token punctuation\">,</span>y<span class=\"token operator\">+</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"16.png\" alt></p>\n<h3 id=\"绘制边界圆\"><a href=\"#绘制边界圆\" class=\"headerlink\" title=\"绘制边界圆\"></a>绘制边界圆</h3><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>radius <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>minEnclosingCircle<span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span> \ncenter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>int<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \nradius <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">)</span> \nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>circle<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>center<span class=\"token punctuation\">,</span>radius<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ncv_show<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"17.png\" alt></p>\n<h1 id=\"模板匹配\"><a href=\"#模板匹配\" class=\"headerlink\" title=\"模板匹配\"></a>模板匹配</h1><p>模板匹配和卷积原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，这个差别程度的计算方法在opencv里有6种，然后将每次计算的结果放入一个矩阵里，作为结果输出。假如原图形是AxB大小，而模板是axb大小，则输出结果的矩阵是<code>(A-a+1)x(B-b+1)</code></p>\n<p><code>cv2.matchTemplate(img, template, method)</code></p>\n<ul>\n<li>TM_SQDIFF：计算平方不同，计算出来的值越小，越相关        </li>\n<li>TM_CCORR：计算相关性，计算出来的值越大，越相关</li>\n<li>TM_CCOEFF：计算相关系数，计算出来的值越大，越相关</li>\n<li>TM_SQDIFF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关</li>\n<li>TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关</li>\n<li>TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关<br>一般是使用有归一化的方法。<a href=\"https://docs.opencv.org/3.3.1/df/dfb/group__imgproc__object.html#ga3a7850640f1fe1f58fe91a2d7583695d\" target=\"_blank\" rel=\"noopener\">相应公式</a></li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 模板匹配</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'lena.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\ntemplate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'face.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nh<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nmethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'cv2.TM_CCOEFF'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cv2.TM_CCOEFF_NORMED'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cv2.TM_CCORR'</span><span class=\"token punctuation\">,</span>\n           <span class=\"token string\">'cv2.TM_CCORR_NORMED'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cv2.TM_SQDIFF'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cv2.TM_SQDIFF_NORMED'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> meth <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">:</span>\n    img2 <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 匹配方法的真值</span>\n    method <span class=\"token operator\">=</span> eval<span class=\"token punctuation\">(</span>meth<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>matchTemplate<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span>\n    min_val<span class=\"token punctuation\">,</span> max_val<span class=\"token punctuation\">,</span> min_loc<span class=\"token punctuation\">,</span> max_loc <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>minMaxLoc<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 如果是平方差匹配TM_SQDIFF或归一化平方差匹配TM_SQDIFF_NORMED，取最小值</span>\n    <span class=\"token keyword\">if</span> method <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>cv2<span class=\"token punctuation\">.</span>TM_SQDIFF<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>TM_SQDIFF_NORMED<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        top_left <span class=\"token operator\">=</span> min_loc\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        top_left <span class=\"token operator\">=</span> max_loc\n    bottom_right <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>top_left<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">,</span> top_left<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 画矩形</span>\n    cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>img2<span class=\"token punctuation\">,</span> top_left<span class=\"token punctuation\">,</span> bottom_right<span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 匹配的结果</span>\n    plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 隐藏坐标轴</span>\n    plt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img2<span class=\"token punctuation\">,</span> cmap<span class=\"token operator\">=</span><span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\"># 在原图中画出匹配的结果</span>\n    plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>suptitle<span class=\"token punctuation\">(</span>meth<span class=\"token punctuation\">)</span>\n    plt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"output_13_1.png\" alt><br><img src=\"output_13_3.png\" alt><br><img src=\"output_13_5.png\" alt><br><img src=\"output_13_7.png\" alt><br><img src=\"output_13_9.png\" alt><br><img src=\"output_13_11.png\" alt></p>\n<h2 id=\"匹配多个对象\"><a href=\"#匹配多个对象\" class=\"headerlink\" title=\"匹配多个对象\"></a>匹配多个对象</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">img_rgb <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'mario.jpg'</span><span class=\"token punctuation\">)</span>\nimg_gray <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>cvtColor<span class=\"token punctuation\">(</span>img_rgb<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2GRAY<span class=\"token punctuation\">)</span>\ntemplate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'mario_coin.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nh<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> template<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\nres <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>matchTemplate<span class=\"token punctuation\">(</span>img_gray<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>TM_CCOEFF_NORMED<span class=\"token punctuation\">)</span>\nthreshold <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span>\n<span class=\"token comment\" spellcheck=\"true\"># 取匹配程度大于%80的坐标</span>\nloc <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>res <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> pt <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\" spellcheck=\"true\"># *号表示可选参数</span>\n    bottom_right <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span>\n    cv2<span class=\"token punctuation\">.</span>rectangle<span class=\"token punctuation\">(</span>img_rgb<span class=\"token punctuation\">,</span> pt<span class=\"token punctuation\">,</span> bottom_right<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ncv2<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span><span class=\"token string\">'img_rgb'</span><span class=\"token punctuation\">,</span> img_rgb<span class=\"token punctuation\">)</span>\ncv2<span class=\"token punctuation\">.</span>waitKey<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"22.png\" alt></p>\n<h1 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h1><p><img src=\"hist_1.png\" alt><br><code>cv2.calcHist(images,channels,mask,histSize,ranges)</code></p>\n<ul>\n<li>images: 原图像图像格式为 uint8 或 ﬂoat32。当传入函数时应用中括号[]括，例如[img]</li>\n<li>channels: 同样用中括号括来它会告函数我们统幅图像的直方图。如果入图像是灰度图它的值就是[0]如果是彩色图像的传入的参数可以是[0][1][2]它们分别对应着BGR。</li>\n<li>mask: 掩模图像。统整幅图像的直方图就把它为None。但是如果你想统图像某一分的直方图的你就制作一个掩模图像并 使用它。</li>\n<li>histSize:BIN的数目。也应用中括号括</li>\n<li>ranges: 像素值范围常为[0-256]<pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'cat.jpg'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#0表示灰度图</span>\nhist <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>calcHist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>img<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>None<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># ravel()是将二维矩阵展成一维数组</span>\nplt<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"23.png\" alt><pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'cat.jpg'</span><span class=\"token punctuation\">)</span> \ncolor <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span>col <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n  histr <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>calcHist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>img<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>None<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n  plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>histr<span class=\"token punctuation\">,</span>color <span class=\"token operator\">=</span> col<span class=\"token punctuation\">)</span> \n  plt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"24.png\" alt><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 创建mast</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'cat.jpg'</span><span class=\"token punctuation\">)</span> \nmask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span>\nmask<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">:</span><span class=\"token number\">400</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span>\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'cat.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\nmasked_img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>bitwise_and<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">,</span> mask<span class=\"token operator\">=</span>mask<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#与操作</span>\nhist_full <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>calcHist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>img<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nhist_mask <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>calcHist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>img<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">221</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">222</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">223</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>masked_img<span class=\"token punctuation\">,</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">224</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>hist_full<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>hist_mask<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlim<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<img src=\"25.png\" alt></li>\n</ul>\n<h2 id=\"直方图均衡化\"><a href=\"#直方图均衡化\" class=\"headerlink\" title=\"直方图均衡化\"></a>直方图均衡化</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'clahe.jpg'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#0表示灰度图 #clahe</span>\nplt<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"26.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">equ <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>equalizeHist<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span> \nplt<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span>equ<span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"27.png\" alt></p>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">res <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>equ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncv_show<span class=\"token punctuation\">(</span><span class=\"token string\">'res'</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"28.png\" alt></p>\n<h2 id=\"自适应直方图均值化\"><a href=\"#自适应直方图均值化\" class=\"headerlink\" title=\"自适应直方图均值化\"></a>自适应直方图均值化</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">clahe <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>createCLAHE<span class=\"token punctuation\">(</span>clipLimit<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> tileGridSize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \nres_clahe <span class=\"token operator\">=</span> clahe<span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>hstack<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>equ<span class=\"token punctuation\">,</span>res_clahe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ncv_show<span class=\"token punctuation\">(</span><span class=\"token string\">'res'</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"29.png\" alt></p>\n<h1 id=\"傅里叶变化\"><a href=\"#傅里叶变化\" class=\"headerlink\" title=\"傅里叶变化\"></a>傅里叶变化</h1><p>我们生活在时间的世界中，早上7:00起来吃早饭，8:00去挤地铁，9:00开始上班。。。以时间为参照就是时域分析。<br>但是在频域中一切都是静止的！<br><a href=\"https://zhuanlan.zhihu.com/p/19763358\" target=\"_blank\" rel=\"noopener\">傅里叶变化讲解</a></p>\n<p><strong>傅里叶变换的作用</strong></p>\n<ul>\n<li>高频：变化剧烈的灰度分量，例如边界</li>\n<li>低频：变化缓慢的灰度分量，例如一片大海</li>\n</ul>\n<p><strong>滤波</strong></p>\n<ul>\n<li>低通滤波器：只保留低频，会使得图像模糊</li>\n<li>高通滤波器：只保留高频，会使得图像细节增强</li>\n</ul>\n<p><strong>傅里叶变化步骤</strong></p>\n<ul>\n<li>opencv中主要就是cv2.dft()和cv2.idft()，输入图像需要先转换成np.float32 格式。</li>\n<li>得到的结果中频率为0的部分会在左上角，通常要转换到中心位置，可以通过shift变换来实现。</li>\n<li>cv2.dft()返回的结果是双通道的（实部，虚部），通常还需要转换成图像格式才能展示（0,255）。</li>\n</ul>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\n\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'lena.jpg'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 将输入图像需要先转换成np.float32 格式</span>\nimg_float32 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n\ndft <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>dft<span class=\"token punctuation\">(</span>img_float32<span class=\"token punctuation\">,</span> flags <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>DFT_COMPLEX_OUTPUT<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 通过shift变换，将结果转换到中心位置</span>\ndft_shift <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>fftshift<span class=\"token punctuation\">(</span>dft<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 得到灰度图能表示的形式</span>\nmagnitude_spectrum <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">(</span>dft_shift<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>dft_shift<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Input Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>magnitude_spectrum<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Magnitude Spectrum'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"30.png\" alt></p>\n<h2 id=\"低通滤波器\"><a href=\"#低通滤波器\" class=\"headerlink\" title=\"低通滤波器\"></a>低通滤波器</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt\n\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'lena.jpg'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nimg_float32 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n\ndft <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>dft<span class=\"token punctuation\">(</span>img_float32<span class=\"token punctuation\">,</span> flags <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>DFT_COMPLEX_OUTPUT<span class=\"token punctuation\">)</span>\ndft_shift <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>fftshift<span class=\"token punctuation\">(</span>dft<span class=\"token punctuation\">)</span>\n\nrows<span class=\"token punctuation\">,</span> cols <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>shape\ncrow<span class=\"token punctuation\">,</span> ccol <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>rows<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">(</span>cols<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 中心位置</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 低通滤波</span>\nmask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span>\nmask<span class=\"token punctuation\">[</span>crow<span class=\"token number\">-30</span><span class=\"token punctuation\">:</span>crow<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> ccol<span class=\"token number\">-30</span><span class=\"token punctuation\">:</span>ccol<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># IDFT</span>\nfshift <span class=\"token operator\">=</span> dft_shift<span class=\"token operator\">*</span>mask\nf_ishift <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>ifftshift<span class=\"token punctuation\">(</span>fshift<span class=\"token punctuation\">)</span>\nimg_back <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>idft<span class=\"token punctuation\">(</span>f_ishift<span class=\"token punctuation\">)</span>\nimg_back <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">(</span>img_back<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>img_back<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Input Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img_back<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Result'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"31.png\" alt></p>\n<h2 id=\"高通滤波器\"><a href=\"#高通滤波器\" class=\"headerlink\" title=\"高通滤波器\"></a>高通滤波器</h2><pre class=\"line-numbers language-python\"><code class=\"language-python\">img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span><span class=\"token string\">'lena.jpg'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nimg_float32 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n\ndft <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>dft<span class=\"token punctuation\">(</span>img_float32<span class=\"token punctuation\">,</span> flags <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>DFT_COMPLEX_OUTPUT<span class=\"token punctuation\">)</span>\ndft_shift <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>fftshift<span class=\"token punctuation\">(</span>dft<span class=\"token punctuation\">)</span>\n\nrows<span class=\"token punctuation\">,</span> cols <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>shape\ncrow<span class=\"token punctuation\">,</span> ccol <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>rows<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> int<span class=\"token punctuation\">(</span>cols<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\"># 中心位置</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 高通滤波</span>\nmask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">)</span>\nmask<span class=\"token punctuation\">[</span>crow<span class=\"token number\">-30</span><span class=\"token punctuation\">:</span>crow<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> ccol<span class=\"token number\">-30</span><span class=\"token punctuation\">:</span>ccol<span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># IDFT</span>\nfshift <span class=\"token operator\">=</span> dft_shift<span class=\"token operator\">*</span>mask\nf_ishift <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>ifftshift<span class=\"token punctuation\">(</span>fshift<span class=\"token punctuation\">)</span>\nimg_back <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>idft<span class=\"token punctuation\">(</span>f_ishift<span class=\"token punctuation\">)</span>\nimg_back <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>magnitude<span class=\"token punctuation\">(</span>img_back<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>img_back<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">121</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Input Image'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>subplot<span class=\"token punctuation\">(</span><span class=\"token number\">122</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>plt<span class=\"token punctuation\">.</span>imshow<span class=\"token punctuation\">(</span>img_back<span class=\"token punctuation\">,</span> cmap <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">'Result'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"32.png\" alt></p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=709553&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解python中OpenCV的相关函数🙈，使用的<del>OpenCV3</del>OpenCV4版本</p>\n</blockquote>\n<h1 id=\"环境配置地址\"><a href=\"#环境配置地址\" class=\"headerlink\" title=\"环境配置地址\"></a>环境配置地址</h1><hr>\n<ul>\n<li><a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"noopener\">Anaconda</a></li>\n<li><a href=\"https://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\" target=\"_blank\" rel=\"noopener\">Python_whl</a></li>\n<li><a href=\"https://www.jetbrains.com/pycharm/\" target=\"_blank\" rel=\"noopener\">PyCharm</a></li>\n</ul>\n<h1 id=\"图像读取-显示-保存\"><a href=\"#图像读取-显示-保存\" class=\"headerlink\" title=\"图像读取-显示-保存\"></a>图像读取-显示-保存</h1><hr>\n<h2 id=\"数据读取-图像\"><a href=\"#数据读取-图像\" class=\"headerlink\" title=\"数据读取-图像\"></a>数据读取-图像</h2><ul>\n<li>cv2.IMREAD_COLOR：彩色图像</li>\n<li>cv2.IMREAD_GRAYSCALE：灰度图像</li>\n</ul>\n<pre><code class=\"python\">import cv2\nimport matplotlib.pyplot as plt\nimport numpy as np\n# 读取彩色图像\nimg = cv2.imread(&quot;1.jpg&quot;, cv2.IMREAD_COLOR)\n# 读取灰度图像\nimg2 =cv2.imread(&#39;2.jpg&#39;,cv2.IMREAD_GRAYSCALE)</code></pre>\n<h2 id=\"图像的显示\"><a href=\"#图像的显示\" class=\"headerlink\" title=\"图像的显示\"></a>图像的显示</h2><pre><code class=\"python\">#图像的显示,也可以创建多个窗口\ncv2.imshow(&#39;image&#39;,img) \n# 等待时间，毫秒级，0表示任意键终止\ncv2.waitKey(0) \ncv2.destroyAllWindows()</code></pre>\n<h2 id=\"图像的保存\"><a href=\"#图像的保存\" class=\"headerlink\" title=\"图像的保存\"></a>图像的保存</h2><pre><code class=\"python\">#保存\ncv2.imwrite(&#39;my_img.jpg&#39;,img)</code></pre>\n<h2 id=\"数据读取-视频\"><a href=\"#数据读取-视频\" class=\"headerlink\" title=\"数据读取-视频\"></a>数据读取-视频</h2><ul>\n<li>cv2.VideoCapture可以捕获摄像头，用数字来控制不同的设备，例如0,1。</li>\n<li>如果是视频文件，直接指定好路径即可。</li>\n</ul>\n<pre><code class=\"python\"># 读取摄像头\n# vc = cv2.VideoCapture(0)\n# 读取视频\nvc = cv2.VideoCapture(&#39;test.mp4&#39;)\n# 检查是否打开正确\nif vc.isOpened(): \n    open, frame = vc.read()\nelse:\n    open = False\nwhile open:\n    ret, frame = vc.read()\n    if frame is None:\n        break\n    if ret == True:\n        gray = cv2.cvtColor(frame,  cv2.COLOR_BGR2GRAY)\n        cv2.imshow(&#39;result&#39;, gray)\n        # 等待1000ms或者按下按键ESC时退出\n        if cv2.waitKey(1000) &amp; 0xFF == 27:\n            break\nvc.release()\ncv2.destroyAllWindows()</code></pre>\n<h2 id=\"截取部分图像数据\"><a href=\"#截取部分图像数据\" class=\"headerlink\" title=\"截取部分图像数据\"></a>截取部分图像数据</h2><pre><code class=\"python\">def cv_show(name,img):\n    cv2.imshow(name,img) \n    cv2.waitKey(0) \n    cv2.destroyAllWindows()\nimg=cv2.imread(&#39;cat.jpg&#39;)\n# 截取图片\ncat=img[0:50,0:200] \ncv_show(&#39;cat&#39;,cat)</code></pre>\n<h2 id=\"颜色通道提取\"><a href=\"#颜色通道提取\" class=\"headerlink\" title=\"颜色通道提取\"></a>颜色通道提取</h2><pre><code class=\"python\">b,g,r=cv2.split(img)\nimg=cv2.merge((b,g,r))\n# 只保留R\ncur_img = img.copy()\ncur_img[:,:,0] = 0\ncur_img[:,:,1] = 0\n# 只保留G\ncur_img = img.copy()\ncur_img[:,:,0] = 0\ncur_img[:,:,2] = 0\n# 只保留B\ncur_img = img.copy()\ncur_img[:,:,1] = 0\ncur_img[:,:,2] = 0</code></pre>\n<h2 id=\"图像的融合\"><a href=\"#图像的融合\" class=\"headerlink\" title=\"图像的融合\"></a>图像的融合</h2><pre><code class=\"python\">img_bear = cv2.imread(&quot;1.jpg&quot;)\nimg_people = cv2.imread(&quot;2.jpg&quot;)\nimg_bear.shape #(639, 639, 3)\nimg_people.shape #(568, 568, 3)\nimg_bear = cv2.resize(img_bear, (568,568))\nimg_bear.shape #(568, 568, 3)\n# res=ax+by+c\nres = cv2.addWeighted(img_bear, 0.4, img_people, 0.6, 0)\nplt.imshow(res)</code></pre>\n<p><img src=\"1.png\" alt></p>\n<h2 id=\"图像尺寸设置\"><a href=\"#图像尺寸设置\" class=\"headerlink\" title=\"图像尺寸设置\"></a>图像尺寸设置</h2><ul>\n<li>x轴变为两倍</li>\n</ul>\n<pre><code class=\"python\">res = cv2.resize(img_bear, (0, 0), fx=2, fy=1)\nplt.imshow(res)</code></pre>\n<p><img src=\"2.png\" alt></p>\n<ul>\n<li>y轴变为两倍</li>\n</ul>\n<pre><code class=\"python\">res = cv2.resize(img_bear, (0, 0), fx=1, fy=2)\nplt.imshow(res)</code></pre>\n<p><img src=\"3.png\" alt></p>\n<h1 id=\"图像处理\"><a href=\"#图像处理\" class=\"headerlink\" title=\"图像处理\"></a>图像处理</h1><hr>\n<h2 id=\"图像阈值\"><a href=\"#图像阈值\" class=\"headerlink\" title=\"图像阈值\"></a>图像阈值</h2><p><code>ret, dst = cv2.threshold(src, thresh, maxval, type)</code></p>\n<ul>\n<li>src： 输入图，只能输入单通道图像，通常来说为灰度图</li>\n<li>dst： 输出图</li>\n<li>thresh： 阈值</li>\n<li>maxval： 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值</li>\n<li>type：二值化操作的类型，包含以下5种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV； cv2.THRESH_TRUNC； cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV</li>\n<li>cv2.THRESH_BINARY 超过阈值部分取maxval（最大值），否则取0</li>\n<li>cv2.THRESH_BINARY_INV THRESH_BINARY的反转</li>\n<li>cv2.THRESH_TRUNC 大于阈值部分设为阈值，否则不变</li>\n<li>cv2.THRESH_TOZERO 大于阈值部分不改变，否则设为0</li>\n<li>cv2.THRESH_TOZERO_INV THRESH_TOZERO的反转</li>\n</ul>\n<pre><code class=\"python\">img_gray = cv2.imread(&quot;2.jpg&quot;, cv2.IMREAD_GRAYSCALE)\nres, thresh1 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_BINARY)\nres, thresh2 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_BINARY_INV)\nres, thresh3 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TRUNC)\nres, thresh4 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TRIANGLE)\nres, thresh5 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TOZERO)\nres, thresh6 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_TOZERO_INV)\n# res, thresh7 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_MASK)\n# res, thresh8 = cv2.threshold(img_gray, 127, 255, cv2.THRESH_OTSU)\ntitles = [&#39;Original Image&#39;, &#39;BINARY&#39;, &#39;BINARY_INV&#39;, &#39;TRUNC&#39;, &#39;TRIANGLE&#39;,&#39;TOZERO&#39;, &#39;TOZERO_INV&#39;,&#39;MASK&#39;,&#39;OTSU&#39;]\nimages = [img_gray, thresh1, thresh2, thresh3, thresh4, thresh5, thresh6, thresh7, thresh8]\n\nfor i in range(6):\n    plt.subplot(2, 3, i + 1)\n    plt.imshow(images[i], &#39;gray&#39;)\n    plt.title(titles[i])\n    plt.xticks([]), plt.yticks([])\nplt.show()</code></pre>\n<p><img src=\"4.png\" alt></p>\n<h2 id=\"图像平滑\"><a href=\"#图像平滑\" class=\"headerlink\" title=\"图像平滑\"></a>图像平滑</h2><pre><code class=\"python\">img = cv2.imread(&quot;lenaNoise.png&quot;)\nplt.imshow(img[:,:,(2,1,0)])</code></pre>\n<p><img src=\"5.png\" alt></p>\n<pre><code class=\"python\"># 均值滤波\n# 简单的平均卷积操作\nblur = cv2.blur(img, (3, 3))\n# cv_show(&#39;blur&#39;, blur)\n# 方框滤波\n# 基本和均值一样，可以选择归一化,容易越界\nbox = cv2.boxFilter(img,-1,(3,3), normalize=False)\n# 方框滤波\n# 基本和均值一样，可以选择归一化\nbox = cv2.boxFilter(img,-1,(3,3), normalize=True)\n# 高斯滤波\n# 高斯模糊的卷积核里的数值是满足高斯分布，相当于更重视中间的\naussian = cv2.GaussianBlur(img, (5, 5), 1)\n# 中值滤波\n# 相当于用中值代替\nmedian = cv2.medianBlur(img, 5)  # 中值滤波,指定大小是5×5\n# 展示所有的\nres = np.hstack((blur,aussian,median))\nplt.imshow(res[:,:,(2,1,0)])</code></pre>\n<p><img src=\"7.png\" alt></p>\n<h2 id=\"形态学处理\"><a href=\"#形态学处理\" class=\"headerlink\" title=\"形态学处理\"></a>形态学处理</h2><h3 id=\"腐蚀\"><a href=\"#腐蚀\" class=\"headerlink\" title=\"腐蚀\"></a>腐蚀</h3><pre><code class=\"python\">img = cv2.imread(&#39;dige.png&#39;)\nkernel = np.ones((30,30), np.uint8)\nerosion_1 = cv2.erode(pie, kernel, iterations=1)# 腐蚀1次\nerosion_2 = cv2.erode(pie,kernel,iterations = 2)# 2次\nerosion_3 = cv2.erode(pie,kernel,iterations = 3)# 3次\nres = np.hstack((erosion_1, erosion_2, erosion_3))\nplt.imshow(res[:,:,(2,1,0)])</code></pre>\n<p><img src=\"8.png\" alt></p>\n<h3 id=\"膨胀\"><a href=\"#膨胀\" class=\"headerlink\" title=\"膨胀\"></a>膨胀</h3><pre><code class=\"python\">pie = cv2.imread(&#39;pie.png&#39;)\nkernel = np.ones((30,30),np.uint8) \ndilate_1 = cv2.dilate(pie,kernel,iterations = 1)\ndilate_2 = cv2.dilate(pie,kernel,iterations = 2)\ndilate_3 = cv2.dilate(pie,kernel,iterations = 3)\nres = np.hstack((dilate_1,dilate_2,dilate_3))\nplt.imshow(res[:,:,(2,1,0)])</code></pre>\n<p><img src=\"9.png\" alt></p>\n<h3 id=\"开运算和闭运算\"><a href=\"#开运算和闭运算\" class=\"headerlink\" title=\"开运算和闭运算\"></a>开运算和闭运算</h3><pre><code class=\"python\"># 开：先腐蚀，再膨胀\nimg = cv2.imread(&#39;dige.png&#39;)\nkernel = np.ones((5,5),np.uint8) \nopening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)\nplt.imshow(opening)</code></pre>\n<p><img src=\"10.png\" alt></p>\n<pre><code class=\"python\"># 闭：先膨胀，再腐蚀\nimg = cv2.imread(&#39;dige.png&#39;)\nkernel = np.ones((5,5),np.uint8) \nclosing = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)\nplt.imshow(closing)</code></pre>\n<p><img src=\"11.png\" alt></p>\n<h3 id=\"礼帽和黑帽\"><a href=\"#礼帽和黑帽\" class=\"headerlink\" title=\"礼帽和黑帽\"></a>礼帽和黑帽</h3><ul>\n<li>礼帽 = 原始输入-开运算结果</li>\n<li>黑帽 = 闭运算-原始输入</li>\n</ul>\n<pre><code class=\"python\">#礼帽\nimg = cv2.imread(&#39;dige.png&#39;)\ntophat = cv2.morphologyEx(img, cv2.MORPH_TOPHAT, kernel)\nplt.imshow(tophat)</code></pre>\n<p><img src=\"19.png\" alt></p>\n<pre><code class=\"python\">#黑帽\nimg = cv2.imread(&#39;dige.png&#39;)\nblackhat  = cv2.morphologyEx(img,cv2.MORPH_BLACKHAT, kernel)\nplt.imshow(tophat)</code></pre>\n<p><img src=\"20.png\" alt></p>\n<h2 id=\"图像梯度\"><a href=\"#图像梯度\" class=\"headerlink\" title=\"图像梯度\"></a>图像梯度</h2><h3 id=\"Sobel算子\"><a href=\"#Sobel算子\" class=\"headerlink\" title=\"Sobel算子\"></a>Sobel算子</h3><p><img src=\"sobel_1.png\" alt><br><code>dst = cv2.Sobel(src, ddepth, dx, dy, ksize)</code></p>\n<ul>\n<li>ddepth:图像的深度</li>\n<li>dx和dy分别表示水平和竖直方向</li>\n<li>ksize是Sobel算子的大小</li>\n</ul>\n<pre><code class=\"python\">sobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)\nsobelx = cv2.convertScaleAbs(sobelx)\nsobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)\nsobely = cv2.convertScaleAbs(sobely)\n# 分别计算x和y，再求和\nsobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)\nplt.imshow(sobelxy)</code></pre>\n<p><img src=\"12.png\" alt></p>\n<pre><code class=\"python\"># 不建议直接计算\nsobelxy=cv2.Sobel(img,cv2.CV_64F,1,1,ksize=3)\nsobelxy = cv2.convertScaleAbs(sobelxy) \nplt.imshow(sobelxy)</code></pre>\n<p><img src=\"13.png\" alt></p>\n<h3 id=\"Scharr算子\"><a href=\"#Scharr算子\" class=\"headerlink\" title=\"Scharr算子\"></a>Scharr算子</h3><p><img src=\"scharr.jpg\" alt></p>\n<h3 id=\"laplacian算子\"><a href=\"#laplacian算子\" class=\"headerlink\" title=\"laplacian算子\"></a>laplacian算子</h3><p><img src=\"l.png\" alt></p>\n<pre><code class=\"python\">img = cv2.imread(&quot;lena.jpg&quot;, cv2.IMREAD_GRAYSCALE)\nsobelx = cv2.Sobel(img,cv2.CV_64F,1,0,ksize=3)\nsobely = cv2.Sobel(img,cv2.CV_64F,0,1,ksize=3)\nsobelx = cv2.convertScaleAbs(sobelx)\nsobely = cv2.convertScaleAbs(sobely)\nsobelxy = cv2.addWeighted(sobelx,0.5,sobely,0.5,0)\n\nscharrx = cv2.Scharr(img, cv2.CV_64F,1,0)\nscharry = cv2.Scharr(img, cv2.CV_64F,0,1)\nscharrx = cv2.convertScaleAbs(scharrx)\nscharry = cv2.convertScaleAbs(scharry)\nscharrxy = cv2.addWeighted(scharrx,0.5,scharry,0.5,0)\n\nlaplacian = cv2.Laplacian(img,cv2.CV_64F)\nlaplacian = cv2.convertScaleAbs(laplacian)\n\nres = np.hstack((sobelxy,scharrxy,laplacian))\nplt.imshow(res)</code></pre>\n<p><img src=\"14.png\" alt></p>\n<h2 id=\"Canny边缘检测\"><a href=\"#Canny边缘检测\" class=\"headerlink\" title=\"Canny边缘检测\"></a>Canny边缘检测</h2><ul>\n<li>1) 使用高斯滤波器，以平滑图像，滤除噪声。</li>\n<li>2) 计算图像中每个像素点的梯度强度和方向。</li>\n<li>3) 应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。</li>\n<li>4) 应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。</li>\n<li>5) 通过抑制孤立的弱边缘最终完成边缘检测。</li>\n</ul>\n<p><strong>1.高斯滤波</strong><br><img src=\"canny_1.png\" alt><br><strong>2.梯度和方向</strong><br><img src=\"canny_2.png\" alt><br><strong>3.非极大值抑制</strong><br><img src=\"canny_3.png\" alt><br><img src=\"canny_4.png\" alt><br><strong>4.双阈值检测</strong><br><img src=\"canny_5.png\" alt></p>\n<pre><code class=\"python\">img = cv2.imread(&quot;lena.jpg&quot;, cv2.IMREAD_GRAYSCALE)\nv1 = cv2.Canny(img, 80,150)\nv2 = cv2.Canny(img, 50,100)\nres = np.hstack((v1,v2))\nplt.imshow(res)\n# cv_show(res, &#39;res&#39;)</code></pre>\n<p><img src=\"21.png\" alt></p>\n<h2 id=\"图像金字塔\"><a href=\"#图像金字塔\" class=\"headerlink\" title=\"图像金字塔\"></a>图像金字塔</h2><ul>\n<li>高斯金字塔</li>\n<li>拉普拉斯金字塔<br><img src=\"Pyramid_1.png\" alt></li>\n</ul>\n<p><strong>高斯金字塔：向下采样</strong><br><img src=\"Pyramid_2.png\" alt></p>\n<p><strong>高斯金字塔：向上采样</strong><br><img src=\"Pyramid_3.png\" alt></p>\n<pre><code class=\"python\">img = cv2.imread(&quot;1.jpg&quot;)\n#下采样\ndown = cv2.pyrDown(img)\n# 上采样\nup = cv2.pyrUp(img)\n# 先上采样再下采样\nup=cv2.pyrUp(img)\nup_down=cv2.pyrDown(up)\ncv_show(up_down,&#39;up_down&#39;)</code></pre>\n<p><img src=\"15.png\" alt></p>\n<h2 id=\"图像轮廓\"><a href=\"#图像轮廓\" class=\"headerlink\" title=\"图像轮廓\"></a>图像轮廓</h2><p><code>cv2.findContours(img,mode,method)</code></p>\n<p>mode:轮廓检索模式</p>\n<ul>\n<li>RETR_EXTERNAL ：只检索最外面的轮廓；</li>\n<li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中；</li>\n<li>RETR_CCOMP：检索所有的轮廓，并将他们组织为两层：顶层是各部分的外部边界，第二层是空洞的边界;</li>\n</ul>\n<ul>\n<li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次;(一般使用这个)</li>\n</ul>\n<p>method:轮廓逼近方法</p>\n<ul>\n<li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）。</li>\n<li>CHAIN_APPROX_SIMPLE:压缩水平的、垂直的和斜的部分，也就是，函数只保留他们的终点部分。<br><img src=\"chain.png\" alt><br>一般都是使用二值图像进行轮廓检测</li>\n</ul>\n<pre><code class=\"python\">img = cv2.imread(&quot;contours.png&quot;)\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\n# contours：轮廓的内容，hierarchy：层级（用不上）\ncontours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\n#传入绘制图像，轮廓，轮廓索引，颜色模式，线条厚度\n# 注意需要copy,要不原图会变。。。\ndraw_img = img.copy()\nres = cv2.drawContours(draw_img, contours, -1, (0, 255, 0), 2)\ncv_show(res, &#39;res&#39;)</code></pre>\n<p><img src=\"18.png\" alt></p>\n<h2 id=\"绘制边界\"><a href=\"#绘制边界\" class=\"headerlink\" title=\"绘制边界\"></a>绘制边界</h2><h3 id=\"绘制边界矩形\"><a href=\"#绘制边界矩形\" class=\"headerlink\" title=\"绘制边界矩形\"></a>绘制边界矩形</h3><pre><code class=\"python\">img = cv2.imread(&#39;contours.png&#39;)\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nret, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\ncontours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)\ncnt = contours[2]\n\nx,y,w,h = cv2.boundingRect(cnt)\nimg = cv2.rectangle(img, (x,y), (x+w,y+h), (0, 255, 0), 2)</code></pre>\n<p><img src=\"16.png\" alt></p>\n<h3 id=\"绘制边界圆\"><a href=\"#绘制边界圆\" class=\"headerlink\" title=\"绘制边界圆\"></a>绘制边界圆</h3><pre><code class=\"python\">(x,y),radius = cv2.minEnclosingCircle(cnt) \ncenter = (int(x),int(y)) \nradius = int(radius) \nimg = cv2.circle(img,center,radius,(0,255,0),2)\ncv_show(img,&#39;img&#39;)</code></pre>\n<p><img src=\"17.png\" alt></p>\n<h1 id=\"模板匹配\"><a href=\"#模板匹配\" class=\"headerlink\" title=\"模板匹配\"></a>模板匹配</h1><p>模板匹配和卷积原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，这个差别程度的计算方法在opencv里有6种，然后将每次计算的结果放入一个矩阵里，作为结果输出。假如原图形是AxB大小，而模板是axb大小，则输出结果的矩阵是<code>(A-a+1)x(B-b+1)</code></p>\n<p><code>cv2.matchTemplate(img, template, method)</code></p>\n<ul>\n<li>TM_SQDIFF：计算平方不同，计算出来的值越小，越相关        </li>\n<li>TM_CCORR：计算相关性，计算出来的值越大，越相关</li>\n<li>TM_CCOEFF：计算相关系数，计算出来的值越大，越相关</li>\n<li>TM_SQDIFF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关</li>\n<li>TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关</li>\n<li>TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关<br>一般是使用有归一化的方法。<a href=\"https://docs.opencv.org/3.3.1/df/dfb/group__imgproc__object.html#ga3a7850640f1fe1f58fe91a2d7583695d\" target=\"_blank\" rel=\"noopener\">相应公式</a></li>\n</ul>\n<pre><code class=\"python\"># 模板匹配\nimg = cv2.imread(&#39;lena.jpg&#39;, 0)\ntemplate = cv2.imread(&#39;face.jpg&#39;, 0)\nh, w = template.shape[:2]\nmethods = [&#39;cv2.TM_CCOEFF&#39;, &#39;cv2.TM_CCOEFF_NORMED&#39;, &#39;cv2.TM_CCORR&#39;,\n           &#39;cv2.TM_CCORR_NORMED&#39;, &#39;cv2.TM_SQDIFF&#39;, &#39;cv2.TM_SQDIFF_NORMED&#39;]\nfor meth in methods:\n    img2 = img.copy()\n\n    # 匹配方法的真值\n    method = eval(meth)\n    print (method)\n    res = cv2.matchTemplate(img, template, method)\n    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n\n    # 如果是平方差匹配TM_SQDIFF或归一化平方差匹配TM_SQDIFF_NORMED，取最小值\n    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:\n        top_left = min_loc\n    else:\n        top_left = max_loc\n    bottom_right = (top_left[0] + w, top_left[1] + h)\n\n    # 画矩形\n    cv2.rectangle(img2, top_left, bottom_right, 255, 2)\n\n    plt.subplot(121), plt.imshow(res, cmap=&#39;gray&#39;)# 匹配的结果\n    plt.xticks([]), plt.yticks([])  # 隐藏坐标轴\n    plt.subplot(122), plt.imshow(img2, cmap=&#39;gray&#39;)# 在原图中画出匹配的结果\n    plt.xticks([]), plt.yticks([])\n    plt.suptitle(meth)\n    plt.show()</code></pre>\n<p><img src=\"output_13_1.png\" alt><br><img src=\"output_13_3.png\" alt><br><img src=\"output_13_5.png\" alt><br><img src=\"output_13_7.png\" alt><br><img src=\"output_13_9.png\" alt><br><img src=\"output_13_11.png\" alt></p>\n<h2 id=\"匹配多个对象\"><a href=\"#匹配多个对象\" class=\"headerlink\" title=\"匹配多个对象\"></a>匹配多个对象</h2><pre><code class=\"python\">img_rgb = cv2.imread(&#39;mario.jpg&#39;)\nimg_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\ntemplate = cv2.imread(&#39;mario_coin.jpg&#39;, 0)\nh, w = template.shape[:2]\n\nres = cv2.matchTemplate(img_gray, template, cv2.TM_CCOEFF_NORMED)\nthreshold = 0.8\n# 取匹配程度大于%80的坐标\nloc = np.where(res &gt;= threshold)\nfor pt in zip(*loc[::-1]):  # *号表示可选参数\n    bottom_right = (pt[0] + w, pt[1] + h)\n    cv2.rectangle(img_rgb, pt, bottom_right, (0, 0, 255), 2)\ncv2.imshow(&#39;img_rgb&#39;, img_rgb)\ncv2.waitKey(0)</code></pre>\n<p><img src=\"22.png\" alt></p>\n<h1 id=\"直方图\"><a href=\"#直方图\" class=\"headerlink\" title=\"直方图\"></a>直方图</h1><p><img src=\"hist_1.png\" alt><br><code>cv2.calcHist(images,channels,mask,histSize,ranges)</code></p>\n<ul>\n<li>images: 原图像图像格式为 uint8 或 ﬂoat32。当传入函数时应用中括号[]括，例如[img]</li>\n<li>channels: 同样用中括号括来它会告函数我们统幅图像的直方图。如果入图像是灰度图它的值就是[0]如果是彩色图像的传入的参数可以是[0][1][2]它们分别对应着BGR。</li>\n<li>mask: 掩模图像。统整幅图像的直方图就把它为None。但是如果你想统图像某一分的直方图的你就制作一个掩模图像并 使用它。</li>\n<li>histSize:BIN的数目。也应用中括号括</li>\n<li>ranges: 像素值范围常为[0-256]<pre><code class=\"python\">img = cv2.imread(&#39;cat.jpg&#39;,0) #0表示灰度图\nhist = cv2.calcHist([img],[0],None,[256],[0,256])\n# ravel()是将二维矩阵展成一维数组\nplt.hist(img.ravel(),256); \nplt.show()</code></pre>\n<img src=\"23.png\" alt><pre><code class=\"python\">img = cv2.imread(&#39;cat.jpg&#39;) \ncolor = (&#39;b&#39;,&#39;g&#39;,&#39;r&#39;)\nfor i,col in enumerate(color): \n  histr = cv2.calcHist([img],[i],None,[256],[0,256]) \n  plt.plot(histr,color = col) \n  plt.xlim([0,256])</code></pre>\n<img src=\"24.png\" alt><pre><code class=\"python\"># 创建mast\nimg = cv2.imread(&#39;cat.jpg&#39;) \nmask = np.zeros(img.shape[:2], np.uint8)\nmask[100:300, 100:400] = 255\nimg = cv2.imread(&#39;cat.jpg&#39;, 0)\nmasked_img = cv2.bitwise_and(img, img, mask=mask)#与操作\nhist_full = cv2.calcHist([img], [0], None, [256], [0, 256])\nhist_mask = cv2.calcHist([img], [0], mask, [256], [0, 256])\nplt.subplot(221), plt.imshow(img, &#39;gray&#39;)\nplt.subplot(222), plt.imshow(mask, &#39;gray&#39;)\nplt.subplot(223), plt.imshow(masked_img, &#39;gray&#39;)\nplt.subplot(224), plt.plot(hist_full), plt.plot(hist_mask)\nplt.xlim([0, 256])\nplt.show()</code></pre>\n<img src=\"25.png\" alt></li>\n</ul>\n<h2 id=\"直方图均衡化\"><a href=\"#直方图均衡化\" class=\"headerlink\" title=\"直方图均衡化\"></a>直方图均衡化</h2><pre><code class=\"python\">img = cv2.imread(&#39;clahe.jpg&#39;,0) #0表示灰度图 #clahe\nplt.hist(img.ravel(),256); \nplt.show()</code></pre>\n<p><img src=\"26.png\" alt></p>\n<pre><code class=\"python\">equ = cv2.equalizeHist(img) \nplt.hist(equ.ravel(),256)\nplt.show()</code></pre>\n<p><img src=\"27.png\" alt></p>\n<pre><code class=\"python\">res = np.hstack((img,equ))\ncv_show(&#39;res&#39;,res)</code></pre>\n<p><img src=\"28.png\" alt></p>\n<h2 id=\"自适应直方图均值化\"><a href=\"#自适应直方图均值化\" class=\"headerlink\" title=\"自适应直方图均值化\"></a>自适应直方图均值化</h2><pre><code class=\"python\">clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8,8)) \nres_clahe = clahe.apply(img)\nres = np.hstack((img,equ,res_clahe))\ncv_show(&#39;res&#39;,res)</code></pre>\n<p><img src=\"29.png\" alt></p>\n<h1 id=\"傅里叶变化\"><a href=\"#傅里叶变化\" class=\"headerlink\" title=\"傅里叶变化\"></a>傅里叶变化</h1><p>我们生活在时间的世界中，早上7:00起来吃早饭，8:00去挤地铁，9:00开始上班。。。以时间为参照就是时域分析。<br>但是在频域中一切都是静止的！<br><a href=\"https://zhuanlan.zhihu.com/p/19763358\" target=\"_blank\" rel=\"noopener\">傅里叶变化讲解</a></p>\n<p><strong>傅里叶变换的作用</strong></p>\n<ul>\n<li>高频：变化剧烈的灰度分量，例如边界</li>\n<li>低频：变化缓慢的灰度分量，例如一片大海</li>\n</ul>\n<p><strong>滤波</strong></p>\n<ul>\n<li>低通滤波器：只保留低频，会使得图像模糊</li>\n<li>高通滤波器：只保留高频，会使得图像细节增强</li>\n</ul>\n<p><strong>傅里叶变化步骤</strong></p>\n<ul>\n<li>opencv中主要就是cv2.dft()和cv2.idft()，输入图像需要先转换成np.float32 格式。</li>\n<li>得到的结果中频率为0的部分会在左上角，通常要转换到中心位置，可以通过shift变换来实现。</li>\n<li>cv2.dft()返回的结果是双通道的（实部，虚部），通常还需要转换成图像格式才能展示（0,255）。</li>\n</ul>\n<pre><code class=\"python\">import numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread(&#39;lena.jpg&#39;,0)\n# 将输入图像需要先转换成np.float32 格式\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\n# 通过shift变换，将结果转换到中心位置\ndft_shift = np.fft.fftshift(dft)\n# 得到灰度图能表示的形式\nmagnitude_spectrum = 20*np.log(cv2.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))\n\nplt.subplot(121),plt.imshow(img, cmap = &#39;gray&#39;)\nplt.title(&#39;Input Image&#39;), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(magnitude_spectrum, cmap = &#39;gray&#39;)\nplt.title(&#39;Magnitude Spectrum&#39;), plt.xticks([]), plt.yticks([])\nplt.show()</code></pre>\n<p><img src=\"30.png\" alt></p>\n<h2 id=\"低通滤波器\"><a href=\"#低通滤波器\" class=\"headerlink\" title=\"低通滤波器\"></a>低通滤波器</h2><pre><code class=\"python\">import numpy as np\nimport cv2\nfrom matplotlib import pyplot as plt\n\nimg = cv2.imread(&#39;lena.jpg&#39;,0)\n\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nrows, cols = img.shape\ncrow, ccol = int(rows/2) , int(cols/2)     # 中心位置\n\n# 低通滤波\nmask = np.zeros((rows, cols, 2), np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 1\n\n# IDFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\n\nplt.subplot(121),plt.imshow(img, cmap = &#39;gray&#39;)\nplt.title(&#39;Input Image&#39;), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = &#39;gray&#39;)\nplt.title(&#39;Result&#39;), plt.xticks([]), plt.yticks([])\n\nplt.show()</code></pre>\n<p><img src=\"31.png\" alt></p>\n<h2 id=\"高通滤波器\"><a href=\"#高通滤波器\" class=\"headerlink\" title=\"高通滤波器\"></a>高通滤波器</h2><pre><code class=\"python\">img = cv2.imread(&#39;lena.jpg&#39;,0)\n\nimg_float32 = np.float32(img)\n\ndft = cv2.dft(img_float32, flags = cv2.DFT_COMPLEX_OUTPUT)\ndft_shift = np.fft.fftshift(dft)\n\nrows, cols = img.shape\ncrow, ccol = int(rows/2) , int(cols/2)     # 中心位置\n\n# 高通滤波\nmask = np.ones((rows, cols, 2), np.uint8)\nmask[crow-30:crow+30, ccol-30:ccol+30] = 0\n\n# IDFT\nfshift = dft_shift*mask\nf_ishift = np.fft.ifftshift(fshift)\nimg_back = cv2.idft(f_ishift)\nimg_back = cv2.magnitude(img_back[:,:,0],img_back[:,:,1])\n\nplt.subplot(121),plt.imshow(img, cmap = &#39;gray&#39;)\nplt.title(&#39;Input Image&#39;), plt.xticks([]), plt.yticks([])\nplt.subplot(122),plt.imshow(img_back, cmap = &#39;gray&#39;)\nplt.title(&#39;Result&#39;), plt.xticks([]), plt.yticks([])\n\nplt.show()</code></pre>\n<p><img src=\"32.png\" alt></p>\n"},{"title":"Sublime插件推荐","img":"/medias/featureimages/10.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-22T08:52:00.000Z","password":null,"summary":"推荐一下好用的Sublime插件，打造适合自己的编辑器😁。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=16846088&auto=1&height=66\"></iframe></div>\n\n>推荐一下好用的Sublime插件，打造适合自己的编辑器😁。\n\n# Plain Tasks\n---\n![效果图](2.png)\n- [官方文档](https://github.com/aziz/PlainTasks)\n\n今日事今日毕，使用Plain Tasks可以很方便的规划自己的任务。\n\n## 配置步骤\n`Shift+Ctrl+P`调出命令行,输入`Package Control: Install Package`\n![](1.png)\n输入Plain Tasks直接安装，成功后就能在`Preferences/Package Settings`中看到`PlainTasks`这一选项\n\n## 使用说明\n### 创建任务表\n`Shift+Ctrl+P`输入`tasks`，选择`New document`\n### 任务编辑\n- `Ctrl+i`添加一个新任务\n- `Ctrl+d`将任务标记为完成，再按一次可将其重置\n- `Alt+c`将任务标记为取消，再按一次可将其重置\n- `Shift+Ctrl+a`将已完成的任务存档，将其从列表中删除并将它们附加到“存档”项目下文件的底部\n- `Shift+Ctrl+u`将在默认浏览器中打开位于光标处的url，但http方案必须包含在<>中，如`<https://baidu.com>`\n- `:`行尾带有冒号的任何东西都是项目标题，您也可以通过缩进来嵌套项目。\n- `--`,`Tab`会创建 `--- ✄ -----------------------`用来分隔\n- 标签：\n`c`,`Tab`创建`@critical`标签，代表重要且紧急\n`h`,`Tab`创建`@high`标签，代表重要不紧急\n`l`,`Tab`创建`@low`标签，代表不重要且不紧急\n`s`,`Tab`创建`@stared`标签，再按tab一次，将插入当前日期，当您完成或取消带有此类标记的任务时，您将知道自开始以来已经经过了多少时间；如果更改完成/取消/开始时间，则可以删除时间后，在标签后按tab来重新计算花费在任务上的时间\n`d`,`Tab`创建`@due`标签，用来规定任务完成的时间，再按tab一次，将插入当前日期，与`@due(0)`一样\n\n|<font color=\"#dd00dd\">符号</font><br />|<font color=\"#00dd00\">含义</font><br />|\n|:----------------:|:--------------------------------------------------:|\n|`@due(1)`         |下个月的第一天|\n|`@due(5)`         |当前月份的第5天（如果当前日期为5日或5日之后，则为下个月）|\n|`@due(2-3)`       |本年或下一年的2月3日|\n|`@due(20.1.1 1:1)`|2020年1月1日在01:01 `@due(20-01-01 01:01)`|\n|`@due(+)`         |明天一天`@due( +1)` 或`@due( +1d)`|\n|`@due(+w)`        |自当前日期起一周 `@due( +7)`|\n|`@due(+2:)`       |自当前日期起两个小时|\n|`@due(+:555)`     |自当前日期起555分钟|\n|`@due(+2 12:)`    |自当前日期起2天12个小时|\n\n\n### 更改配置\n- `Preferences/Package Settings/PlainTasks/Settings-Default`中是默认配置\n- `Preferences/Package Settings/PlainTasks/Settings-User`是用户配置\n\n#### 配色更改\n在`Preferences/Package Settings/PlainTasks/Settings-User`中加入\n\n```sublime\n{\"color_scheme\": \"Packages/PlainTasks/tasks.hidden-tmTheme\",}\n```\n其他配色可以选择：\n\n```sublime\nPackages/PlainTasks/tasks-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-gray.hidden-tmTheme\nPackages/PlainTasks/tasks-monokai.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-light.hidden-tmTheme\n```\n\n#### 拼写检测\n为了防止sublime拼写检查时报错，可以在`Preferences/Settings/User`中加入\n```sublime\n{\n   “ ignore_words ”：[ “ ☐ ”，“ ✔ ”，“ ✘ ”，“ ✄ ” ]\n}\n```\n\n### 任务统计\n在命令面板中输入`Tasks: Copy Statistics`，可以直接粘贴到文档里\n\n### 进度条设置\n更改进度条显示的格式，可以在`Preferences/Settings/User`中加入\n```sublime\n{\n    \"bar_full\": \"■\",   // any char\n    \"bar_empty\": \"☐\", // any char\n\n    // if you want to avoid Unicode when copy stats — you can define replacements\n    // e.g. to convert ■■■■■■☐☐☐☐ to [======    ]\n    \"replace_stats_chars\": [[\" ■\", \" [=\"], [\"■\", \"=\"], [\"☐ \", \" ] \"], [\"☐\", \" \"]]\n}\n```","source":"_posts/Sublime.md","raw":"---\ntitle: Sublime插件推荐\nimg: /medias/featureimages/10.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-22 16:52:00\npassword:\nsummary: 推荐一下好用的Sublime插件，打造适合自己的编辑器😁。\ntags:\n- Sublime\n- 工具\ncategories:\n- 软件\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=16846088&auto=1&height=66\"></iframe></div>\n\n>推荐一下好用的Sublime插件，打造适合自己的编辑器😁。\n\n# Plain Tasks\n---\n![效果图](2.png)\n- [官方文档](https://github.com/aziz/PlainTasks)\n\n今日事今日毕，使用Plain Tasks可以很方便的规划自己的任务。\n\n## 配置步骤\n`Shift+Ctrl+P`调出命令行,输入`Package Control: Install Package`\n![](1.png)\n输入Plain Tasks直接安装，成功后就能在`Preferences/Package Settings`中看到`PlainTasks`这一选项\n\n## 使用说明\n### 创建任务表\n`Shift+Ctrl+P`输入`tasks`，选择`New document`\n### 任务编辑\n- `Ctrl+i`添加一个新任务\n- `Ctrl+d`将任务标记为完成，再按一次可将其重置\n- `Alt+c`将任务标记为取消，再按一次可将其重置\n- `Shift+Ctrl+a`将已完成的任务存档，将其从列表中删除并将它们附加到“存档”项目下文件的底部\n- `Shift+Ctrl+u`将在默认浏览器中打开位于光标处的url，但http方案必须包含在<>中，如`<https://baidu.com>`\n- `:`行尾带有冒号的任何东西都是项目标题，您也可以通过缩进来嵌套项目。\n- `--`,`Tab`会创建 `--- ✄ -----------------------`用来分隔\n- 标签：\n`c`,`Tab`创建`@critical`标签，代表重要且紧急\n`h`,`Tab`创建`@high`标签，代表重要不紧急\n`l`,`Tab`创建`@low`标签，代表不重要且不紧急\n`s`,`Tab`创建`@stared`标签，再按tab一次，将插入当前日期，当您完成或取消带有此类标记的任务时，您将知道自开始以来已经经过了多少时间；如果更改完成/取消/开始时间，则可以删除时间后，在标签后按tab来重新计算花费在任务上的时间\n`d`,`Tab`创建`@due`标签，用来规定任务完成的时间，再按tab一次，将插入当前日期，与`@due(0)`一样\n\n|<font color=\"#dd00dd\">符号</font><br />|<font color=\"#00dd00\">含义</font><br />|\n|:----------------:|:--------------------------------------------------:|\n|`@due(1)`         |下个月的第一天|\n|`@due(5)`         |当前月份的第5天（如果当前日期为5日或5日之后，则为下个月）|\n|`@due(2-3)`       |本年或下一年的2月3日|\n|`@due(20.1.1 1:1)`|2020年1月1日在01:01 `@due(20-01-01 01:01)`|\n|`@due(+)`         |明天一天`@due( +1)` 或`@due( +1d)`|\n|`@due(+w)`        |自当前日期起一周 `@due( +7)`|\n|`@due(+2:)`       |自当前日期起两个小时|\n|`@due(+:555)`     |自当前日期起555分钟|\n|`@due(+2 12:)`    |自当前日期起2天12个小时|\n\n\n### 更改配置\n- `Preferences/Package Settings/PlainTasks/Settings-Default`中是默认配置\n- `Preferences/Package Settings/PlainTasks/Settings-User`是用户配置\n\n#### 配色更改\n在`Preferences/Package Settings/PlainTasks/Settings-User`中加入\n\n```sublime\n{\"color_scheme\": \"Packages/PlainTasks/tasks.hidden-tmTheme\",}\n```\n其他配色可以选择：\n\n```sublime\nPackages/PlainTasks/tasks-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-gray.hidden-tmTheme\nPackages/PlainTasks/tasks-monokai.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-light.hidden-tmTheme\n```\n\n#### 拼写检测\n为了防止sublime拼写检查时报错，可以在`Preferences/Settings/User`中加入\n```sublime\n{\n   “ ignore_words ”：[ “ ☐ ”，“ ✔ ”，“ ✘ ”，“ ✄ ” ]\n}\n```\n\n### 任务统计\n在命令面板中输入`Tasks: Copy Statistics`，可以直接粘贴到文档里\n\n### 进度条设置\n更改进度条显示的格式，可以在`Preferences/Settings/User`中加入\n```sublime\n{\n    \"bar_full\": \"■\",   // any char\n    \"bar_empty\": \"☐\", // any char\n\n    // if you want to avoid Unicode when copy stats — you can define replacements\n    // e.g. to convert ■■■■■■☐☐☐☐ to [======    ]\n    \"replace_stats_chars\": [[\" ■\", \" [=\"], [\"■\", \"=\"], [\"☐ \", \" ] \"], [\"☐\", \" \"]]\n}\n```","slug":"Sublime","published":1,"updated":"2020-10-16T11:25:51.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogx2001drouxuk6r7wf7","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=16846088&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>推荐一下好用的Sublime插件，打造适合自己的编辑器😁。</p>\n</blockquote>\n<h1 id=\"Plain-Tasks\"><a href=\"#Plain-Tasks\" class=\"headerlink\" title=\"Plain Tasks\"></a>Plain Tasks</h1><hr>\n<p><img src=\"2.png\" alt=\"效果图\"></p>\n<ul>\n<li><a href=\"https://github.com/aziz/PlainTasks\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n</ul>\n<p>今日事今日毕，使用Plain Tasks可以很方便的规划自己的任务。</p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><p><code>Shift+Ctrl+P</code>调出命令行,输入<code>Package Control: Install Package</code><br><img src=\"1.png\" alt><br>输入Plain Tasks直接安装，成功后就能在<code>Preferences/Package Settings</code>中看到<code>PlainTasks</code>这一选项</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><h3 id=\"创建任务表\"><a href=\"#创建任务表\" class=\"headerlink\" title=\"创建任务表\"></a>创建任务表</h3><p><code>Shift+Ctrl+P</code>输入<code>tasks</code>，选择<code>New document</code></p>\n<h3 id=\"任务编辑\"><a href=\"#任务编辑\" class=\"headerlink\" title=\"任务编辑\"></a>任务编辑</h3><ul>\n<li><code>Ctrl+i</code>添加一个新任务</li>\n<li><code>Ctrl+d</code>将任务标记为完成，再按一次可将其重置</li>\n<li><code>Alt+c</code>将任务标记为取消，再按一次可将其重置</li>\n<li><code>Shift+Ctrl+a</code>将已完成的任务存档，将其从列表中删除并将它们附加到“存档”项目下文件的底部</li>\n<li><code>Shift+Ctrl+u</code>将在默认浏览器中打开位于光标处的url，但http方案必须包含在&lt;&gt;中，如<code>&lt;https://baidu.com&gt;</code></li>\n<li><code>:</code>行尾带有冒号的任何东西都是项目标题，您也可以通过缩进来嵌套项目。</li>\n<li><code>--</code>,<code>Tab</code>会创建 <code>--- ✄ -----------------------</code>用来分隔</li>\n<li>标签：<br><code>c</code>,<code>Tab</code>创建<code>@critical</code>标签，代表重要且紧急<br><code>h</code>,<code>Tab</code>创建<code>@high</code>标签，代表重要不紧急<br><code>l</code>,<code>Tab</code>创建<code>@low</code>标签，代表不重要且不紧急<br><code>s</code>,<code>Tab</code>创建<code>@stared</code>标签，再按tab一次，将插入当前日期，当您完成或取消带有此类标记的任务时，您将知道自开始以来已经经过了多少时间；如果更改完成/取消/开始时间，则可以删除时间后，在标签后按tab来重新计算花费在任务上的时间<br><code>d</code>,<code>Tab</code>创建<code>@due</code>标签，用来规定任务完成的时间，再按tab一次，将插入当前日期，与<code>@due(0)</code>一样</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><font color=\"#dd00dd\">符号</font><br></th>\n<th align=\"center\"><font color=\"#00dd00\">含义</font><br></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>@due(1)</code></td>\n<td align=\"center\">下个月的第一天</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(5)</code></td>\n<td align=\"center\">当前月份的第5天（如果当前日期为5日或5日之后，则为下个月）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(2-3)</code></td>\n<td align=\"center\">本年或下一年的2月3日</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(20.1.1 1:1)</code></td>\n<td align=\"center\">2020年1月1日在01:01 <code>@due(20-01-01 01:01)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+)</code></td>\n<td align=\"center\">明天一天<code>@due( +1)</code> 或<code>@due( +1d)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+w)</code></td>\n<td align=\"center\">自当前日期起一周 <code>@due( +7)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+2:)</code></td>\n<td align=\"center\">自当前日期起两个小时</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+:555)</code></td>\n<td align=\"center\">自当前日期起555分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+2 12:)</code></td>\n<td align=\"center\">自当前日期起2天12个小时</td>\n</tr>\n</tbody></table>\n<h3 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h3><ul>\n<li><code>Preferences/Package Settings/PlainTasks/Settings-Default</code>中是默认配置</li>\n<li><code>Preferences/Package Settings/PlainTasks/Settings-User</code>是用户配置</li>\n</ul>\n<h4 id=\"配色更改\"><a href=\"#配色更改\" class=\"headerlink\" title=\"配色更改\"></a>配色更改</h4><p>在<code>Preferences/Package Settings/PlainTasks/Settings-User</code>中加入</p>\n<pre class=\"line-numbers language-sublime\"><code class=\"language-sublime\">{\"color_scheme\": \"Packages/PlainTasks/tasks.hidden-tmTheme\",}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其他配色可以选择：</p>\n<pre class=\"line-numbers language-sublime\"><code class=\"language-sublime\">Packages/PlainTasks/tasks-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-gray.hidden-tmTheme\nPackages/PlainTasks/tasks-monokai.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-light.hidden-tmTheme<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"拼写检测\"><a href=\"#拼写检测\" class=\"headerlink\" title=\"拼写检测\"></a>拼写检测</h4><p>为了防止sublime拼写检查时报错，可以在<code>Preferences/Settings/User</code>中加入</p>\n<pre class=\"line-numbers language-sublime\"><code class=\"language-sublime\">{\n   “ ignore_words ”：[ “ ☐ ”，“ ✔ ”，“ ✘ ”，“ ✄ ” ]\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"任务统计\"><a href=\"#任务统计\" class=\"headerlink\" title=\"任务统计\"></a>任务统计</h3><p>在命令面板中输入<code>Tasks: Copy Statistics</code>，可以直接粘贴到文档里</p>\n<h3 id=\"进度条设置\"><a href=\"#进度条设置\" class=\"headerlink\" title=\"进度条设置\"></a>进度条设置</h3><p>更改进度条显示的格式，可以在<code>Preferences/Settings/User</code>中加入</p>\n<pre class=\"line-numbers language-sublime\"><code class=\"language-sublime\">{\n    \"bar_full\": \"■\",   // any char\n    \"bar_empty\": \"☐\", // any char\n\n    // if you want to avoid Unicode when copy stats — you can define replacements\n    // e.g. to convert ■■■■■■☐☐☐☐ to [======    ]\n    \"replace_stats_chars\": [[\" ■\", \" [=\"], [\"■\", \"=\"], [\"☐ \", \" ] \"], [\"☐\", \" \"]]\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=16846088&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>推荐一下好用的Sublime插件，打造适合自己的编辑器😁。</p>\n</blockquote>\n<h1 id=\"Plain-Tasks\"><a href=\"#Plain-Tasks\" class=\"headerlink\" title=\"Plain Tasks\"></a>Plain Tasks</h1><hr>\n<p><img src=\"2.png\" alt=\"效果图\"></p>\n<ul>\n<li><a href=\"https://github.com/aziz/PlainTasks\" target=\"_blank\" rel=\"noopener\">官方文档</a></li>\n</ul>\n<p>今日事今日毕，使用Plain Tasks可以很方便的规划自己的任务。</p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><p><code>Shift+Ctrl+P</code>调出命令行,输入<code>Package Control: Install Package</code><br><img src=\"1.png\" alt><br>输入Plain Tasks直接安装，成功后就能在<code>Preferences/Package Settings</code>中看到<code>PlainTasks</code>这一选项</p>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><h3 id=\"创建任务表\"><a href=\"#创建任务表\" class=\"headerlink\" title=\"创建任务表\"></a>创建任务表</h3><p><code>Shift+Ctrl+P</code>输入<code>tasks</code>，选择<code>New document</code></p>\n<h3 id=\"任务编辑\"><a href=\"#任务编辑\" class=\"headerlink\" title=\"任务编辑\"></a>任务编辑</h3><ul>\n<li><code>Ctrl+i</code>添加一个新任务</li>\n<li><code>Ctrl+d</code>将任务标记为完成，再按一次可将其重置</li>\n<li><code>Alt+c</code>将任务标记为取消，再按一次可将其重置</li>\n<li><code>Shift+Ctrl+a</code>将已完成的任务存档，将其从列表中删除并将它们附加到“存档”项目下文件的底部</li>\n<li><code>Shift+Ctrl+u</code>将在默认浏览器中打开位于光标处的url，但http方案必须包含在&lt;&gt;中，如<code>&lt;https://baidu.com&gt;</code></li>\n<li><code>:</code>行尾带有冒号的任何东西都是项目标题，您也可以通过缩进来嵌套项目。</li>\n<li><code>--</code>,<code>Tab</code>会创建 <code>--- ✄ -----------------------</code>用来分隔</li>\n<li>标签：<br><code>c</code>,<code>Tab</code>创建<code>@critical</code>标签，代表重要且紧急<br><code>h</code>,<code>Tab</code>创建<code>@high</code>标签，代表重要不紧急<br><code>l</code>,<code>Tab</code>创建<code>@low</code>标签，代表不重要且不紧急<br><code>s</code>,<code>Tab</code>创建<code>@stared</code>标签，再按tab一次，将插入当前日期，当您完成或取消带有此类标记的任务时，您将知道自开始以来已经经过了多少时间；如果更改完成/取消/开始时间，则可以删除时间后，在标签后按tab来重新计算花费在任务上的时间<br><code>d</code>,<code>Tab</code>创建<code>@due</code>标签，用来规定任务完成的时间，再按tab一次，将插入当前日期，与<code>@due(0)</code>一样</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"><font color=\"#dd00dd\">符号</font><br></th>\n<th align=\"center\"><font color=\"#00dd00\">含义</font><br></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>@due(1)</code></td>\n<td align=\"center\">下个月的第一天</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(5)</code></td>\n<td align=\"center\">当前月份的第5天（如果当前日期为5日或5日之后，则为下个月）</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(2-3)</code></td>\n<td align=\"center\">本年或下一年的2月3日</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(20.1.1 1:1)</code></td>\n<td align=\"center\">2020年1月1日在01:01 <code>@due(20-01-01 01:01)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+)</code></td>\n<td align=\"center\">明天一天<code>@due( +1)</code> 或<code>@due( +1d)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+w)</code></td>\n<td align=\"center\">自当前日期起一周 <code>@due( +7)</code></td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+2:)</code></td>\n<td align=\"center\">自当前日期起两个小时</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+:555)</code></td>\n<td align=\"center\">自当前日期起555分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>@due(+2 12:)</code></td>\n<td align=\"center\">自当前日期起2天12个小时</td>\n</tr>\n</tbody></table>\n<h3 id=\"更改配置\"><a href=\"#更改配置\" class=\"headerlink\" title=\"更改配置\"></a>更改配置</h3><ul>\n<li><code>Preferences/Package Settings/PlainTasks/Settings-Default</code>中是默认配置</li>\n<li><code>Preferences/Package Settings/PlainTasks/Settings-User</code>是用户配置</li>\n</ul>\n<h4 id=\"配色更改\"><a href=\"#配色更改\" class=\"headerlink\" title=\"配色更改\"></a>配色更改</h4><p>在<code>Preferences/Package Settings/PlainTasks/Settings-User</code>中加入</p>\n<pre><code class=\"sublime\">{&quot;color_scheme&quot;: &quot;Packages/PlainTasks/tasks.hidden-tmTheme&quot;,}</code></pre>\n<p>其他配色可以选择：</p>\n<pre><code class=\"sublime\">Packages/PlainTasks/tasks-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\nPackages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-gray.hidden-tmTheme\nPackages/PlainTasks/tasks-monokai.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\nPackages/PlainTasks/tasks-solarized-light.hidden-tmTheme</code></pre>\n<h4 id=\"拼写检测\"><a href=\"#拼写检测\" class=\"headerlink\" title=\"拼写检测\"></a>拼写检测</h4><p>为了防止sublime拼写检查时报错，可以在<code>Preferences/Settings/User</code>中加入</p>\n<pre><code class=\"sublime\">{\n   “ ignore_words ”：[ “ ☐ ”，“ ✔ ”，“ ✘ ”，“ ✄ ” ]\n}</code></pre>\n<h3 id=\"任务统计\"><a href=\"#任务统计\" class=\"headerlink\" title=\"任务统计\"></a>任务统计</h3><p>在命令面板中输入<code>Tasks: Copy Statistics</code>，可以直接粘贴到文档里</p>\n<h3 id=\"进度条设置\"><a href=\"#进度条设置\" class=\"headerlink\" title=\"进度条设置\"></a>进度条设置</h3><p>更改进度条显示的格式，可以在<code>Preferences/Settings/User</code>中加入</p>\n<pre><code class=\"sublime\">{\n    &quot;bar_full&quot;: &quot;■&quot;,   // any char\n    &quot;bar_empty&quot;: &quot;☐&quot;, // any char\n\n    // if you want to avoid Unicode when copy stats — you can define replacements\n    // e.g. to convert ■■■■■■☐☐☐☐ to [======    ]\n    &quot;replace_stats_chars&quot;: [[&quot; ■&quot;, &quot; [=&quot;], [&quot;■&quot;, &quot;=&quot;], [&quot;☐ &quot;, &quot; ] &quot;], [&quot;☐&quot;, &quot; &quot;]]\n}</code></pre>\n"},{"title":"PyCharm配置远程连接","img":"/medias/featureimages/9.jpg","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-09T05:39:19.000Z","password":null,"summary":"主要讲解PyCharm远程连接服务器时的相关配置😝。","_content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=27588021&auto=1&height=66\"></iframe></div>\n\n>主要讲解PyCharm远程连接服务器时的相关配置😝。\n\n# 简介\n---\n基本上我们使用PyCharm都是在本地进行开发，但是当我们需要在服务器上调试代码时咋办呢？一种是将服务器上的程序下载到本地，调试编写完后上传，这种方法可行，但是每次都要上传下载，较为繁琐。另一种方法就是利用PyCharm远程调试代码咯，只需稍稍配置一下就能实现。\n\n# 配置步骤\n---\n## SFTP配置\n打开PyCharm，选择`Tools/Deployment/Configuration`选项\n![](1.png)\n配置连接服务器\n![](2.png)\n点击`Test Connection`，显示成功，表明配置正确\n![](7.png)\n选择文件传输对应的位置\n![](3.png)\n选择不需要同步的文件\n![](4.png)\n文件可以手动上传，也可以自动上传\n![](10.png)\n\n## Interpreter配置\n打开`File/Settings/Project Interpreter`选项，点击`add`\n![](5.png)\n添加服务器解释器\n![](6.png)\n选择解释器的位置，以及文件夹的映射关系\n![](8.png)\n解释器配置完成后就能看到环境下包含的`package`\n![](9.png)\n此时就能愉快的使用PyCharm进行`DeBug`啦!","source":"_posts/PyCharm.md","raw":"---\ntitle: PyCharm配置远程连接\nimg: /medias/featureimages/9.jpg\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-09 13:39:19\npassword:\nsummary: 主要讲解PyCharm远程连接服务器时的相关配置😝。\ntags:\n- PyCharm\n- 服务器配置\ncategories:\n- 环境搭建\n---\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=27588021&auto=1&height=66\"></iframe></div>\n\n>主要讲解PyCharm远程连接服务器时的相关配置😝。\n\n# 简介\n---\n基本上我们使用PyCharm都是在本地进行开发，但是当我们需要在服务器上调试代码时咋办呢？一种是将服务器上的程序下载到本地，调试编写完后上传，这种方法可行，但是每次都要上传下载，较为繁琐。另一种方法就是利用PyCharm远程调试代码咯，只需稍稍配置一下就能实现。\n\n# 配置步骤\n---\n## SFTP配置\n打开PyCharm，选择`Tools/Deployment/Configuration`选项\n![](1.png)\n配置连接服务器\n![](2.png)\n点击`Test Connection`，显示成功，表明配置正确\n![](7.png)\n选择文件传输对应的位置\n![](3.png)\n选择不需要同步的文件\n![](4.png)\n文件可以手动上传，也可以自动上传\n![](10.png)\n\n## Interpreter配置\n打开`File/Settings/Project Interpreter`选项，点击`add`\n![](5.png)\n添加服务器解释器\n![](6.png)\n选择解释器的位置，以及文件夹的映射关系\n![](8.png)\n解释器配置完成后就能看到环境下包含的`package`\n![](9.png)\n此时就能愉快的使用PyCharm进行`DeBug`啦!","slug":"PyCharm","published":1,"updated":"2020-10-16T11:25:51.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckqrtogx4001frouxdq35tn8m","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=27588021&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解PyCharm远程连接服务器时的相关配置😝。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><hr>\n<p>基本上我们使用PyCharm都是在本地进行开发，但是当我们需要在服务器上调试代码时咋办呢？一种是将服务器上的程序下载到本地，调试编写完后上传，这种方法可行，但是每次都要上传下载，较为繁琐。另一种方法就是利用PyCharm远程调试代码咯，只需稍稍配置一下就能实现。</p>\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><hr>\n<h2 id=\"SFTP配置\"><a href=\"#SFTP配置\" class=\"headerlink\" title=\"SFTP配置\"></a>SFTP配置</h2><p>打开PyCharm，选择<code>Tools/Deployment/Configuration</code>选项<br><img src=\"1.png\" alt><br>配置连接服务器<br><img src=\"2.png\" alt><br>点击<code>Test Connection</code>，显示成功，表明配置正确<br><img src=\"7.png\" alt><br>选择文件传输对应的位置<br><img src=\"3.png\" alt><br>选择不需要同步的文件<br><img src=\"4.png\" alt><br>文件可以手动上传，也可以自动上传<br><img src=\"10.png\" alt></p>\n<h2 id=\"Interpreter配置\"><a href=\"#Interpreter配置\" class=\"headerlink\" title=\"Interpreter配置\"></a>Interpreter配置</h2><p>打开<code>File/Settings/Project Interpreter</code>选项，点击<code>add</code><br><img src=\"5.png\" alt><br>添加服务器解释器<br><img src=\"6.png\" alt><br>选择解释器的位置，以及文件夹的映射关系<br><img src=\"8.png\" alt><br>解释器配置完成后就能看到环境下包含的<code>package</code><br><img src=\"9.png\" alt><br>此时就能愉快的使用PyCharm进行<code>DeBug</code>啦!</p>\n","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/夜曲.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"生きていたんだよな","artist":"あいみょん","url":"/medias/music/生きていたんだよな.mp3","cover":"/medias/music/avatars/生きていたんだよな.jpg"},{"name":"天气之子","artist":"RADWIMPS","url":"/medias/music/Weather.mp3","cover":"/medias/music/avatars/Weather.jpg"},{"name":"深い森","artist":"Do As Infinity","url":"/medias/music/深い森.mp3","cover":"/medias/music/avatars/深い森.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=27588021&auto=1&height=66\"></iframe></div>\n\n<blockquote>\n<p>主要讲解PyCharm远程连接服务器时的相关配置😝。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><hr>\n<p>基本上我们使用PyCharm都是在本地进行开发，但是当我们需要在服务器上调试代码时咋办呢？一种是将服务器上的程序下载到本地，调试编写完后上传，这种方法可行，但是每次都要上传下载，较为繁琐。另一种方法就是利用PyCharm远程调试代码咯，只需稍稍配置一下就能实现。</p>\n<h1 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h1><hr>\n<h2 id=\"SFTP配置\"><a href=\"#SFTP配置\" class=\"headerlink\" title=\"SFTP配置\"></a>SFTP配置</h2><p>打开PyCharm，选择<code>Tools/Deployment/Configuration</code>选项<br><img src=\"1.png\" alt><br>配置连接服务器<br><img src=\"2.png\" alt><br>点击<code>Test Connection</code>，显示成功，表明配置正确<br><img src=\"7.png\" alt><br>选择文件传输对应的位置<br><img src=\"3.png\" alt><br>选择不需要同步的文件<br><img src=\"4.png\" alt><br>文件可以手动上传，也可以自动上传<br><img src=\"10.png\" alt></p>\n<h2 id=\"Interpreter配置\"><a href=\"#Interpreter配置\" class=\"headerlink\" title=\"Interpreter配置\"></a>Interpreter配置</h2><p>打开<code>File/Settings/Project Interpreter</code>选项，点击<code>add</code><br><img src=\"5.png\" alt><br>添加服务器解释器<br><img src=\"6.png\" alt><br>选择解释器的位置，以及文件夹的映射关系<br><img src=\"8.png\" alt><br>解释器配置完成后就能看到环境下包含的<code>package</code><br><img src=\"9.png\" alt><br>此时就能愉快的使用PyCharm进行<code>DeBug</code>啦!</p>\n"}],"PostAsset":[{"_id":"source/_posts/OpenCV/28.png","slug":"28.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/Pyramid_1.png","slug":"Pyramid_1.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/29.png","slug":"29.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/CDN/1.png","slug":"1.png","post":"ckqrtogrh0001rouxffowf3pc","modified":0,"renderable":0},{"_id":"source/_posts/CDN/2.png","slug":"2.png","post":"ckqrtogrh0001rouxffowf3pc","modified":0,"renderable":0},{"_id":"source/_posts/CDN/3.png","slug":"3.png","post":"ckqrtogrh0001rouxffowf3pc","modified":0,"renderable":0},{"_id":"source/_posts/CDN/4.png","slug":"4.png","post":"ckqrtogrh0001rouxffowf3pc","modified":0,"renderable":0},{"_id":"source/_posts/CDN/5.png","slug":"5.png","post":"ckqrtogrh0001rouxffowf3pc","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/1.png","slug":"1.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/2.png","slug":"2.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/3.png","slug":"3.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/4.png","slug":"4.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/5.png","slug":"5.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/6.png","slug":"6.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/CVPR2019/7.png","slug":"7.png","post":"ckqrtogs70005rouxvvi4ckiv","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/hist_1.png","slug":"hist_1.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/Blog/1.png","slug":"1.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/10.png","slug":"10.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/11.png","slug":"11.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/12.png","slug":"12.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/13.png","slug":"13.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/14.png","slug":"14.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/15.png","slug":"15.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/2.png","slug":"2.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/3.png","slug":"3.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/4.png","slug":"4.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/5.png","slug":"5.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/6.png","slug":"6.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/7.png","slug":"7.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/8.png","slug":"8.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Blog/9.png","slug":"9.png","post":"ckqrtogrq0002rouxx72smesk","modified":0,"renderable":0},{"_id":"source/_posts/Sublime/1.png","slug":"1.png","post":"ckqrtogx2001drouxuk6r7wf7","modified":0,"renderable":0},{"_id":"source/_posts/Sublime/2.png","slug":"2.png","post":"ckqrtogx2001drouxuk6r7wf7","modified":0,"renderable":0},{"_id":"source/_posts/Java3/1_charset.jpg","slug":"1_charset.jpg","post":"ckqrtogwd0010rouxv3th5ifg","modified":0,"renderable":0},{"_id":"source/_posts/Java3/1_io.jpg","slug":"1_io.jpg","post":"ckqrtogwd0010rouxv3th5ifg","modified":0,"renderable":0},{"_id":"source/_posts/Java3/2_copy.jpg","slug":"2_copy.jpg","post":"ckqrtogwd0010rouxv3th5ifg","modified":0,"renderable":0},{"_id":"source/_posts/Java3/2_zhuanhuan.jpg","slug":"2_zhuanhuan.jpg","post":"ckqrtogwd0010rouxv3th5ifg","modified":0,"renderable":0},{"_id":"source/_posts/Java3/3_xuliehua.jpg","slug":"3_xuliehua.jpg","post":"ckqrtogwd0010rouxv3th5ifg","modified":0,"renderable":0},{"_id":"source/_posts/WT/1.png","slug":"1.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/2.png","slug":"2.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/3.png","slug":"3.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/4.png","slug":"4.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/5.png","slug":"5.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/6.jpg","slug":"6.jpg","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/7.png","slug":"7.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/git.png","slug":"git.png","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/WT/terminal.ico","slug":"terminal.ico","post":"ckqrtogwp0017rouxz83evpdv","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/二叉树.bmp","slug":"二叉树.bmp","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/删除结点.bmp","slug":"删除结点.bmp","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/单链表结构.png","slug":"单链表结构.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/单链表结构特点.png","slug":"单链表结构特点.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/堆栈.png","slug":"堆栈.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/增加结点.png","slug":"增加结点.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/数组删除.png","slug":"数组删除.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/数组查询快.png","slug":"数组查询快.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/数组添加.png","slug":"数组添加.png","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/Data-Structure/队列图.bmp","slug":"队列图.bmp","post":"ckqrtogvv000srouxl93pz0w1","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/1.png","slug":"1.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/10.png","slug":"10.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/2.png","slug":"2.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/3.png","slug":"3.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/4.png","slug":"4.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/5.png","slug":"5.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/6.png","slug":"6.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/7.png","slug":"7.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/8.png","slug":"8.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/PyCharm/9.png","slug":"9.png","post":"ckqrtogx4001frouxdq35tn8m","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/1.png","slug":"1.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/10.png","slug":"10.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/11.png","slug":"11.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/12.png","slug":"12.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/13.png","slug":"13.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/14.png","slug":"14.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/15.png","slug":"15.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/16.png","slug":"16.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/17.png","slug":"17.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/18.png","slug":"18.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/19.png","slug":"19.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/2.png","slug":"2.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/20.png","slug":"20.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/21.png","slug":"21.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/22.png","slug":"22.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/23.png","slug":"23.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/24.png","slug":"24.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/25.png","slug":"25.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/26.png","slug":"26.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/27.png","slug":"27.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/3.png","slug":"3.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/30.png","slug":"30.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/31.png","slug":"31.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/32.png","slug":"32.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/4.png","slug":"4.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/5.png","slug":"5.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/6.png","slug":"6.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/7.png","slug":"7.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/8.png","slug":"8.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/9.png","slug":"9.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/Pyramid_2.png","slug":"Pyramid_2.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/Pyramid_3.png","slug":"Pyramid_3.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/canny_1.png","slug":"canny_1.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/canny_2.png","slug":"canny_2.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/canny_3.png","slug":"canny_3.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/canny_4.png","slug":"canny_4.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/canny_5.png","slug":"canny_5.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/chain.png","slug":"chain.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/l.png","slug":"l.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/output_13_1.png","slug":"output_13_1.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/output_13_11.png","slug":"output_13_11.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/output_13_3.png","slug":"output_13_3.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/output_13_5.png","slug":"output_13_5.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/output_13_7.png","slug":"output_13_7.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/output_13_9.png","slug":"output_13_9.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/scharr.jpg","slug":"scharr.jpg","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV/sobel_1.png","slug":"sobel_1.png","post":"ckqrtogww0019rouxqeua0gc5","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckqrtogrh0001rouxffowf3pc","category_id":"ckqrtogs10003rouxnstwbnux","_id":"ckqrtogsh0009rouxqaiap3r2"},{"post_id":"ckqrtogrq0002rouxx72smesk","category_id":"ckqrtogs10003rouxnstwbnux","_id":"ckqrtogsk000croux5ebisrps"},{"post_id":"ckqrtogs70005rouxvvi4ckiv","category_id":"ckqrtogsg0008roux7qlezbmq","_id":"ckqrtogsm000frouxgtplhkkl"},{"post_id":"ckqrtogwd0010rouxv3th5ifg","category_id":"ckqrtogw6000wroux5y4eo2d5","_id":"ckqrtogwz001arouxbup9atbd"},{"post_id":"ckqrtogvv000srouxl93pz0w1","category_id":"ckqrtogw6000wroux5y4eo2d5","_id":"ckqrtogx3001eroux0p4lun2w"},{"post_id":"ckqrtogw2000urouxc5h4vg4l","category_id":"ckqrtogw6000wroux5y4eo2d5","_id":"ckqrtogx9001hrouxo9ql7qhx"},{"post_id":"ckqrtogw8000yrouxdlz71zh4","category_id":"ckqrtogw6000wroux5y4eo2d5","_id":"ckqrtogxc001kroux2dvxvuhe"},{"post_id":"ckqrtogx4001frouxdq35tn8m","category_id":"ckqrtogs10003rouxnstwbnux","_id":"ckqrtogxj001orouxq592kheh"},{"post_id":"ckqrtogwh0012rouxoel7vuq1","category_id":"ckqrtogx9001groux34l9akn4","_id":"ckqrtogxk001prouxd44j2psg"},{"post_id":"ckqrtogwp0017rouxz83evpdv","category_id":"ckqrtogxd001lroux5dxro2hv","_id":"ckqrtogxp001urouxvx7coigt"},{"post_id":"ckqrtogww0019rouxqeua0gc5","category_id":"ckqrtogxl001qrouxt57fhqge","_id":"ckqrtogxs001yrouxgz9kxmck"},{"post_id":"ckqrtogx2001drouxuk6r7wf7","category_id":"ckqrtogxd001lroux5dxro2hv","_id":"ckqrtogxt0021roux2isze8x7"}],"PostTag":[{"post_id":"ckqrtogrh0001rouxffowf3pc","tag_id":"ckqrtogs50004roux2554ibw9","_id":"ckqrtogsj000broux2ase699o"},{"post_id":"ckqrtogrh0001rouxffowf3pc","tag_id":"ckqrtogsc0007rouxnn9c43p3","_id":"ckqrtogsl000droux4f5hh47u"},{"post_id":"ckqrtogrq0002rouxx72smesk","tag_id":"ckqrtogsi000aroux625htnay","_id":"ckqrtogsq000jrouxswn52fsm"},{"post_id":"ckqrtogrq0002rouxx72smesk","tag_id":"ckqrtogsl000erouxykoo332m","_id":"ckqrtogsr000kroux8fz2ob9c"},{"post_id":"ckqrtogrq0002rouxx72smesk","tag_id":"ckqrtogsn000groux1v4743qg","_id":"ckqrtogss000mrouxmys2ius2"},{"post_id":"ckqrtogrq0002rouxx72smesk","tag_id":"ckqrtogsc0007rouxnn9c43p3","_id":"ckqrtogst000nrouxmjmej0rq"},{"post_id":"ckqrtogs70005rouxvvi4ckiv","tag_id":"ckqrtogsp000irouxcvmwv1kt","_id":"ckqrtogsv000prouxx1bvnwfw"},{"post_id":"ckqrtogs70005rouxvvi4ckiv","tag_id":"ckqrtogsr000lrouxspbea7bv","_id":"ckqrtogsv000qrouxkedwbs0u"},{"post_id":"ckqrtogs70005rouxvvi4ckiv","tag_id":"ckqrtogsu000orouxwn8da1t9","_id":"ckqrtogsw000rrouxd8fzmnhn"},{"post_id":"ckqrtogvv000srouxl93pz0w1","tag_id":"ckqrtogw7000xrouxd5wbudn7","_id":"ckqrtogwp0016rouxj7ouvg7b"},{"post_id":"ckqrtogw2000urouxc5h4vg4l","tag_id":"ckqrtogwl0014rouxlwof03mn","_id":"ckqrtogxc001jrouxnjqx1s2w"},{"post_id":"ckqrtogw2000urouxc5h4vg4l","tag_id":"ckqrtogx1001crouxx3cn6q5z","_id":"ckqrtogxe001mrouxdqg1fmk3"},{"post_id":"ckqrtogw8000yrouxdlz71zh4","tag_id":"ckqrtogwl0014rouxlwof03mn","_id":"ckqrtogxo001srouxu6qu80ay"},{"post_id":"ckqrtogw8000yrouxdlz71zh4","tag_id":"ckqrtogx1001crouxx3cn6q5z","_id":"ckqrtogxo001trouxk5epl27b"},{"post_id":"ckqrtogwd0010rouxv3th5ifg","tag_id":"ckqrtogwl0014rouxlwof03mn","_id":"ckqrtogxt001zrouxl2m633yv"},{"post_id":"ckqrtogwd0010rouxv3th5ifg","tag_id":"ckqrtogx1001crouxx3cn6q5z","_id":"ckqrtogxt0020rouxa5azla1f"},{"post_id":"ckqrtogwh0012rouxoel7vuq1","tag_id":"ckqrtogxr001xroux0q29crtq","_id":"ckqrtogxw0024rouxxupn35zo"},{"post_id":"ckqrtogwh0012rouxoel7vuq1","tag_id":"ckqrtogx1001crouxx3cn6q5z","_id":"ckqrtogxw0025rouxn9wy1v05"},{"post_id":"ckqrtogwp0017rouxz83evpdv","tag_id":"ckqrtogxv0023rouxrigvdyxs","_id":"ckqrtogxy0027roux306verkt"},{"post_id":"ckqrtogwp0017rouxz83evpdv","tag_id":"ckqrtogs50004roux2554ibw9","_id":"ckqrtogxz0028rouxeldtda58"},{"post_id":"ckqrtogww0019rouxqeua0gc5","tag_id":"ckqrtogxx0026rouxey23t1rq","_id":"ckqrtogy2002broux2t3fuggn"},{"post_id":"ckqrtogww0019rouxqeua0gc5","tag_id":"ckqrtogxz0029rouxtttba58k","_id":"ckqrtogy3002crouxs7n133c6"},{"post_id":"ckqrtogx2001drouxuk6r7wf7","tag_id":"ckqrtogy1002arouxkm3a6vue","_id":"ckqrtogy4002eroux8i1teivr"},{"post_id":"ckqrtogx2001drouxuk6r7wf7","tag_id":"ckqrtogs50004roux2554ibw9","_id":"ckqrtogy5002frouxk33qbnpe"},{"post_id":"ckqrtogx4001frouxdq35tn8m","tag_id":"ckqrtogy3002drouxwqiwywkk","_id":"ckqrtogy7002hrouxq5oi1qcj"},{"post_id":"ckqrtogx4001frouxdq35tn8m","tag_id":"ckqrtogy6002grouxp6oj7a1t","_id":"ckqrtogy7002irouxn5tn3jhk"}],"Tag":[{"name":"工具","_id":"ckqrtogs50004roux2554ibw9"},{"name":"博客","_id":"ckqrtogsc0007rouxnn9c43p3"},{"name":"Hexo","_id":"ckqrtogsi000aroux625htnay"},{"name":"GitHub","_id":"ckqrtogsl000erouxykoo332m"},{"name":"Netlify","_id":"ckqrtogsn000groux1v4743qg"},{"name":"DeepLearning","_id":"ckqrtogsp000irouxcvmwv1kt"},{"name":"目标检测","_id":"ckqrtogsr000lrouxspbea7bv"},{"name":"CVPR","_id":"ckqrtogsu000orouxwn8da1t9"},{"name":"数据结构与算法","_id":"ckqrtogw7000xrouxd5wbudn7"},{"name":"Java","_id":"ckqrtogwl0014rouxlwof03mn"},{"name":"语言","_id":"ckqrtogx1001crouxx3cn6q5z"},{"name":"MySQL","_id":"ckqrtogxr001xroux0q29crtq"},{"name":"Windows Terminal","_id":"ckqrtogxv0023rouxrigvdyxs"},{"name":"OpenCV","_id":"ckqrtogxx0026rouxey23t1rq"},{"name":"python","_id":"ckqrtogxz0029rouxtttba58k"},{"name":"Sublime","_id":"ckqrtogy1002arouxkm3a6vue"},{"name":"PyCharm","_id":"ckqrtogy3002drouxwqiwywkk"},{"name":"服务器配置","_id":"ckqrtogy6002grouxp6oj7a1t"}]}}